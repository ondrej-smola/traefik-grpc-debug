// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ntx/license/license.proto

/*
	Package license is a generated protocol buffer package.

	It is generated from these files:
		ntx/license/license.proto

	It has these top-level messages:
		Cluster
		Task
		VersionedTasks
		Limits
		License
		LicenseInfo
		Client
		Challenge
		ClientsList
		LicenseResponse
		ChallengeRequest
		LicenseDecodeRequest
		CreditSnapshot
*/
package license

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import ntx_scheduler "gitlab.com/nanotrix/nanogrid/pkg/ntx/scheduler"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LicenseInfo_State int32

const (
	LicenseInfo_UNKNOWN LicenseInfo_State = 0
	LicenseInfo_WAITING LicenseInfo_State = 1
	LicenseInfo_ACTIVE  LicenseInfo_State = 2
	LicenseInfo_EXPIRED LicenseInfo_State = 3
)

var LicenseInfo_State_name = map[int32]string{
	0: "UNKNOWN",
	1: "WAITING",
	2: "ACTIVE",
	3: "EXPIRED",
}
var LicenseInfo_State_value = map[string]int32{
	"UNKNOWN": 0,
	"WAITING": 1,
	"ACTIVE":  2,
	"EXPIRED": 3,
}

func (x LicenseInfo_State) String() string {
	return proto.EnumName(LicenseInfo_State_name, int32(x))
}
func (LicenseInfo_State) EnumDescriptor() ([]byte, []int) { return fileDescriptorLicense, []int{5, 0} }

type Client_Capabilities_Capability int32

const (
	Client_Capabilities_NOT_SET      Client_Capabilities_Capability = 0
	Client_Capabilities_CUSTOM_TASKS Client_Capabilities_Capability = 1
)

var Client_Capabilities_Capability_name = map[int32]string{
	0: "NOT_SET",
	1: "CUSTOM_TASKS",
}
var Client_Capabilities_Capability_value = map[string]int32{
	"NOT_SET":      0,
	"CUSTOM_TASKS": 1,
}

func (x Client_Capabilities_Capability) String() string {
	return proto.EnumName(Client_Capabilities_Capability_name, int32(x))
}
func (Client_Capabilities_Capability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorLicense, []int{6, 0, 0}
}

type Client_Requirements_Requirement int32

const (
	Client_Requirements_NOT_SET              Client_Requirements_Requirement = 0
	Client_Requirements_MESOS_HOSTNAME_CHECK Client_Requirements_Requirement = 1
)

var Client_Requirements_Requirement_name = map[int32]string{
	0: "NOT_SET",
	1: "MESOS_HOSTNAME_CHECK",
}
var Client_Requirements_Requirement_value = map[string]int32{
	"NOT_SET":              0,
	"MESOS_HOSTNAME_CHECK": 1,
}

func (x Client_Requirements_Requirement) String() string {
	return proto.EnumName(Client_Requirements_Requirement_name, int32(x))
}
func (Client_Requirements_Requirement) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorLicense, []int{6, 1, 0}
}

type Cluster struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Created  uint64 `protobuf:"varint,2,opt,name=created,proto3" json:"created,omitempty"`
	Key      string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Hostname string `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (m *Cluster) Reset()                    { *m = Cluster{} }
func (m *Cluster) String() string            { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()               {}
func (*Cluster) Descriptor() ([]byte, []int) { return fileDescriptorLicense, []int{0} }

func (m *Cluster) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Cluster) GetCreated() uint64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Cluster) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Cluster) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type Task struct {
	Service  string          `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Tags     []string        `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	Profiles []*Task_Profile `protobuf:"bytes,3,rep,name=profiles" json:"profiles,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptorLicense, []int{1} }

func (m *Task) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Task) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Task) GetProfiles() []*Task_Profile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

type Task_Profile struct {
	Id     string                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Labels []string                         `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty"`
	Task   *ntx_scheduler.TaskConfiguration `protobuf:"bytes,3,opt,name=task" json:"task,omitempty"`
}

func (m *Task_Profile) Reset()                    { *m = Task_Profile{} }
func (m *Task_Profile) String() string            { return proto.CompactTextString(m) }
func (*Task_Profile) ProtoMessage()               {}
func (*Task_Profile) Descriptor() ([]byte, []int) { return fileDescriptorLicense, []int{1, 0} }

func (m *Task_Profile) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task_Profile) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Task_Profile) GetTask() *ntx_scheduler.TaskConfiguration {
	if m != nil {
		return m.Task
	}
	return nil
}

type VersionedTasks struct {
	Tasks   []*Task `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
	Version string  `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Created uint64  `protobuf:"varint,3,opt,name=created,proto3" json:"created,omitempty"`
}

func (m *VersionedTasks) Reset()                    { *m = VersionedTasks{} }
func (m *VersionedTasks) String() string            { return proto.CompactTextString(m) }
func (*VersionedTasks) ProtoMessage()               {}
func (*VersionedTasks) Descriptor() ([]byte, []int) { return fileDescriptorLicense, []int{2} }

func (m *VersionedTasks) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *VersionedTasks) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *VersionedTasks) GetCreated() uint64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type Limits struct {
	MonthlyCredit uint64 `protobuf:"varint,1,opt,name=monthlyCredit,proto3" json:"monthlyCredit,omitempty"`
}

func (m *Limits) Reset()                    { *m = Limits{} }
func (m *Limits) String() string            { return proto.CompactTextString(m) }
func (*Limits) ProtoMessage()               {}
func (*Limits) Descriptor() ([]byte, []int) { return fileDescriptorLicense, []int{3} }

func (m *Limits) GetMonthlyCredit() uint64 {
	if m != nil {
		return m.MonthlyCredit
	}
	return 0
}

type License struct {
	Limits       *Limits                           `protobuf:"bytes,1,opt,name=limits" json:"limits,omitempty"`
	Cluster      *Cluster                          `protobuf:"bytes,2,opt,name=cluster" json:"cluster,omitempty"`
	Tasks        *VersionedTasks                   `protobuf:"bytes,4,opt,name=tasks" json:"tasks,omitempty"`
	Capabilities []Client_Capabilities_Capability  `protobuf:"varint,7,rep,packed,name=capabilities,enum=ntx.license.Client_Capabilities_Capability" json:"capabilities,omitempty"`
	Requirements []Client_Requirements_Requirement `protobuf:"varint,8,rep,packed,name=requirements,enum=ntx.license.Client_Requirements_Requirement" json:"requirements,omitempty"`
	CustomerId   string                            `protobuf:"bytes,13,opt,name=customerId,proto3" json:"customerId,omitempty"`
	Created      uint64                            `protobuf:"varint,14,opt,name=created,proto3" json:"created,omitempty"`
	Expire       uint64                            `protobuf:"varint,15,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (m *License) Reset()                    { *m = License{} }
func (m *License) String() string            { return proto.CompactTextString(m) }
func (*License) ProtoMessage()               {}
func (*License) Descriptor() ([]byte, []int) { return fileDescriptorLicense, []int{4} }

func (m *License) GetLimits() *Limits {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *License) GetCluster() *Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *License) GetTasks() *VersionedTasks {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *License) GetCapabilities() []Client_Capabilities_Capability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *License) GetRequirements() []Client_Requirements_Requirement {
	if m != nil {
		return m.Requirements
	}
	return nil
}

func (m *License) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *License) GetCreated() uint64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *License) GetExpire() uint64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

type LicenseInfo struct {
	State        LicenseInfo_State `protobuf:"varint,1,opt,name=state,proto3,enum=ntx.license.LicenseInfo_State" json:"state,omitempty"`
	Cluster      *Cluster          `protobuf:"bytes,2,opt,name=cluster" json:"cluster,omitempty"`
	Limits       *Limits           `protobuf:"bytes,3,opt,name=limits" json:"limits,omitempty"`
	CustomerId   string            `protobuf:"bytes,4,opt,name=customerId,proto3" json:"customerId,omitempty"`
	TasksVersion string            `protobuf:"bytes,10,opt,name=tasksVersion,proto3" json:"tasksVersion,omitempty"`
	Created      uint64            `protobuf:"varint,14,opt,name=created,proto3" json:"created,omitempty"`
	Expire       uint64            `protobuf:"varint,15,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (m *LicenseInfo) Reset()                    { *m = LicenseInfo{} }
func (m *LicenseInfo) String() string            { return proto.CompactTextString(m) }
func (*LicenseInfo) ProtoMessage()               {}
func (*LicenseInfo) Descriptor() ([]byte, []int) { return fileDescriptorLicense, []int{5} }

func (m *LicenseInfo) GetState() LicenseInfo_State {
	if m != nil {
		return m.State
	}
	return LicenseInfo_UNKNOWN
}

func (m *LicenseInfo) GetCluster() *Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *LicenseInfo) GetLimits() *Limits {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *LicenseInfo) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *LicenseInfo) GetTasksVersion() string {
	if m != nil {
		return m.TasksVersion
	}
	return ""
}

func (m *LicenseInfo) GetCreated() uint64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *LicenseInfo) GetExpire() uint64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

type Client struct {
	ClusterId          string                            `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	CustomerId         string                            `protobuf:"bytes,2,opt,name=customerId,proto3" json:"customerId,omitempty"`
	Label              string                            `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Permissions        []string                          `protobuf:"bytes,4,rep,name=permissions" json:"permissions,omitempty"`
	Tasks              string                            `protobuf:"bytes,5,opt,name=tasks,proto3" json:"tasks,omitempty"`
	Limits             *Limits                           `protobuf:"bytes,6,opt,name=limits" json:"limits,omitempty"`
	Capabilities       []Client_Capabilities_Capability  `protobuf:"varint,7,rep,packed,name=capabilities,enum=ntx.license.Client_Capabilities_Capability" json:"capabilities,omitempty"`
	Requirements       []Client_Requirements_Requirement `protobuf:"varint,8,rep,packed,name=requirements,enum=ntx.license.Client_Requirements_Requirement" json:"requirements,omitempty"`
	Owner              *Challenge                        `protobuf:"bytes,10,opt,name=owner" json:"owner,omitempty"`
	Version            uint64                            `protobuf:"varint,11,opt,name=version,proto3" json:"version,omitempty"`
	MaxLicenseDuration uint64                            `protobuf:"varint,15,opt,name=maxLicenseDuration,proto3" json:"maxLicenseDuration,omitempty"`
	Expire             uint64                            `protobuf:"varint,16,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (m *Client) Reset()                    { *m = Client{} }
func (m *Client) String() string            { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()               {}
func (*Client) Descriptor() ([]byte, []int) { return fileDescriptorLicense, []int{6} }

func (m *Client) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *Client) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *Client) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Client) GetPermissions() []string {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *Client) GetTasks() string {
	if m != nil {
		return m.Tasks
	}
	return ""
}

func (m *Client) GetLimits() *Limits {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *Client) GetCapabilities() []Client_Capabilities_Capability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *Client) GetRequirements() []Client_Requirements_Requirement {
	if m != nil {
		return m.Requirements
	}
	return nil
}

func (m *Client) GetOwner() *Challenge {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *Client) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Client) GetMaxLicenseDuration() uint64 {
	if m != nil {
		return m.MaxLicenseDuration
	}
	return 0
}

func (m *Client) GetExpire() uint64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

type Client_Capabilities struct {
}

func (m *Client_Capabilities) Reset()                    { *m = Client_Capabilities{} }
func (m *Client_Capabilities) String() string            { return proto.CompactTextString(m) }
func (*Client_Capabilities) ProtoMessage()               {}
func (*Client_Capabilities) Descriptor() ([]byte, []int) { return fileDescriptorLicense, []int{6, 0} }

type Client_Requirements struct {
}

func (m *Client_Requirements) Reset()                    { *m = Client_Requirements{} }
func (m *Client_Requirements) String() string            { return proto.CompactTextString(m) }
func (*Client_Requirements) ProtoMessage()               {}
func (*Client_Requirements) Descriptor() ([]byte, []int) { return fileDescriptorLicense, []int{6, 1} }

type Challenge struct {
	Cluster *Cluster        `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Credit  *CreditSnapshot `protobuf:"bytes,2,opt,name=credit" json:"credit,omitempty"`
}

func (m *Challenge) Reset()                    { *m = Challenge{} }
func (m *Challenge) String() string            { return proto.CompactTextString(m) }
func (*Challenge) ProtoMessage()               {}
func (*Challenge) Descriptor() ([]byte, []int) { return fileDescriptorLicense, []int{7} }

func (m *Challenge) GetCluster() *Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *Challenge) GetCredit() *CreditSnapshot {
	if m != nil {
		return m.Credit
	}
	return nil
}

type ClientsList struct {
	Clients []*Client `protobuf:"bytes,1,rep,name=clients" json:"clients,omitempty"`
}

func (m *ClientsList) Reset()                    { *m = ClientsList{} }
func (m *ClientsList) String() string            { return proto.CompactTextString(m) }
func (*ClientsList) ProtoMessage()               {}
func (*ClientsList) Descriptor() ([]byte, []int) { return fileDescriptorLicense, []int{8} }

func (m *ClientsList) GetClients() []*Client {
	if m != nil {
		return m.Clients
	}
	return nil
}

type LicenseResponse struct {
	License string `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
}

func (m *LicenseResponse) Reset()                    { *m = LicenseResponse{} }
func (m *LicenseResponse) String() string            { return proto.CompactTextString(m) }
func (*LicenseResponse) ProtoMessage()               {}
func (*LicenseResponse) Descriptor() ([]byte, []int) { return fileDescriptorLicense, []int{9} }

func (m *LicenseResponse) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

type ChallengeRequest struct {
	Challenge string `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (m *ChallengeRequest) Reset()                    { *m = ChallengeRequest{} }
func (m *ChallengeRequest) String() string            { return proto.CompactTextString(m) }
func (*ChallengeRequest) ProtoMessage()               {}
func (*ChallengeRequest) Descriptor() ([]byte, []int) { return fileDescriptorLicense, []int{10} }

func (m *ChallengeRequest) GetChallenge() string {
	if m != nil {
		return m.Challenge
	}
	return ""
}

type LicenseDecodeRequest struct {
	Challenge string `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
	License   string `protobuf:"bytes,2,opt,name=license,proto3" json:"license,omitempty"`
}

func (m *LicenseDecodeRequest) Reset()                    { *m = LicenseDecodeRequest{} }
func (m *LicenseDecodeRequest) String() string            { return proto.CompactTextString(m) }
func (*LicenseDecodeRequest) ProtoMessage()               {}
func (*LicenseDecodeRequest) Descriptor() ([]byte, []int) { return fileDescriptorLicense, []int{11} }

func (m *LicenseDecodeRequest) GetChallenge() string {
	if m != nil {
		return m.Challenge
	}
	return ""
}

func (m *LicenseDecodeRequest) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

type CreditSnapshot struct {
	ClusterId string            `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Credits   map[uint64]uint64 `protobuf:"bytes,2,rep,name=credits" json:"credits,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Created   uint64            `protobuf:"varint,3,opt,name=created,proto3" json:"created,omitempty"`
}

func (m *CreditSnapshot) Reset()                    { *m = CreditSnapshot{} }
func (m *CreditSnapshot) String() string            { return proto.CompactTextString(m) }
func (*CreditSnapshot) ProtoMessage()               {}
func (*CreditSnapshot) Descriptor() ([]byte, []int) { return fileDescriptorLicense, []int{12} }

func (m *CreditSnapshot) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *CreditSnapshot) GetCredits() map[uint64]uint64 {
	if m != nil {
		return m.Credits
	}
	return nil
}

func (m *CreditSnapshot) GetCreated() uint64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func init() {
	proto.RegisterType((*Cluster)(nil), "ntx.license.Cluster")
	proto.RegisterType((*Task)(nil), "ntx.license.Task")
	proto.RegisterType((*Task_Profile)(nil), "ntx.license.Task.Profile")
	proto.RegisterType((*VersionedTasks)(nil), "ntx.license.VersionedTasks")
	proto.RegisterType((*Limits)(nil), "ntx.license.Limits")
	proto.RegisterType((*License)(nil), "ntx.license.License")
	proto.RegisterType((*LicenseInfo)(nil), "ntx.license.LicenseInfo")
	proto.RegisterType((*Client)(nil), "ntx.license.Client")
	proto.RegisterType((*Client_Capabilities)(nil), "ntx.license.Client.Capabilities")
	proto.RegisterType((*Client_Requirements)(nil), "ntx.license.Client.Requirements")
	proto.RegisterType((*Challenge)(nil), "ntx.license.Challenge")
	proto.RegisterType((*ClientsList)(nil), "ntx.license.ClientsList")
	proto.RegisterType((*LicenseResponse)(nil), "ntx.license.LicenseResponse")
	proto.RegisterType((*ChallengeRequest)(nil), "ntx.license.ChallengeRequest")
	proto.RegisterType((*LicenseDecodeRequest)(nil), "ntx.license.LicenseDecodeRequest")
	proto.RegisterType((*CreditSnapshot)(nil), "ntx.license.CreditSnapshot")
	proto.RegisterEnum("ntx.license.LicenseInfo_State", LicenseInfo_State_name, LicenseInfo_State_value)
	proto.RegisterEnum("ntx.license.Client_Capabilities_Capability", Client_Capabilities_Capability_name, Client_Capabilities_Capability_value)
	proto.RegisterEnum("ntx.license.Client_Requirements_Requirement", Client_Requirements_Requirement_name, Client_Requirements_Requirement_value)
}
func (m *Cluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cluster) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Created != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.Created))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Hostname) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	return i, nil
}

func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Service) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Profiles) > 0 {
		for _, msg := range m.Profiles {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintLicense(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Task_Profile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task_Profile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Labels) > 0 {
		for _, s := range m.Labels {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Task != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.Task.Size()))
		n1, err := m.Task.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *VersionedTasks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionedTasks) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, msg := range m.Tasks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintLicense(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.Created != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.Created))
	}
	return i, nil
}

func (m *Limits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Limits) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MonthlyCredit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.MonthlyCredit))
	}
	return i, nil
}

func (m *License) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *License) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Limits != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.Limits.Size()))
		n2, err := m.Limits.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Cluster != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.Cluster.Size()))
		n3, err := m.Cluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Tasks != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.Tasks.Size()))
		n4, err := m.Tasks.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Capabilities) > 0 {
		dAtA6 := make([]byte, len(m.Capabilities)*10)
		var j5 int
		for _, num := range m.Capabilities {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintLicense(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if len(m.Requirements) > 0 {
		dAtA8 := make([]byte, len(m.Requirements)*10)
		var j7 int
		for _, num := range m.Requirements {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintLicense(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if len(m.CustomerId) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.CustomerId)))
		i += copy(dAtA[i:], m.CustomerId)
	}
	if m.Created != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.Created))
	}
	if m.Expire != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.Expire))
	}
	return i, nil
}

func (m *LicenseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LicenseInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.State))
	}
	if m.Cluster != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.Cluster.Size()))
		n9, err := m.Cluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Limits != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.Limits.Size()))
		n10, err := m.Limits.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.CustomerId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.CustomerId)))
		i += copy(dAtA[i:], m.CustomerId)
	}
	if len(m.TasksVersion) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.TasksVersion)))
		i += copy(dAtA[i:], m.TasksVersion)
	}
	if m.Created != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.Created))
	}
	if m.Expire != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.Expire))
	}
	return i, nil
}

func (m *Client) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Client) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClusterId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.ClusterId)))
		i += copy(dAtA[i:], m.ClusterId)
	}
	if len(m.CustomerId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.CustomerId)))
		i += copy(dAtA[i:], m.CustomerId)
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if len(m.Permissions) > 0 {
		for _, s := range m.Permissions {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Tasks) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.Tasks)))
		i += copy(dAtA[i:], m.Tasks)
	}
	if m.Limits != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.Limits.Size()))
		n11, err := m.Limits.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.Capabilities) > 0 {
		dAtA13 := make([]byte, len(m.Capabilities)*10)
		var j12 int
		for _, num := range m.Capabilities {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintLicense(dAtA, i, uint64(j12))
		i += copy(dAtA[i:], dAtA13[:j12])
	}
	if len(m.Requirements) > 0 {
		dAtA15 := make([]byte, len(m.Requirements)*10)
		var j14 int
		for _, num := range m.Requirements {
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintLicense(dAtA, i, uint64(j14))
		i += copy(dAtA[i:], dAtA15[:j14])
	}
	if m.Owner != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.Owner.Size()))
		n16, err := m.Owner.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.Version != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.Version))
	}
	if m.MaxLicenseDuration != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.MaxLicenseDuration))
	}
	if m.Expire != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.Expire))
	}
	return i, nil
}

func (m *Client_Capabilities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Client_Capabilities) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Client_Requirements) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Client_Requirements) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Challenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Challenge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cluster != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.Cluster.Size()))
		n17, err := m.Cluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.Credit != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.Credit.Size()))
		n18, err := m.Credit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *ClientsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientsList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Clients) > 0 {
		for _, msg := range m.Clients {
			dAtA[i] = 0xa
			i++
			i = encodeVarintLicense(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LicenseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LicenseResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.License) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.License)))
		i += copy(dAtA[i:], m.License)
	}
	return i, nil
}

func (m *ChallengeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Challenge) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.Challenge)))
		i += copy(dAtA[i:], m.Challenge)
	}
	return i, nil
}

func (m *LicenseDecodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LicenseDecodeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Challenge) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.Challenge)))
		i += copy(dAtA[i:], m.Challenge)
	}
	if len(m.License) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.License)))
		i += copy(dAtA[i:], m.License)
	}
	return i, nil
}

func (m *CreditSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreditSnapshot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClusterId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.ClusterId)))
		i += copy(dAtA[i:], m.ClusterId)
	}
	if len(m.Credits) > 0 {
		for k, _ := range m.Credits {
			dAtA[i] = 0x12
			i++
			v := m.Credits[k]
			mapSize := 1 + sovLicense(uint64(k)) + 1 + sovLicense(uint64(v))
			i = encodeVarintLicense(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintLicense(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintLicense(dAtA, i, uint64(v))
		}
	}
	if m.Created != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.Created))
	}
	return i, nil
}

func encodeFixed64License(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32License(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintLicense(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Cluster) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	if m.Created != 0 {
		n += 1 + sovLicense(uint64(m.Created))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	return n
}

func (m *Task) Size() (n int) {
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovLicense(uint64(l))
		}
	}
	if len(m.Profiles) > 0 {
		for _, e := range m.Profiles {
			l = e.Size()
			n += 1 + l + sovLicense(uint64(l))
		}
	}
	return n
}

func (m *Task_Profile) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	if len(m.Labels) > 0 {
		for _, s := range m.Labels {
			l = len(s)
			n += 1 + l + sovLicense(uint64(l))
		}
	}
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovLicense(uint64(l))
	}
	return n
}

func (m *VersionedTasks) Size() (n int) {
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovLicense(uint64(l))
		}
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	if m.Created != 0 {
		n += 1 + sovLicense(uint64(m.Created))
	}
	return n
}

func (m *Limits) Size() (n int) {
	var l int
	_ = l
	if m.MonthlyCredit != 0 {
		n += 1 + sovLicense(uint64(m.MonthlyCredit))
	}
	return n
}

func (m *License) Size() (n int) {
	var l int
	_ = l
	if m.Limits != nil {
		l = m.Limits.Size()
		n += 1 + l + sovLicense(uint64(l))
	}
	if m.Cluster != nil {
		l = m.Cluster.Size()
		n += 1 + l + sovLicense(uint64(l))
	}
	if m.Tasks != nil {
		l = m.Tasks.Size()
		n += 1 + l + sovLicense(uint64(l))
	}
	if len(m.Capabilities) > 0 {
		l = 0
		for _, e := range m.Capabilities {
			l += sovLicense(uint64(e))
		}
		n += 1 + sovLicense(uint64(l)) + l
	}
	if len(m.Requirements) > 0 {
		l = 0
		for _, e := range m.Requirements {
			l += sovLicense(uint64(e))
		}
		n += 1 + sovLicense(uint64(l)) + l
	}
	l = len(m.CustomerId)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	if m.Created != 0 {
		n += 1 + sovLicense(uint64(m.Created))
	}
	if m.Expire != 0 {
		n += 1 + sovLicense(uint64(m.Expire))
	}
	return n
}

func (m *LicenseInfo) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovLicense(uint64(m.State))
	}
	if m.Cluster != nil {
		l = m.Cluster.Size()
		n += 1 + l + sovLicense(uint64(l))
	}
	if m.Limits != nil {
		l = m.Limits.Size()
		n += 1 + l + sovLicense(uint64(l))
	}
	l = len(m.CustomerId)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	l = len(m.TasksVersion)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	if m.Created != 0 {
		n += 1 + sovLicense(uint64(m.Created))
	}
	if m.Expire != 0 {
		n += 1 + sovLicense(uint64(m.Expire))
	}
	return n
}

func (m *Client) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	l = len(m.CustomerId)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	if len(m.Permissions) > 0 {
		for _, s := range m.Permissions {
			l = len(s)
			n += 1 + l + sovLicense(uint64(l))
		}
	}
	l = len(m.Tasks)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	if m.Limits != nil {
		l = m.Limits.Size()
		n += 1 + l + sovLicense(uint64(l))
	}
	if len(m.Capabilities) > 0 {
		l = 0
		for _, e := range m.Capabilities {
			l += sovLicense(uint64(e))
		}
		n += 1 + sovLicense(uint64(l)) + l
	}
	if len(m.Requirements) > 0 {
		l = 0
		for _, e := range m.Requirements {
			l += sovLicense(uint64(e))
		}
		n += 1 + sovLicense(uint64(l)) + l
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovLicense(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovLicense(uint64(m.Version))
	}
	if m.MaxLicenseDuration != 0 {
		n += 1 + sovLicense(uint64(m.MaxLicenseDuration))
	}
	if m.Expire != 0 {
		n += 2 + sovLicense(uint64(m.Expire))
	}
	return n
}

func (m *Client_Capabilities) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Client_Requirements) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Challenge) Size() (n int) {
	var l int
	_ = l
	if m.Cluster != nil {
		l = m.Cluster.Size()
		n += 1 + l + sovLicense(uint64(l))
	}
	if m.Credit != nil {
		l = m.Credit.Size()
		n += 1 + l + sovLicense(uint64(l))
	}
	return n
}

func (m *ClientsList) Size() (n int) {
	var l int
	_ = l
	if len(m.Clients) > 0 {
		for _, e := range m.Clients {
			l = e.Size()
			n += 1 + l + sovLicense(uint64(l))
		}
	}
	return n
}

func (m *LicenseResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.License)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	return n
}

func (m *ChallengeRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Challenge)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	return n
}

func (m *LicenseDecodeRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Challenge)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	l = len(m.License)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	return n
}

func (m *CreditSnapshot) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	if len(m.Credits) > 0 {
		for k, v := range m.Credits {
			_ = k
			_ = v
			mapEntrySize := 1 + sovLicense(uint64(k)) + 1 + sovLicense(uint64(v))
			n += mapEntrySize + 1 + sovLicense(uint64(mapEntrySize))
		}
	}
	if m.Created != 0 {
		n += 1 + sovLicense(uint64(m.Created))
	}
	return n
}

func sovLicense(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLicense(x uint64) (n int) {
	return sovLicense(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Cluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profiles = append(m.Profiles, &Task_Profile{})
			if err := m.Profiles[len(m.Profiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task_Profile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Profile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Profile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &ntx_scheduler.TaskConfiguration{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionedTasks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionedTasks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionedTasks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &Task{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Limits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Limits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Limits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthlyCredit", wireType)
			}
			m.MonthlyCredit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonthlyCredit |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *License) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: License: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: License: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limits == nil {
				m.Limits = &Limits{}
			}
			if err := m.Limits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cluster == nil {
				m.Cluster = &Cluster{}
			}
			if err := m.Cluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tasks == nil {
				m.Tasks = &VersionedTasks{}
			}
			if err := m.Tasks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v Client_Capabilities_Capability
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLicense
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Client_Capabilities_Capability(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Capabilities = append(m.Capabilities, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLicense
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLicense
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Client_Capabilities_Capability
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLicense
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Client_Capabilities_Capability(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Capabilities = append(m.Capabilities, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
		case 8:
			if wireType == 0 {
				var v Client_Requirements_Requirement
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLicense
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Client_Requirements_Requirement(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Requirements = append(m.Requirements, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLicense
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLicense
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Client_Requirements_Requirement
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLicense
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Client_Requirements_Requirement(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Requirements = append(m.Requirements, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Requirements", wireType)
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LicenseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LicenseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LicenseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (LicenseInfo_State(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cluster == nil {
				m.Cluster = &Cluster{}
			}
			if err := m.Cluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limits == nil {
				m.Limits = &Limits{}
			}
			if err := m.Limits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TasksVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TasksVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Client) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Client: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Client: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permissions = append(m.Permissions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limits == nil {
				m.Limits = &Limits{}
			}
			if err := m.Limits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v Client_Capabilities_Capability
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLicense
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Client_Capabilities_Capability(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Capabilities = append(m.Capabilities, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLicense
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLicense
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Client_Capabilities_Capability
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLicense
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Client_Capabilities_Capability(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Capabilities = append(m.Capabilities, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
		case 8:
			if wireType == 0 {
				var v Client_Requirements_Requirement
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLicense
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Client_Requirements_Requirement(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Requirements = append(m.Requirements, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLicense
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLicense
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Client_Requirements_Requirement
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLicense
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Client_Requirements_Requirement(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Requirements = append(m.Requirements, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Requirements", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &Challenge{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLicenseDuration", wireType)
			}
			m.MaxLicenseDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLicenseDuration |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Client_Capabilities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Capabilities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Capabilities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Client_Requirements) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Requirements: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Requirements: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Challenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Challenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Challenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cluster == nil {
				m.Cluster = &Cluster{}
			}
			if err := m.Cluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Credit == nil {
				m.Credit = &CreditSnapshot{}
			}
			if err := m.Credit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientsList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientsList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clients = append(m.Clients, &Client{})
			if err := m.Clients[len(m.Clients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LicenseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LicenseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LicenseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.License = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LicenseDecodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LicenseDecodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LicenseDecodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.License = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreditSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreditSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreditSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.Credits == nil {
				m.Credits = make(map[uint64]uint64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLicense
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLicense
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Credits[mapkey] = mapvalue
			} else {
				var mapvalue uint64
				m.Credits[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLicense(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLicense
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLicense
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLicense(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLicense = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLicense   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ntx/license/license.proto", fileDescriptorLicense) }

var fileDescriptorLicense = []byte{
	// 1005 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xae, 0xed, 0xfc, 0x34, 0xc7, 0xd9, 0xac, 0x99, 0x8d, 0x2a, 0x6f, 0x40, 0x51, 0x64, 0x21,
	0x11, 0xa9, 0x8b, 0x17, 0xb2, 0x45, 0x42, 0x85, 0x9b, 0x6e, 0x1a, 0xd8, 0xa8, 0x6d, 0x52, 0x4d,
	0xb2, 0xbb, 0x88, 0x9b, 0xca, 0x75, 0xa6, 0x8d, 0x55, 0xc7, 0xce, 0x7a, 0x26, 0xa5, 0xe5, 0x21,
	0xb8, 0xe6, 0x19, 0x78, 0x92, 0xbd, 0x44, 0x88, 0x07, 0x40, 0xe5, 0x21, 0xb8, 0x45, 0x9e, 0x9f,
	0xc4, 0x6e, 0x03, 0x5d, 0xb8, 0xdb, 0xab, 0xe4, 0x3b, 0xf3, 0xcd, 0xcc, 0xf9, 0xce, 0xdf, 0x18,
	0x1e, 0x47, 0xec, 0xea, 0x69, 0x18, 0xf8, 0x24, 0xa2, 0x44, 0xfd, 0xba, 0xf3, 0x24, 0x66, 0x31,
	0x32, 0x23, 0x76, 0xe5, 0x4a, 0x53, 0xc3, 0x4e, 0x79, 0xd4, 0x9f, 0x92, 0xc9, 0x22, 0x24, 0xc9,
	0x53, 0xe6, 0xd1, 0x0b, 0x41, 0x73, 0x3c, 0x28, 0x77, 0xc3, 0x05, 0x65, 0x24, 0x41, 0x35, 0xd0,
	0x83, 0x89, 0xad, 0xb5, 0xb4, 0x76, 0x05, 0xeb, 0xc1, 0x04, 0xd9, 0x50, 0xf6, 0x13, 0xe2, 0x31,
	0x32, 0xb1, 0xf5, 0x96, 0xd6, 0x2e, 0x60, 0x05, 0x91, 0x05, 0xc6, 0x05, 0xb9, 0xb6, 0x0d, 0x4e,
	0x4d, 0xff, 0xa2, 0x06, 0x6c, 0x4e, 0x63, 0xca, 0x22, 0x6f, 0x46, 0xec, 0x02, 0x37, 0x2f, 0xb1,
	0xf3, 0xbb, 0x06, 0x85, 0xb1, 0x47, 0x2f, 0xd2, 0x03, 0x29, 0x49, 0x2e, 0x03, 0x9f, 0xc8, 0x5b,
	0x14, 0x44, 0x08, 0x0a, 0xcc, 0x3b, 0xa7, 0xb6, 0xde, 0x32, 0xda, 0x15, 0xcc, 0xff, 0xa3, 0x2f,
	0x60, 0x73, 0x9e, 0xc4, 0x67, 0x41, 0x48, 0xa8, 0x6d, 0xb4, 0x8c, 0xb6, 0xd9, 0x79, 0xec, 0x66,
	0x34, 0xb9, 0xe9, 0x91, 0xee, 0xb1, 0x60, 0xe0, 0x25, 0xb5, 0x71, 0x0e, 0x65, 0x69, 0xbc, 0x23,
	0x68, 0x0b, 0x4a, 0xa1, 0x77, 0x4a, 0x42, 0x75, 0x8f, 0x44, 0x68, 0x27, 0xbd, 0x9d, 0x5e, 0x70,
	0x3d, 0x66, 0xa7, 0xc5, 0x6f, 0x59, 0x06, 0x8b, 0xdf, 0xd3, 0x8d, 0xa3, 0xb3, 0xe0, 0x7c, 0x91,
	0x78, 0x2c, 0x88, 0x23, 0xcc, 0xd9, 0xce, 0x0c, 0x6a, 0xaf, 0x48, 0x42, 0x83, 0x38, 0x22, 0x93,
	0x94, 0x43, 0xd1, 0x27, 0x50, 0x4c, 0x57, 0xa8, 0xad, 0x71, 0x77, 0x3f, 0xb8, 0xe3, 0x2e, 0x16,
	0xeb, 0x69, 0x20, 0x2e, 0xc5, 0x56, 0x1e, 0xd9, 0x0a, 0x56, 0x30, 0x1b, 0x73, 0x23, 0x17, 0x73,
	0xc7, 0x85, 0xd2, 0x61, 0x30, 0x0b, 0x18, 0x45, 0x1f, 0xc3, 0x83, 0x59, 0x1c, 0xb1, 0x69, 0x78,
	0xdd, 0x4d, 0xc8, 0x24, 0x60, 0x5c, 0x61, 0x01, 0xe7, 0x8d, 0xce, 0x4f, 0x06, 0x94, 0x0f, 0xc5,
	0xdd, 0x68, 0x1b, 0x4a, 0x21, 0xdf, 0xcb, 0xa9, 0x66, 0xe7, 0x51, 0xce, 0x33, 0x71, 0x2c, 0x96,
	0x14, 0xe4, 0x42, 0xd9, 0x17, 0x15, 0xc1, 0x9d, 0x33, 0x3b, 0xf5, 0x1c, 0x5b, 0x56, 0x0b, 0x56,
	0x24, 0xf4, 0xb9, 0x52, 0x5d, 0xe0, 0xec, 0x0f, 0x73, 0xec, 0x7c, 0x84, 0x94, 0xfe, 0x21, 0x54,
	0x7d, 0x6f, 0xee, 0x9d, 0x06, 0x61, 0xc0, 0x02, 0x42, 0xed, 0x72, 0xcb, 0x68, 0xd7, 0x3a, 0xdb,
	0xb7, 0xee, 0x09, 0x48, 0xc4, 0xdc, 0x6e, 0x86, 0xb7, 0x02, 0xd7, 0x38, 0x77, 0x00, 0x3a, 0x86,
	0x6a, 0x42, 0xde, 0x2c, 0x82, 0x84, 0xcc, 0x48, 0xc4, 0xa8, 0xbd, 0xc9, 0x0f, 0x7c, 0xb2, 0xee,
	0x40, 0x9c, 0xe1, 0x65, 0x01, 0xce, 0x9d, 0x80, 0x9a, 0x00, 0xfe, 0x82, 0xb2, 0x78, 0x46, 0x92,
	0xfe, 0xc4, 0x7e, 0xc0, 0xb3, 0x94, 0xb1, 0x64, 0x13, 0x55, 0xcb, 0x37, 0xc7, 0x16, 0x94, 0xc8,
	0xd5, 0x3c, 0x48, 0x88, 0xfd, 0x90, 0x2f, 0x48, 0xe4, 0xfc, 0xa6, 0x83, 0x29, 0x13, 0xd2, 0x8f,
	0xce, 0x62, 0xb4, 0x03, 0x45, 0xca, 0x3c, 0x26, 0x7a, 0xa1, 0xd6, 0x69, 0xde, 0xca, 0xc9, 0x92,
	0xe8, 0x8e, 0x52, 0x16, 0x16, 0xe4, 0xff, 0x9c, 0x9d, 0x55, 0xea, 0x8d, 0xfb, 0x53, 0x9f, 0x17,
	0x5d, 0xb8, 0x23, 0xda, 0x81, 0x2a, 0x4f, 0xa0, 0xcc, 0xaa, 0x0d, 0x9c, 0x91, 0xb3, 0xfd, 0x8f,
	0xc0, 0xec, 0x42, 0x91, 0x4b, 0x44, 0x26, 0x94, 0x5f, 0x0e, 0x0e, 0x06, 0xc3, 0xd7, 0x03, 0x6b,
	0x23, 0x05, 0xaf, 0xf7, 0xfa, 0xe3, 0xfe, 0xe0, 0x5b, 0x4b, 0x43, 0x00, 0xa5, 0xbd, 0xee, 0xb8,
	0xff, 0xaa, 0x67, 0xe9, 0xe9, 0x42, 0xef, 0xbb, 0xe3, 0x3e, 0xee, 0xed, 0x5b, 0x86, 0xf3, 0x57,
	0x01, 0x4a, 0x22, 0xb1, 0xe8, 0x23, 0xa8, 0x48, 0xd1, 0x7d, 0xd5, 0xf4, 0x2b, 0xc3, 0x2d, 0x69,
	0xfa, 0x1d, 0x69, 0x75, 0x28, 0xf2, 0x69, 0x20, 0x87, 0x9a, 0x00, 0xa8, 0x05, 0xe6, 0x9c, 0x24,
	0xb3, 0x80, 0xa6, 0xd2, 0xd2, 0x0a, 0x4f, 0xc7, 0x46, 0xd6, 0x94, 0xee, 0x13, 0xd5, 0x5f, 0x14,
	0xfb, 0x44, 0x81, 0xaf, 0xa2, 0x5e, 0xba, 0x3f, 0xea, 0xef, 0x41, 0x37, 0x3c, 0x81, 0x62, 0xfc,
	0x43, 0x44, 0x12, 0x9e, 0x71, 0xb3, 0xb3, 0x95, 0x3f, 0x6a, 0xea, 0x85, 0x21, 0x89, 0xce, 0x09,
	0x16, 0xa4, 0xec, 0x78, 0x33, 0x45, 0x09, 0xa8, 0xf1, 0xe6, 0x02, 0x9a, 0x79, 0x57, 0xb2, 0xb8,
	0xf7, 0xe5, 0x3c, 0x95, 0xe5, 0xb0, 0x66, 0x25, 0x53, 0x32, 0x56, 0xb6, 0x64, 0x1a, 0x5f, 0x41,
	0x35, 0x1b, 0x0a, 0x67, 0x1b, 0x60, 0x15, 0x8d, 0xb4, 0x42, 0x06, 0xc3, 0xf1, 0xc9, 0xa8, 0x37,
	0xb6, 0x36, 0x90, 0x05, 0xd5, 0xee, 0xcb, 0xd1, 0x78, 0x78, 0x74, 0x32, 0xde, 0x1b, 0x1d, 0x8c,
	0x2c, 0xad, 0xb1, 0x0f, 0xd5, 0xac, 0x6c, 0x67, 0x07, 0xcc, 0x0c, 0xce, 0xef, 0xb6, 0xa1, 0x7e,
	0xd4, 0x1b, 0x0d, 0x47, 0x27, 0x2f, 0x86, 0xa3, 0xf1, 0x60, 0xef, 0xa8, 0x77, 0xd2, 0x7d, 0xd1,
	0xeb, 0x1e, 0x58, 0x9a, 0x33, 0x87, 0xca, 0x52, 0x78, 0xb6, 0x2b, 0xb5, 0x77, 0xe9, 0xca, 0x67,
	0x50, 0xf2, 0xc5, 0xec, 0xd6, 0xd7, 0x0c, 0x4d, 0x31, 0xc1, 0x47, 0x91, 0x37, 0xa7, 0xd3, 0x98,
	0x61, 0x49, 0x75, 0xbe, 0x06, 0x53, 0x64, 0x8d, 0x1e, 0x06, 0x94, 0xa1, 0x4f, 0xd3, 0x3b, 0x39,
	0x94, 0xef, 0xcd, 0xa3, 0x35, 0x09, 0xc6, 0x8a, 0xe3, 0x6c, 0xc3, 0x43, 0x19, 0x5d, 0x4c, 0xe8,
	0x3c, 0x4e, 0x9f, 0x05, 0x1b, 0xca, 0x92, 0xad, 0xde, 0x63, 0x09, 0x9d, 0xcf, 0xc0, 0x5a, 0x65,
	0x95, 0xbc, 0x59, 0x10, 0x2a, 0xfa, 0x4b, 0xd9, 0x96, 0xfd, 0xa5, 0x0c, 0xce, 0x00, 0xea, 0x2a,
	0x79, 0xc4, 0x8f, 0x27, 0xef, 0xb6, 0x2b, 0xeb, 0x81, 0x9e, 0xf7, 0xe0, 0xad, 0x06, 0xb5, 0x7c,
	0x1c, 0xee, 0x69, 0xf0, 0xe7, 0x7c, 0xee, 0x4c, 0xd2, 0x9e, 0xd3, 0x79, 0x38, 0xda, 0xff, 0x12,
	0x53, 0x09, 0x69, 0x2f, 0x62, 0xc9, 0x35, 0x56, 0x1b, 0xff, 0xf9, 0xf5, 0x6d, 0xec, 0x42, 0x35,
	0xbb, 0x45, 0x7d, 0x01, 0x89, 0x97, 0x97, 0x7f, 0x01, 0xd5, 0xa1, 0x78, 0xe9, 0x85, 0x0b, 0x22,
	0xbf, 0x95, 0x04, 0xd8, 0xd5, 0xbf, 0xd4, 0x9e, 0x7f, 0xf3, 0xf6, 0xa6, 0xa9, 0xfd, 0x7a, 0xd3,
	0xd4, 0xfe, 0xb8, 0x69, 0x6a, 0x3f, 0xff, 0xd9, 0xdc, 0x80, 0xba, 0xff, 0x23, 0x77, 0x8e, 0x7f,
	0x82, 0x29, 0x17, 0xbf, 0x57, 0xda, 0x7f, 0xd1, 0xd7, 0xae, 0x9f, 0x96, 0x38, 0x7c, 0xf6, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xea, 0xb4, 0x39, 0x83, 0xf5, 0x09, 0x00, 0x00,
}
