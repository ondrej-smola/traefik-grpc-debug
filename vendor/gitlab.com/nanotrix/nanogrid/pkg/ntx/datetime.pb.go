// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ntx/datetime.proto

/*
	Package ntx is a generated protocol buffer package.

	It is generated from these files:
		ntx/datetime.proto
		ntx/empty.proto
		ntx/error.proto
		ntx/healthcheck.proto

	It has these top-level messages:
		TimeOffsetFraction
		DateTimeNanos
		DateTimeAny
		DurationString
		DurationNanos
		DurationAny
		Empty
		Error
		HealthCheckRequest
		HealthCheckResponse
*/
package ntx

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// to ticks convert as seconds*10000000+ticks
type TimeOffsetFraction struct {
	Seconds uint64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Ticks   uint32 `protobuf:"varint,2,opt,name=ticks,proto3" json:"ticks,omitempty"`
}

func (m *TimeOffsetFraction) Reset()                    { *m = TimeOffsetFraction{} }
func (m *TimeOffsetFraction) String() string            { return proto.CompactTextString(m) }
func (*TimeOffsetFraction) ProtoMessage()               {}
func (*TimeOffsetFraction) Descriptor() ([]byte, []int) { return fileDescriptorDatetime, []int{0} }

func (m *TimeOffsetFraction) GetSeconds() uint64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *TimeOffsetFraction) GetTicks() uint32 {
	if m != nil {
		return m.Ticks
	}
	return 0
}

type DateTimeNanos struct {
	DateTime uint64 `protobuf:"varint,1,opt,name=dateTime,proto3" json:"dateTime,omitempty"`
}

func (m *DateTimeNanos) Reset()                    { *m = DateTimeNanos{} }
func (m *DateTimeNanos) String() string            { return proto.CompactTextString(m) }
func (*DateTimeNanos) ProtoMessage()               {}
func (*DateTimeNanos) Descriptor() ([]byte, []int) { return fileDescriptorDatetime, []int{1} }

func (m *DateTimeNanos) GetDateTime() uint64 {
	if m != nil {
		return m.DateTime
	}
	return 0
}

type DateTimeAny struct {
	// Types that are valid to be assigned to Datetimes:
	//	*DateTimeAny_Nanos
	Datetimes isDateTimeAny_Datetimes `protobuf_oneof:"datetimes"`
}

func (m *DateTimeAny) Reset()                    { *m = DateTimeAny{} }
func (m *DateTimeAny) String() string            { return proto.CompactTextString(m) }
func (*DateTimeAny) ProtoMessage()               {}
func (*DateTimeAny) Descriptor() ([]byte, []int) { return fileDescriptorDatetime, []int{2} }

type isDateTimeAny_Datetimes interface {
	isDateTimeAny_Datetimes()
	MarshalTo([]byte) (int, error)
	Size() int
}

type DateTimeAny_Nanos struct {
	Nanos *DateTimeNanos `protobuf:"bytes,1,opt,name=nanos,oneof"`
}

func (*DateTimeAny_Nanos) isDateTimeAny_Datetimes() {}

func (m *DateTimeAny) GetDatetimes() isDateTimeAny_Datetimes {
	if m != nil {
		return m.Datetimes
	}
	return nil
}

func (m *DateTimeAny) GetNanos() *DateTimeNanos {
	if x, ok := m.GetDatetimes().(*DateTimeAny_Nanos); ok {
		return x.Nanos
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DateTimeAny) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DateTimeAny_OneofMarshaler, _DateTimeAny_OneofUnmarshaler, _DateTimeAny_OneofSizer, []interface{}{
		(*DateTimeAny_Nanos)(nil),
	}
}

func _DateTimeAny_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DateTimeAny)
	// datetimes
	switch x := m.Datetimes.(type) {
	case *DateTimeAny_Nanos:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nanos); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DateTimeAny.Datetimes has unexpected type %T", x)
	}
	return nil
}

func _DateTimeAny_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DateTimeAny)
	switch tag {
	case 1: // datetimes.nanos
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DateTimeNanos)
		err := b.DecodeMessage(msg)
		m.Datetimes = &DateTimeAny_Nanos{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DateTimeAny_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DateTimeAny)
	// datetimes
	switch x := m.Datetimes.(type) {
	case *DateTimeAny_Nanos:
		s := proto.Size(x.Nanos)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type DurationString struct {
	Duration string `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *DurationString) Reset()                    { *m = DurationString{} }
func (m *DurationString) String() string            { return proto.CompactTextString(m) }
func (*DurationString) ProtoMessage()               {}
func (*DurationString) Descriptor() ([]byte, []int) { return fileDescriptorDatetime, []int{3} }

func (m *DurationString) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

type DurationNanos struct {
	Duration uint64 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *DurationNanos) Reset()                    { *m = DurationNanos{} }
func (m *DurationNanos) String() string            { return proto.CompactTextString(m) }
func (*DurationNanos) ProtoMessage()               {}
func (*DurationNanos) Descriptor() ([]byte, []int) { return fileDescriptorDatetime, []int{4} }

func (m *DurationNanos) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type DurationAny struct {
	// Types that are valid to be assigned to Durations:
	//	*DurationAny_Nanos
	//	*DurationAny_Iso
	Durations isDurationAny_Durations `protobuf_oneof:"durations"`
}

func (m *DurationAny) Reset()                    { *m = DurationAny{} }
func (m *DurationAny) String() string            { return proto.CompactTextString(m) }
func (*DurationAny) ProtoMessage()               {}
func (*DurationAny) Descriptor() ([]byte, []int) { return fileDescriptorDatetime, []int{5} }

type isDurationAny_Durations interface {
	isDurationAny_Durations()
	MarshalTo([]byte) (int, error)
	Size() int
}

type DurationAny_Nanos struct {
	Nanos *DurationNanos `protobuf:"bytes,1,opt,name=nanos,oneof"`
}
type DurationAny_Iso struct {
	Iso *DurationString `protobuf:"bytes,2,opt,name=iso,oneof"`
}

func (*DurationAny_Nanos) isDurationAny_Durations() {}
func (*DurationAny_Iso) isDurationAny_Durations()   {}

func (m *DurationAny) GetDurations() isDurationAny_Durations {
	if m != nil {
		return m.Durations
	}
	return nil
}

func (m *DurationAny) GetNanos() *DurationNanos {
	if x, ok := m.GetDurations().(*DurationAny_Nanos); ok {
		return x.Nanos
	}
	return nil
}

func (m *DurationAny) GetIso() *DurationString {
	if x, ok := m.GetDurations().(*DurationAny_Iso); ok {
		return x.Iso
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DurationAny) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DurationAny_OneofMarshaler, _DurationAny_OneofUnmarshaler, _DurationAny_OneofSizer, []interface{}{
		(*DurationAny_Nanos)(nil),
		(*DurationAny_Iso)(nil),
	}
}

func _DurationAny_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DurationAny)
	// durations
	switch x := m.Durations.(type) {
	case *DurationAny_Nanos:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nanos); err != nil {
			return err
		}
	case *DurationAny_Iso:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Iso); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DurationAny.Durations has unexpected type %T", x)
	}
	return nil
}

func _DurationAny_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DurationAny)
	switch tag {
	case 1: // durations.nanos
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DurationNanos)
		err := b.DecodeMessage(msg)
		m.Durations = &DurationAny_Nanos{msg}
		return true, err
	case 2: // durations.iso
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DurationString)
		err := b.DecodeMessage(msg)
		m.Durations = &DurationAny_Iso{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DurationAny_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DurationAny)
	// durations
	switch x := m.Durations.(type) {
	case *DurationAny_Nanos:
		s := proto.Size(x.Nanos)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DurationAny_Iso:
		s := proto.Size(x.Iso)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*TimeOffsetFraction)(nil), "ntx.TimeOffsetFraction")
	proto.RegisterType((*DateTimeNanos)(nil), "ntx.DateTimeNanos")
	proto.RegisterType((*DateTimeAny)(nil), "ntx.DateTimeAny")
	proto.RegisterType((*DurationString)(nil), "ntx.DurationString")
	proto.RegisterType((*DurationNanos)(nil), "ntx.DurationNanos")
	proto.RegisterType((*DurationAny)(nil), "ntx.DurationAny")
}
func (m *TimeOffsetFraction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeOffsetFraction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seconds != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDatetime(dAtA, i, uint64(m.Seconds))
	}
	if m.Ticks != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDatetime(dAtA, i, uint64(m.Ticks))
	}
	return i, nil
}

func (m *DateTimeNanos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DateTimeNanos) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DateTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDatetime(dAtA, i, uint64(m.DateTime))
	}
	return i, nil
}

func (m *DateTimeAny) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DateTimeAny) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Datetimes != nil {
		nn1, err := m.Datetimes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *DateTimeAny_Nanos) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Nanos != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDatetime(dAtA, i, uint64(m.Nanos.Size()))
		n2, err := m.Nanos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *DurationString) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DurationString) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Duration) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDatetime(dAtA, i, uint64(len(m.Duration)))
		i += copy(dAtA[i:], m.Duration)
	}
	return i, nil
}

func (m *DurationNanos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DurationNanos) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDatetime(dAtA, i, uint64(m.Duration))
	}
	return i, nil
}

func (m *DurationAny) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DurationAny) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Durations != nil {
		nn3, err := m.Durations.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *DurationAny_Nanos) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Nanos != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDatetime(dAtA, i, uint64(m.Nanos.Size()))
		n4, err := m.Nanos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *DurationAny_Iso) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Iso != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDatetime(dAtA, i, uint64(m.Iso.Size()))
		n5, err := m.Iso.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func encodeFixed64Datetime(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Datetime(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDatetime(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TimeOffsetFraction) Size() (n int) {
	var l int
	_ = l
	if m.Seconds != 0 {
		n += 1 + sovDatetime(uint64(m.Seconds))
	}
	if m.Ticks != 0 {
		n += 1 + sovDatetime(uint64(m.Ticks))
	}
	return n
}

func (m *DateTimeNanos) Size() (n int) {
	var l int
	_ = l
	if m.DateTime != 0 {
		n += 1 + sovDatetime(uint64(m.DateTime))
	}
	return n
}

func (m *DateTimeAny) Size() (n int) {
	var l int
	_ = l
	if m.Datetimes != nil {
		n += m.Datetimes.Size()
	}
	return n
}

func (m *DateTimeAny_Nanos) Size() (n int) {
	var l int
	_ = l
	if m.Nanos != nil {
		l = m.Nanos.Size()
		n += 1 + l + sovDatetime(uint64(l))
	}
	return n
}
func (m *DurationString) Size() (n int) {
	var l int
	_ = l
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovDatetime(uint64(l))
	}
	return n
}

func (m *DurationNanos) Size() (n int) {
	var l int
	_ = l
	if m.Duration != 0 {
		n += 1 + sovDatetime(uint64(m.Duration))
	}
	return n
}

func (m *DurationAny) Size() (n int) {
	var l int
	_ = l
	if m.Durations != nil {
		n += m.Durations.Size()
	}
	return n
}

func (m *DurationAny_Nanos) Size() (n int) {
	var l int
	_ = l
	if m.Nanos != nil {
		l = m.Nanos.Size()
		n += 1 + l + sovDatetime(uint64(l))
	}
	return n
}
func (m *DurationAny_Iso) Size() (n int) {
	var l int
	_ = l
	if m.Iso != nil {
		l = m.Iso.Size()
		n += 1 + l + sovDatetime(uint64(l))
	}
	return n
}

func sovDatetime(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDatetime(x uint64) (n int) {
	return sovDatetime(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TimeOffsetFraction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatetime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeOffsetFraction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeOffsetFraction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatetime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticks", wireType)
			}
			m.Ticks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatetime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ticks |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDatetime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatetime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DateTimeNanos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatetime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DateTimeNanos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DateTimeNanos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateTime", wireType)
			}
			m.DateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatetime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DateTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDatetime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatetime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DateTimeAny) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatetime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DateTimeAny: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DateTimeAny: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nanos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatetime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatetime
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DateTimeNanos{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Datetimes = &DateTimeAny_Nanos{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatetime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatetime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DurationString) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatetime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DurationString: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DurationString: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatetime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatetime
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatetime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatetime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DurationNanos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatetime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DurationNanos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DurationNanos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatetime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDatetime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatetime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DurationAny) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatetime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DurationAny: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DurationAny: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nanos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatetime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatetime
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DurationNanos{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Durations = &DurationAny_Nanos{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iso", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatetime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatetime
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DurationString{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Durations = &DurationAny_Iso{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatetime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDatetime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDatetime(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDatetime
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDatetime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDatetime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDatetime
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDatetime
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDatetime(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDatetime = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDatetime   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ntx/datetime.proto", fileDescriptorDatetime) }

var fileDescriptorDatetime = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xca, 0x2b, 0xa9, 0xd0,
	0x4f, 0x49, 0x2c, 0x49, 0x2d, 0xc9, 0xcc, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0xce, 0x2b, 0xa9, 0x50, 0x72, 0xe1, 0x12, 0x0a, 0xc9, 0xcc, 0x4d, 0xf5, 0x4f, 0x4b, 0x2b, 0x4e,
	0x2d, 0x71, 0x2b, 0x4a, 0x4c, 0x2e, 0xc9, 0xcc, 0xcf, 0x13, 0x92, 0xe0, 0x62, 0x2f, 0x4e, 0x4d,
	0xce, 0xcf, 0x4b, 0x29, 0x96, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x09, 0x82, 0x71, 0x85, 0x44, 0xb8,
	0x58, 0x4b, 0x32, 0x93, 0xb3, 0x8b, 0x25, 0x98, 0x14, 0x18, 0x35, 0x78, 0x83, 0x20, 0x1c, 0x25,
	0x6d, 0x2e, 0x5e, 0x97, 0xc4, 0x92, 0x54, 0x90, 0x49, 0x7e, 0x89, 0x79, 0xf9, 0xc5, 0x42, 0x52,
	0x5c, 0x1c, 0x29, 0x50, 0x01, 0xa8, 0x09, 0x70, 0xbe, 0x92, 0x1b, 0x17, 0x37, 0x4c, 0xb1, 0x63,
	0x5e, 0xa5, 0x90, 0x16, 0x17, 0x6b, 0x1e, 0x48, 0x0f, 0x58, 0x1d, 0xb7, 0x91, 0x90, 0x5e, 0x5e,
	0x49, 0x85, 0x1e, 0x8a, 0x69, 0x1e, 0x0c, 0x41, 0x10, 0x25, 0x4e, 0xdc, 0x5c, 0x9c, 0x30, 0x4f,
	0x14, 0x2b, 0xe9, 0x70, 0xf1, 0xb9, 0x94, 0x16, 0x25, 0x82, 0x1c, 0x1c, 0x5c, 0x52, 0x94, 0x99,
	0x97, 0x0e, 0xb6, 0x15, 0x2a, 0x02, 0x36, 0x8d, 0x33, 0x08, 0xce, 0x07, 0x3b, 0x11, 0xca, 0x46,
	0x38, 0x11, 0x59, 0x31, 0x0b, 0x92, 0xe2, 0x7c, 0x2e, 0x6e, 0x98, 0x62, 0xdc, 0x4e, 0x44, 0x36,
	0x0d, 0xee, 0x44, 0x21, 0x75, 0x2e, 0xe6, 0xcc, 0xe2, 0x7c, 0x70, 0xf0, 0x70, 0x1b, 0x09, 0xa3,
	0xa8, 0x84, 0xb8, 0xd2, 0x83, 0x21, 0x08, 0xa4, 0x02, 0xec, 0x17, 0xa8, 0x44, 0xb1, 0x93, 0xfc,
	0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3, 0xb1, 0x1c,
	0xc3, 0x2a, 0x26, 0x9e, 0xe4, 0x2a, 0xb0, 0x6e, 0x70, 0x64, 0x25, 0xb1, 0x81, 0x29, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xfc, 0x36, 0x73, 0xc9, 0x01, 0x00, 0x00,
}
