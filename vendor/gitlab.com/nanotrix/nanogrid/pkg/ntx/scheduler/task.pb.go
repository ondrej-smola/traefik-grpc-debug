// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ntx/scheduler/task.proto

/*
	Package scheduler is a generated protocol buffer package.

	It is generated from these files:
		ntx/scheduler/task.proto

	It has these top-level messages:
		TaskConfiguration
		TaskSnapshot
*/
package scheduler

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskState int32

const (
	TaskState_WAITING  TaskState = 0
	TaskState_STARTING TaskState = 1
	TaskState_RUNNING  TaskState = 2
	TaskState_FINISHED TaskState = 3
	TaskState_FAILED   TaskState = 4
	TaskState_KILLED   TaskState = 5
)

var TaskState_name = map[int32]string{
	0: "WAITING",
	1: "STARTING",
	2: "RUNNING",
	3: "FINISHED",
	4: "FAILED",
	5: "KILLED",
}
var TaskState_value = map[string]int32{
	"WAITING":  0,
	"STARTING": 1,
	"RUNNING":  2,
	"FINISHED": 3,
	"FAILED":   4,
	"KILLED":   5,
}

func (x TaskState) String() string {
	return proto.EnumName(TaskState_name, int32(x))
}
func (TaskState) EnumDescriptor() ([]byte, []int) { return fileDescriptorTask, []int{0} }

type TaskConfiguration struct {
	Image string            `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Cpus  float64           `protobuf:"fixed64,2,opt,name=cpus,proto3" json:"cpus,omitempty"`
	Mem   float64           `protobuf:"fixed64,3,opt,name=mem,proto3" json:"mem,omitempty"`
	Cmd   string            `protobuf:"bytes,4,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Args  []string          `protobuf:"bytes,5,rep,name=args" json:"args,omitempty"`
	Port  uint32            `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	Env   map[string]string `protobuf:"bytes,7,rep,name=env" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *TaskConfiguration) Reset()                    { *m = TaskConfiguration{} }
func (m *TaskConfiguration) String() string            { return proto.CompactTextString(m) }
func (*TaskConfiguration) ProtoMessage()               {}
func (*TaskConfiguration) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{0} }

func (m *TaskConfiguration) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *TaskConfiguration) GetCpus() float64 {
	if m != nil {
		return m.Cpus
	}
	return 0
}

func (m *TaskConfiguration) GetMem() float64 {
	if m != nil {
		return m.Mem
	}
	return 0
}

func (m *TaskConfiguration) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *TaskConfiguration) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *TaskConfiguration) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *TaskConfiguration) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

type TaskSnapshot struct {
	Id       string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Endpoint string             `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Owner    string             `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	State    TaskState          `protobuf:"varint,5,opt,name=state,proto3,enum=ntx.scheduler.TaskState" json:"state,omitempty"`
	Config   *TaskConfiguration `protobuf:"bytes,6,opt,name=config" json:"config,omitempty"`
	Created  uint64             `protobuf:"varint,7,opt,name=created,proto3" json:"created,omitempty"`
	Expire   uint64             `protobuf:"varint,8,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (m *TaskSnapshot) Reset()                    { *m = TaskSnapshot{} }
func (m *TaskSnapshot) String() string            { return proto.CompactTextString(m) }
func (*TaskSnapshot) ProtoMessage()               {}
func (*TaskSnapshot) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{1} }

func (m *TaskSnapshot) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TaskSnapshot) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *TaskSnapshot) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *TaskSnapshot) GetState() TaskState {
	if m != nil {
		return m.State
	}
	return TaskState_WAITING
}

func (m *TaskSnapshot) GetConfig() *TaskConfiguration {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *TaskSnapshot) GetCreated() uint64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *TaskSnapshot) GetExpire() uint64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func init() {
	proto.RegisterType((*TaskConfiguration)(nil), "ntx.scheduler.TaskConfiguration")
	proto.RegisterType((*TaskSnapshot)(nil), "ntx.scheduler.TaskSnapshot")
	proto.RegisterEnum("ntx.scheduler.TaskState", TaskState_name, TaskState_value)
}
func (m *TaskConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Image) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.Cpus != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Task(dAtA, i, uint64(math.Float64bits(float64(m.Cpus))))
	}
	if m.Mem != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64Task(dAtA, i, uint64(math.Float64bits(float64(m.Mem))))
	}
	if len(m.Cmd) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Cmd)))
		i += copy(dAtA[i:], m.Cmd)
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Port != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Port))
	}
	if len(m.Env) > 0 {
		for k, _ := range m.Env {
			dAtA[i] = 0x3a
			i++
			v := m.Env[k]
			mapSize := 1 + len(k) + sovTask(uint64(len(k))) + 1 + len(v) + sovTask(uint64(len(v)))
			i = encodeVarintTask(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTask(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTask(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *TaskSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskSnapshot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Endpoint) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Endpoint)))
		i += copy(dAtA[i:], m.Endpoint)
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	if m.State != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.State))
	}
	if m.Config != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Config.Size()))
		n1, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Created != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Created))
	}
	if m.Expire != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Expire))
	}
	return i, nil
}

func encodeFixed64Task(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Task(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TaskConfiguration) Size() (n int) {
	var l int
	_ = l
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Cpus != 0 {
		n += 9
	}
	if m.Mem != 0 {
		n += 9
	}
	l = len(m.Cmd)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if m.Port != 0 {
		n += 1 + sovTask(uint64(m.Port))
	}
	if len(m.Env) > 0 {
		for k, v := range m.Env {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTask(uint64(len(k))) + 1 + len(v) + sovTask(uint64(len(v)))
			n += mapEntrySize + 1 + sovTask(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TaskSnapshot) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovTask(uint64(m.State))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Created != 0 {
		n += 1 + sovTask(uint64(m.Created))
	}
	if m.Expire != 0 {
		n += 1 + sovTask(uint64(m.Expire))
	}
	return n
}

func sovTask(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpus", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Cpus = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mem", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Mem = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthTask
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Env == nil {
				m.Env = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthTask
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Env[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Env[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (TaskState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &TaskConfiguration{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTask
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTask(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTask = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ntx/scheduler/task.proto", fileDescriptorTask) }

var fileDescriptorTask = []byte{
	// 451 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4d, 0x6e, 0xd3, 0x40,
	0x18, 0xed, 0xd8, 0xb1, 0x13, 0x7f, 0x69, 0xab, 0x30, 0x42, 0xd5, 0xa8, 0x8b, 0xc8, 0xea, 0xca,
	0xb0, 0x70, 0xa5, 0x20, 0xa1, 0x0a, 0x56, 0x81, 0xa6, 0x60, 0x11, 0x65, 0x31, 0x09, 0x42, 0xb0,
	0x1b, 0xec, 0x21, 0xb5, 0xd2, 0x8c, 0xad, 0xf1, 0x24, 0xa4, 0x9c, 0x84, 0x33, 0x70, 0x12, 0x96,
	0x1c, 0x01, 0x85, 0x2d, 0x67, 0x40, 0xe8, 0x9b, 0x38, 0x46, 0x08, 0x10, 0xbb, 0xf7, 0xf3, 0xbd,
	0xc9, 0x7b, 0x91, 0x81, 0x29, 0xb3, 0x39, 0xaf, 0xd2, 0x6b, 0x99, 0xad, 0x6e, 0xa4, 0x3e, 0x37,
	0xa2, 0x5a, 0xc4, 0xa5, 0x2e, 0x4c, 0x41, 0x8f, 0x94, 0xd9, 0xc4, 0x8d, 0x73, 0xf6, 0x83, 0xc0,
	0x9d, 0x99, 0xa8, 0x16, 0x4f, 0x0b, 0xf5, 0x2e, 0x9f, 0xaf, 0xb4, 0x30, 0x79, 0xa1, 0xe8, 0x5d,
	0xf0, 0xf2, 0xa5, 0x98, 0x4b, 0x46, 0x42, 0x12, 0x05, 0x7c, 0x47, 0x28, 0x85, 0x56, 0x5a, 0xae,
	0x2a, 0xe6, 0x84, 0x24, 0x22, 0xdc, 0x62, 0xda, 0x03, 0x77, 0x29, 0x97, 0xcc, 0xb5, 0x12, 0x42,
	0x54, 0xd2, 0x65, 0xc6, 0x5a, 0x36, 0x89, 0x10, 0x73, 0x42, 0xcf, 0x2b, 0xe6, 0x85, 0x6e, 0x14,
	0x70, 0x8b, 0x51, 0x2b, 0x0b, 0x6d, 0x98, 0x1f, 0x92, 0xe8, 0x88, 0x5b, 0x4c, 0x1f, 0x83, 0x2b,
	0xd5, 0x9a, 0xb5, 0x43, 0x37, 0xea, 0x0e, 0xee, 0xc5, 0xbf, 0x15, 0x8d, 0xff, 0x28, 0x19, 0x8f,
	0xd4, 0x7a, 0xa4, 0x8c, 0xbe, 0xe5, 0x98, 0x3a, 0x7d, 0x08, 0x9d, 0xbd, 0x80, 0x15, 0x16, 0xf2,
	0xb6, 0x2e, 0x8f, 0x10, 0x07, 0xad, 0xc5, 0xcd, 0x4a, 0xda, 0xee, 0x01, 0xdf, 0x91, 0x47, 0xce,
	0x05, 0x39, 0xfb, 0x4e, 0xe0, 0x10, 0xdf, 0x9e, 0x2a, 0x51, 0x56, 0xd7, 0x85, 0xa1, 0xc7, 0xe0,
	0xe4, 0x59, 0x9d, 0x75, 0xf2, 0x8c, 0x9e, 0x42, 0x47, 0xaa, 0xac, 0x2c, 0x72, 0x65, 0xea, 0x74,
	0xc3, 0xf1, 0xd9, 0xe2, 0xbd, 0x92, 0xba, 0x5e, 0xbb, 0x23, 0x34, 0x06, 0xaf, 0x32, 0xc2, 0x48,
	0xe6, 0x85, 0x24, 0x3a, 0x1e, 0xb0, 0xbf, 0x2c, 0x99, 0xa2, 0xcf, 0x77, 0x67, 0xf4, 0x02, 0xfc,
	0xd4, 0x2e, 0xb3, 0xff, 0x46, 0x77, 0x10, 0xfe, 0x6f, 0x3a, 0xaf, 0xef, 0x29, 0x83, 0x76, 0xaa,
	0xa5, 0x30, 0x32, 0x63, 0xed, 0x90, 0x44, 0x2d, 0xbe, 0xa7, 0xf4, 0x04, 0x7c, 0xb9, 0x29, 0x73,
	0x2d, 0x59, 0xc7, 0x1a, 0x35, 0xbb, 0xff, 0x1a, 0x82, 0xe6, 0xf7, 0x69, 0x17, 0xda, 0xaf, 0x86,
	0xc9, 0x2c, 0x99, 0x3c, 0xeb, 0x1d, 0xd0, 0x43, 0xe8, 0x4c, 0x67, 0x43, 0x6e, 0x19, 0x41, 0x8b,
	0xbf, 0x9c, 0x4c, 0x90, 0x38, 0x68, 0x5d, 0x25, 0x93, 0x64, 0xfa, 0x7c, 0x74, 0xd9, 0x73, 0x29,
	0x80, 0x7f, 0x35, 0x4c, 0xc6, 0xa3, 0xcb, 0x5e, 0x0b, 0xf1, 0x8b, 0x64, 0x8c, 0xd8, 0x7b, 0x32,
	0xfe, 0xbc, 0xed, 0x93, 0x2f, 0xdb, 0x3e, 0xf9, 0xba, 0xed, 0x93, 0x8f, 0xdf, 0xfa, 0x07, 0x70,
	0x92, 0x7e, 0xb0, 0x53, 0xec, 0x97, 0xf7, 0x6b, 0xd0, 0x9b, 0xa0, 0x81, 0x9f, 0x9c, 0x7f, 0xdc,
	0xbc, 0xf5, 0xad, 0xf0, 0xe0, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x80, 0xc9, 0x6d, 0xca,
	0x02, 0x00, 0x00,
}
