// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ntx/scheduler/cache/shared/shared.proto

/*
	Package shared is a generated protocol buffer package.

	It is generated from these files:
		ntx/scheduler/cache/shared/shared.proto

	It has these top-level messages:
		Tasks
		TaskRequest
		TaskResponse
*/
package shared

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import ntx_scheduler "gitlab.com/nanotrix/nanogrid/pkg/ntx/scheduler"
import ntx "gitlab.com/nanotrix/nanogrid/pkg/ntx"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Tasks struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *Tasks) Reset()                    { *m = Tasks{} }
func (m *Tasks) String() string            { return proto.CompactTextString(m) }
func (*Tasks) ProtoMessage()               {}
func (*Tasks) Descriptor() ([]byte, []int) { return fileDescriptorShared, []int{0} }

func (m *Tasks) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type TaskRequest struct {
	Config *ntx_scheduler.TaskConfiguration `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	Evict  bool                             `protobuf:"varint,2,opt,name=evict,proto3" json:"evict,omitempty"`
}

func (m *TaskRequest) Reset()                    { *m = TaskRequest{} }
func (m *TaskRequest) String() string            { return proto.CompactTextString(m) }
func (*TaskRequest) ProtoMessage()               {}
func (*TaskRequest) Descriptor() ([]byte, []int) { return fileDescriptorShared, []int{1} }

func (m *TaskRequest) GetConfig() *ntx_scheduler.TaskConfiguration {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *TaskRequest) GetEvict() bool {
	if m != nil {
		return m.Evict
	}
	return false
}

type TaskResponse struct {
	Found bool `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
	// task id
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// task endpoint
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// owner id
	Owner string `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *TaskResponse) Reset()                    { *m = TaskResponse{} }
func (m *TaskResponse) String() string            { return proto.CompactTextString(m) }
func (*TaskResponse) ProtoMessage()               {}
func (*TaskResponse) Descriptor() ([]byte, []int) { return fileDescriptorShared, []int{2} }

func (m *TaskResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

func (m *TaskResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TaskResponse) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *TaskResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func init() {
	proto.RegisterType((*Tasks)(nil), "ntx.scheduler.cache.shared.Tasks")
	proto.RegisterType((*TaskRequest)(nil), "ntx.scheduler.cache.shared.TaskRequest")
	proto.RegisterType((*TaskResponse)(nil), "ntx.scheduler.cache.shared.TaskResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TaskSharingService service

type TaskSharingServiceClient interface {
	// should be called periodically to inform server about active shared tasks
	Ping(ctx context.Context, in *Tasks, opts ...grpc.CallOption) (*ntx.Empty, error)
	Release(ctx context.Context, in *Tasks, opts ...grpc.CallOption) (*ntx.Empty, error)
	Kill(ctx context.Context, in *Tasks, opts ...grpc.CallOption) (*ntx.Empty, error)
	Request(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
}

type taskSharingServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskSharingServiceClient(cc *grpc.ClientConn) TaskSharingServiceClient {
	return &taskSharingServiceClient{cc}
}

func (c *taskSharingServiceClient) Ping(ctx context.Context, in *Tasks, opts ...grpc.CallOption) (*ntx.Empty, error) {
	out := new(ntx.Empty)
	err := grpc.Invoke(ctx, "/ntx.scheduler.cache.shared.TaskSharingService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskSharingServiceClient) Release(ctx context.Context, in *Tasks, opts ...grpc.CallOption) (*ntx.Empty, error) {
	out := new(ntx.Empty)
	err := grpc.Invoke(ctx, "/ntx.scheduler.cache.shared.TaskSharingService/Release", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskSharingServiceClient) Kill(ctx context.Context, in *Tasks, opts ...grpc.CallOption) (*ntx.Empty, error) {
	out := new(ntx.Empty)
	err := grpc.Invoke(ctx, "/ntx.scheduler.cache.shared.TaskSharingService/Kill", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskSharingServiceClient) Request(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := grpc.Invoke(ctx, "/ntx.scheduler.cache.shared.TaskSharingService/Request", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskSharingService service

type TaskSharingServiceServer interface {
	// should be called periodically to inform server about active shared tasks
	Ping(context.Context, *Tasks) (*ntx.Empty, error)
	Release(context.Context, *Tasks) (*ntx.Empty, error)
	Kill(context.Context, *Tasks) (*ntx.Empty, error)
	Request(context.Context, *TaskRequest) (*TaskResponse, error)
}

func RegisterTaskSharingServiceServer(s *grpc.Server, srv TaskSharingServiceServer) {
	s.RegisterService(&_TaskSharingService_serviceDesc, srv)
}

func _TaskSharingService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tasks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSharingServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ntx.scheduler.cache.shared.TaskSharingService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSharingServiceServer).Ping(ctx, req.(*Tasks))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskSharingService_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tasks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSharingServiceServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ntx.scheduler.cache.shared.TaskSharingService/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSharingServiceServer).Release(ctx, req.(*Tasks))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskSharingService_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tasks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSharingServiceServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ntx.scheduler.cache.shared.TaskSharingService/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSharingServiceServer).Kill(ctx, req.(*Tasks))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskSharingService_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSharingServiceServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ntx.scheduler.cache.shared.TaskSharingService/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSharingServiceServer).Request(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskSharingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ntx.scheduler.cache.shared.TaskSharingService",
	HandlerType: (*TaskSharingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _TaskSharingService_Ping_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _TaskSharingService_Release_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _TaskSharingService_Kill_Handler,
		},
		{
			MethodName: "Request",
			Handler:    _TaskSharingService_Request_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ntx/scheduler/cache/shared/shared.proto",
}

func (m *Tasks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tasks) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *TaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintShared(dAtA, i, uint64(m.Config.Size()))
		n1, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Evict {
		dAtA[i] = 0x10
		i++
		if m.Evict {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *TaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Found {
		dAtA[i] = 0x8
		i++
		if m.Found {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShared(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Endpoint) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintShared(dAtA, i, uint64(len(m.Endpoint)))
		i += copy(dAtA[i:], m.Endpoint)
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintShared(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	return i, nil
}

func encodeFixed64Shared(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Shared(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintShared(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Tasks) Size() (n int) {
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovShared(uint64(l))
		}
	}
	return n
}

func (m *TaskRequest) Size() (n int) {
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovShared(uint64(l))
	}
	if m.Evict {
		n += 2
	}
	return n
}

func (m *TaskResponse) Size() (n int) {
	var l int
	_ = l
	if m.Found {
		n += 2
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovShared(uint64(l))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovShared(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovShared(uint64(l))
	}
	return n
}

func sovShared(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozShared(x uint64) (n int) {
	return sovShared(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tasks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tasks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tasks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &ntx_scheduler.TaskConfiguration{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evict", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Evict = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Found", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Found = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShared(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShared
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShared
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShared
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthShared
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowShared
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipShared(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthShared = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShared   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ntx/scheduler/cache/shared/shared.proto", fileDescriptorShared) }

var fileDescriptorShared = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xbf, 0x4e, 0xeb, 0x30,
	0x14, 0xc6, 0x6f, 0xd2, 0x3f, 0xb7, 0x3d, 0xbd, 0xba, 0x20, 0x8b, 0x21, 0x64, 0x88, 0x42, 0x97,
	0x66, 0x4a, 0xa5, 0xa2, 0x4a, 0x9d, 0x41, 0x4c, 0x2c, 0x28, 0x65, 0x42, 0x30, 0x84, 0xe4, 0xb4,
	0xb1, 0x1a, 0xec, 0x60, 0x3b, 0xa5, 0xbc, 0x09, 0xe2, 0x89, 0x18, 0x79, 0x04, 0x54, 0x5e, 0x04,
	0xd9, 0xae, 0x2a, 0x75, 0x40, 0x55, 0xa7, 0xe4, 0x3b, 0xe7, 0xf7, 0x7d, 0x27, 0x39, 0x36, 0x0c,
	0x98, 0x5a, 0x0d, 0x65, 0x56, 0x60, 0x5e, 0x97, 0x28, 0x86, 0x59, 0x9a, 0x15, 0x38, 0x94, 0x45,
	0x2a, 0x30, 0xdf, 0x3c, 0xe2, 0x4a, 0x70, 0xc5, 0x89, 0xcf, 0xd4, 0x2a, 0xde, 0x82, 0xb1, 0x01,
	0x63, 0x4b, 0xf8, 0xde, 0x6e, 0x88, 0x4a, 0xe5, 0xc2, 0xba, 0xfc, 0x23, 0xdd, 0xc1, 0xa7, 0x4a,
	0xbd, 0xda, 0x42, 0xff, 0x14, 0x5a, 0xb7, 0xa9, 0x5c, 0x48, 0x72, 0x0c, 0x0d, 0x9a, 0x4b, 0xcf,
	0x09, 0x1b, 0x51, 0x37, 0xd1, 0xaf, 0xfd, 0x07, 0xe8, 0xe9, 0x56, 0x82, 0xcf, 0x35, 0x4a, 0x45,
	0x26, 0xd0, 0xce, 0x38, 0x9b, 0xd1, 0xb9, 0xe7, 0x84, 0x4e, 0xd4, 0x1b, 0x85, 0xf1, 0xee, 0x17,
	0x68, 0xf6, 0xd2, 0x00, 0xb5, 0x48, 0x15, 0xe5, 0x2c, 0xd9, 0xf0, 0xe4, 0x04, 0x5a, 0xb8, 0xa4,
	0x99, 0xf2, 0xdc, 0xd0, 0x89, 0x3a, 0x89, 0x15, 0xfd, 0x19, 0xfc, 0xb3, 0xf1, 0xb2, 0xe2, 0x4c,
	0xa2, 0xa6, 0x66, 0xbc, 0x66, 0xb9, 0x89, 0xef, 0x24, 0x56, 0x90, 0xff, 0xe0, 0xd2, 0xdc, 0x18,
	0xbb, 0x89, 0x4b, 0x73, 0xe2, 0x43, 0x07, 0x59, 0x5e, 0x71, 0xca, 0x94, 0xd7, 0x30, 0xd5, 0xad,
	0xd6, 0x09, 0xfc, 0x85, 0xa1, 0xf0, 0x5a, 0xa6, 0x61, 0xc5, 0xe8, 0xdd, 0x05, 0xa2, 0x07, 0x4d,
	0x8b, 0x54, 0x50, 0x36, 0x9f, 0xa2, 0x58, 0xd2, 0x0c, 0xc9, 0x18, 0x9a, 0x37, 0x94, 0xcd, 0xc9,
	0x59, 0xfc, 0xfb, 0x22, 0xcd, 0x3f, 0x49, 0x1f, 0x0c, 0x72, 0xa5, 0xb7, 0x46, 0x26, 0xf0, 0x37,
	0xc1, 0x12, 0x53, 0x89, 0x87, 0x3a, 0xc7, 0xd0, 0xbc, 0xa6, 0x65, 0x79, 0xa8, 0xed, 0x5e, 0x0f,
	0xb4, 0x27, 0x30, 0xd8, 0xe7, 0xdc, 0x80, 0x7e, 0xb4, 0x1f, 0xb4, 0x4b, 0xbf, 0xf0, 0x3e, 0xd6,
	0x81, 0xf3, 0xb9, 0x0e, 0x9c, 0xaf, 0x75, 0xe0, 0xbc, 0x7d, 0x07, 0x7f, 0xee, 0xda, 0x16, 0x7b,
	0x6c, 0x9b, 0xfb, 0x71, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x00, 0x23, 0xc5, 0x91, 0x02,
	0x00, 0x00,
}
