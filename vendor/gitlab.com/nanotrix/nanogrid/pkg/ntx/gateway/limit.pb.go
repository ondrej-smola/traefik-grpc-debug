// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ntx/gateway/limit.proto

package gateway

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RoleLimits struct {
	Roles []*RoleLimit `protobuf:"bytes,1,rep,name=roles" json:"roles,omitempty"`
}

func (m *RoleLimits) Reset()                    { *m = RoleLimits{} }
func (m *RoleLimits) String() string            { return proto.CompactTextString(m) }
func (*RoleLimits) ProtoMessage()               {}
func (*RoleLimits) Descriptor() ([]byte, []int) { return fileDescriptorLimit, []int{0} }

func (m *RoleLimits) GetRoles() []*RoleLimit {
	if m != nil {
		return m.Roles
	}
	return nil
}

type RoleLimit struct {
	Role     string               `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	MaxTasks uint64               `protobuf:"varint,2,opt,name=maxTasks,proto3" json:"maxTasks,omitempty"`
	MaxCpus  float64              `protobuf:"fixed64,3,opt,name=maxCpus,proto3" json:"maxCpus,omitempty"`
	MaxMem   float64              `protobuf:"fixed64,4,opt,name=maxMem,proto3" json:"maxMem,omitempty"`
	Gateways []*RoleLimit_Gateway `protobuf:"bytes,5,rep,name=gateways" json:"gateways,omitempty"`
}

func (m *RoleLimit) Reset()                    { *m = RoleLimit{} }
func (m *RoleLimit) String() string            { return proto.CompactTextString(m) }
func (*RoleLimit) ProtoMessage()               {}
func (*RoleLimit) Descriptor() ([]byte, []int) { return fileDescriptorLimit, []int{1} }

func (m *RoleLimit) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *RoleLimit) GetMaxTasks() uint64 {
	if m != nil {
		return m.MaxTasks
	}
	return 0
}

func (m *RoleLimit) GetMaxCpus() float64 {
	if m != nil {
		return m.MaxCpus
	}
	return 0
}

func (m *RoleLimit) GetMaxMem() float64 {
	if m != nil {
		return m.MaxMem
	}
	return 0
}

func (m *RoleLimit) GetGateways() []*RoleLimit_Gateway {
	if m != nil {
		return m.Gateways
	}
	return nil
}

type RoleLimit_Gateway struct {
	Id    string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tasks []*RoleLimit_Gateway_Task `protobuf:"bytes,2,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *RoleLimit_Gateway) Reset()                    { *m = RoleLimit_Gateway{} }
func (m *RoleLimit_Gateway) String() string            { return proto.CompactTextString(m) }
func (*RoleLimit_Gateway) ProtoMessage()               {}
func (*RoleLimit_Gateway) Descriptor() ([]byte, []int) { return fileDescriptorLimit, []int{1, 0} }

func (m *RoleLimit_Gateway) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RoleLimit_Gateway) GetTasks() []*RoleLimit_Gateway_Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type RoleLimit_Gateway_Task struct {
	ReqId string  `protobuf:"bytes,1,opt,name=reqId,proto3" json:"reqId,omitempty"`
	Cpus  float64 `protobuf:"fixed64,2,opt,name=cpus,proto3" json:"cpus,omitempty"`
	Mem   float64 `protobuf:"fixed64,3,opt,name=mem,proto3" json:"mem,omitempty"`
}

func (m *RoleLimit_Gateway_Task) Reset()         { *m = RoleLimit_Gateway_Task{} }
func (m *RoleLimit_Gateway_Task) String() string { return proto.CompactTextString(m) }
func (*RoleLimit_Gateway_Task) ProtoMessage()    {}
func (*RoleLimit_Gateway_Task) Descriptor() ([]byte, []int) {
	return fileDescriptorLimit, []int{1, 0, 0}
}

func (m *RoleLimit_Gateway_Task) GetReqId() string {
	if m != nil {
		return m.ReqId
	}
	return ""
}

func (m *RoleLimit_Gateway_Task) GetCpus() float64 {
	if m != nil {
		return m.Cpus
	}
	return 0
}

func (m *RoleLimit_Gateway_Task) GetMem() float64 {
	if m != nil {
		return m.Mem
	}
	return 0
}

func init() {
	proto.RegisterType((*RoleLimits)(nil), "ntx.gateway.RoleLimits")
	proto.RegisterType((*RoleLimit)(nil), "ntx.gateway.RoleLimit")
	proto.RegisterType((*RoleLimit_Gateway)(nil), "ntx.gateway.RoleLimit.Gateway")
	proto.RegisterType((*RoleLimit_Gateway_Task)(nil), "ntx.gateway.RoleLimit.Gateway.Task")
}
func (m *RoleLimits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleLimits) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for _, msg := range m.Roles {
			dAtA[i] = 0xa
			i++
			i = encodeVarintLimit(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RoleLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleLimit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Role) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLimit(dAtA, i, uint64(len(m.Role)))
		i += copy(dAtA[i:], m.Role)
	}
	if m.MaxTasks != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLimit(dAtA, i, uint64(m.MaxTasks))
	}
	if m.MaxCpus != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64Limit(dAtA, i, uint64(math.Float64bits(float64(m.MaxCpus))))
	}
	if m.MaxMem != 0 {
		dAtA[i] = 0x21
		i++
		i = encodeFixed64Limit(dAtA, i, uint64(math.Float64bits(float64(m.MaxMem))))
	}
	if len(m.Gateways) > 0 {
		for _, msg := range m.Gateways {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintLimit(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RoleLimit_Gateway) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleLimit_Gateway) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLimit(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Tasks) > 0 {
		for _, msg := range m.Tasks {
			dAtA[i] = 0x12
			i++
			i = encodeVarintLimit(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RoleLimit_Gateway_Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleLimit_Gateway_Task) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ReqId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLimit(dAtA, i, uint64(len(m.ReqId)))
		i += copy(dAtA[i:], m.ReqId)
	}
	if m.Cpus != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Limit(dAtA, i, uint64(math.Float64bits(float64(m.Cpus))))
	}
	if m.Mem != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64Limit(dAtA, i, uint64(math.Float64bits(float64(m.Mem))))
	}
	return i, nil
}

func encodeFixed64Limit(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Limit(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintLimit(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RoleLimits) Size() (n int) {
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 1 + l + sovLimit(uint64(l))
		}
	}
	return n
}

func (m *RoleLimit) Size() (n int) {
	var l int
	_ = l
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovLimit(uint64(l))
	}
	if m.MaxTasks != 0 {
		n += 1 + sovLimit(uint64(m.MaxTasks))
	}
	if m.MaxCpus != 0 {
		n += 9
	}
	if m.MaxMem != 0 {
		n += 9
	}
	if len(m.Gateways) > 0 {
		for _, e := range m.Gateways {
			l = e.Size()
			n += 1 + l + sovLimit(uint64(l))
		}
	}
	return n
}

func (m *RoleLimit_Gateway) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLimit(uint64(l))
	}
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovLimit(uint64(l))
		}
	}
	return n
}

func (m *RoleLimit_Gateway_Task) Size() (n int) {
	var l int
	_ = l
	l = len(m.ReqId)
	if l > 0 {
		n += 1 + l + sovLimit(uint64(l))
	}
	if m.Cpus != 0 {
		n += 9
	}
	if m.Mem != 0 {
		n += 9
	}
	return n
}

func sovLimit(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLimit(x uint64) (n int) {
	return sovLimit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoleLimits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleLimits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleLimits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLimit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, &RoleLimit{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTasks", wireType)
			}
			m.MaxTasks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTasks |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCpus", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.MaxCpus = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMem", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.MaxMem = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLimit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateways = append(m.Gateways, &RoleLimit_Gateway{})
			if err := m.Gateways[len(m.Gateways)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleLimit_Gateway) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gateway: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gateway: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLimit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &RoleLimit_Gateway_Task{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleLimit_Gateway_Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLimit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpus", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Cpus = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mem", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Mem = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipLimit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLimit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLimit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLimit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLimit
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLimit
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLimit(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLimit = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLimit   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ntx/gateway/limit.proto", fileDescriptorLimit) }

var fileDescriptorLimit = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xb1, 0x4e, 0xfb, 0x30,
	0x10, 0xc6, 0xff, 0x4e, 0x93, 0xa6, 0xbd, 0x4a, 0x7f, 0xa1, 0x13, 0x2a, 0x26, 0x43, 0x14, 0x95,
	0x25, 0x03, 0x72, 0x25, 0x98, 0xe8, 0x58, 0x06, 0x84, 0x04, 0x8b, 0xc5, 0xc4, 0x66, 0xa8, 0x85,
	0x22, 0xe2, 0xa6, 0xc4, 0x46, 0x84, 0x37, 0xe9, 0x03, 0x31, 0x30, 0xf2, 0x08, 0x28, 0xbc, 0x08,
	0xb2, 0xe3, 0x46, 0x0c, 0x88, 0xed, 0xbe, 0xef, 0x3e, 0x9f, 0x7f, 0x67, 0xc3, 0xc1, 0xda, 0x34,
	0xf3, 0x07, 0x61, 0xe4, 0x8b, 0x78, 0x9d, 0x97, 0x85, 0x2a, 0x0c, 0xdb, 0xd4, 0x95, 0xa9, 0x70,
	0xb2, 0x36, 0x0d, 0xf3, 0x8d, 0xd9, 0x02, 0x80, 0x57, 0xa5, 0xbc, 0xb2, 0x7d, 0x8d, 0xc7, 0x10,
	0xd5, 0x55, 0x29, 0x35, 0x25, 0xd9, 0x20, 0x9f, 0x9c, 0x4c, 0xd9, 0x8f, 0x28, 0xeb, 0x73, 0xbc,
	0x0b, 0xcd, 0xde, 0x02, 0x18, 0xf7, 0x26, 0x22, 0x84, 0xd6, 0xa6, 0x24, 0x23, 0xf9, 0x98, 0xbb,
	0x1a, 0x13, 0x18, 0x29, 0xd1, 0xdc, 0x08, 0xfd, 0xa8, 0x69, 0x90, 0x91, 0x3c, 0xe4, 0xbd, 0x46,
	0x0a, 0xb1, 0x12, 0xcd, 0xf9, 0xe6, 0x59, 0xd3, 0x41, 0x46, 0x72, 0xc2, 0x77, 0x12, 0xa7, 0x30,
	0x54, 0xa2, 0xb9, 0x96, 0x8a, 0x86, 0xae, 0xe1, 0x15, 0x2e, 0x60, 0xe4, 0x59, 0x34, 0x8d, 0x1c,
	0x60, 0xfa, 0x3b, 0x20, 0xbb, 0xe8, 0x1c, 0xde, 0xe7, 0x93, 0x2d, 0x81, 0xd8, 0xbb, 0xf8, 0x1f,
	0x82, 0x62, 0xe5, 0x39, 0x83, 0x62, 0x85, 0x67, 0x10, 0x19, 0x8f, 0x68, 0x87, 0x1e, 0xfd, 0x3d,
	0x94, 0x59, 0x7c, 0xde, 0x9d, 0x48, 0x96, 0x10, 0x5a, 0x89, 0xfb, 0x10, 0xd5, 0xf2, 0xe9, 0x72,
	0x37, 0xb5, 0x13, 0xf6, 0x49, 0xee, 0xed, 0x7e, 0x81, 0x5b, 0xc3, 0xd5, 0xb8, 0x07, 0x03, 0x25,
	0x95, 0x5f, 0xd9, 0x96, 0xcb, 0xc3, 0xf7, 0x36, 0x25, 0x1f, 0x6d, 0x4a, 0x3e, 0xdb, 0x94, 0x6c,
	0xbf, 0xd2, 0x7f, 0xb7, 0xb1, 0xbf, 0xfc, 0x6e, 0xe8, 0x7e, 0xec, 0xf4, 0x3b, 0x00, 0x00, 0xff,
	0xff, 0xb4, 0x7b, 0xe8, 0x0d, 0xcc, 0x01, 0x00, 0x00,
}
