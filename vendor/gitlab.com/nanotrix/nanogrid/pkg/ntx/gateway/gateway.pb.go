// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ntx/gateway/gateway.proto

/*
	Package gateway is a generated protocol buffer package.

	It is generated from these files:
		ntx/gateway/gateway.proto
		ntx/gateway/limit.proto

	It has these top-level messages:
		Client
		Snapshot
		MembershipSnapshot
		ClientsQuery
		ClientsResponse
		KnownEntityIds
		EntityQuery
		EntitySnapshot
		Config
		HistoryBackup
		RoleLimits
		RoleLimit
*/
package gateway

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import ntx_scheduler "gitlab.com/nanotrix/nanogrid/pkg/ntx/scheduler"
import ntx_auth "gitlab.com/nanotrix/nanogrid/pkg/ntx/auth"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Client_State int32

const (
	Client_NOT_SET   Client_State = 0
	Client_WAITING   Client_State = 1
	Client_SCHEDULED Client_State = 2
	Client_RUNNING   Client_State = 3
	Client_COMPLETED Client_State = 4
	Client_FAILED    Client_State = 5
)

var Client_State_name = map[int32]string{
	0: "NOT_SET",
	1: "WAITING",
	2: "SCHEDULED",
	3: "RUNNING",
	4: "COMPLETED",
	5: "FAILED",
}
var Client_State_value = map[string]int32{
	"NOT_SET":   0,
	"WAITING":   1,
	"SCHEDULED": 2,
	"RUNNING":   3,
	"COMPLETED": 4,
	"FAILED":    5,
}

func (x Client_State) String() string {
	return proto.EnumName(Client_State_name, int32(x))
}
func (Client_State) EnumDescriptor() ([]byte, []int) { return fileDescriptorGateway, []int{0, 0} }

type Config_LocalCache_Type int32

const (
	Config_LocalCache_NOT_SET  Config_LocalCache_Type = 0
	Config_LocalCache_DISABLED Config_LocalCache_Type = 1
	Config_LocalCache_ENABLED  Config_LocalCache_Type = 2
)

var Config_LocalCache_Type_name = map[int32]string{
	0: "NOT_SET",
	1: "DISABLED",
	2: "ENABLED",
}
var Config_LocalCache_Type_value = map[string]int32{
	"NOT_SET":  0,
	"DISABLED": 1,
	"ENABLED":  2,
}

func (x Config_LocalCache_Type) String() string {
	return proto.EnumName(Config_LocalCache_Type_name, int32(x))
}
func (Config_LocalCache_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorGateway, []int{8, 2, 0}
}

type Config_SharedCache_Type int32

const (
	Config_SharedCache_NOT_SET  Config_SharedCache_Type = 0
	Config_SharedCache_DISABLED Config_SharedCache_Type = 1
	Config_SharedCache_ENABLED  Config_SharedCache_Type = 2
)

var Config_SharedCache_Type_name = map[int32]string{
	0: "NOT_SET",
	1: "DISABLED",
	2: "ENABLED",
}
var Config_SharedCache_Type_value = map[string]int32{
	"NOT_SET":  0,
	"DISABLED": 1,
	"ENABLED":  2,
}

func (x Config_SharedCache_Type) String() string {
	return proto.EnumName(Config_SharedCache_Type_name, int32(x))
}
func (Config_SharedCache_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorGateway, []int{8, 3, 0}
}

type Config_Membership_Type int32

const (
	Config_Membership_NOT_SET   Config_Membership_Type = 0
	Config_Membership_DISABLED  Config_Membership_Type = 1
	Config_Membership_ZOOKEEPER Config_Membership_Type = 2
)

var Config_Membership_Type_name = map[int32]string{
	0: "NOT_SET",
	1: "DISABLED",
	2: "ZOOKEEPER",
}
var Config_Membership_Type_value = map[string]int32{
	"NOT_SET":   0,
	"DISABLED":  1,
	"ZOOKEEPER": 2,
}

func (x Config_Membership_Type) String() string {
	return proto.EnumName(Config_Membership_Type_name, int32(x))
}
func (Config_Membership_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorGateway, []int{8, 6, 0}
}

type Client struct {
	Id           string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State        Client_State       `protobuf:"varint,2,opt,name=state,proto3,enum=ntx.gateway.Client_State" json:"state,omitempty"`
	Token        *ntx_auth.NtxToken `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	TaskId       string             `protobuf:"bytes,4,opt,name=taskId,proto3" json:"taskId,omitempty"`
	TaskEndpoint string             `protobuf:"bytes,5,opt,name=taskEndpoint,proto3" json:"taskEndpoint,omitempty"`
	Seqn         uint64             `protobuf:"varint,6,opt,name=seqn,proto3" json:"seqn,omitempty"`
	Created      uint64             `protobuf:"varint,10,opt,name=created,proto3" json:"created,omitempty"`
	Scheduled    uint64             `protobuf:"varint,11,opt,name=scheduled,proto3" json:"scheduled,omitempty"`
	Started      uint64             `protobuf:"varint,12,opt,name=started,proto3" json:"started,omitempty"`
	Completed    uint64             `protobuf:"varint,13,opt,name=completed,proto3" json:"completed,omitempty"`
	Error        string             `protobuf:"bytes,15,opt,name=error,proto3" json:"error,omitempty"`
	MsgsOut      uint64             `protobuf:"varint,32,opt,name=msgsOut,proto3" json:"msgsOut,omitempty"`
	BytesOut     uint64             `protobuf:"varint,33,opt,name=bytesOut,proto3" json:"bytesOut,omitempty"`
	MsgsIn       uint64             `protobuf:"varint,42,opt,name=msgsIn,proto3" json:"msgsIn,omitempty"`
	BytesIn      uint64             `protobuf:"varint,43,opt,name=bytesIn,proto3" json:"bytesIn,omitempty"`
	StreamLength uint64             `protobuf:"varint,55,opt,name=streamLength,proto3" json:"streamLength,omitempty"`
}

func (m *Client) Reset()                    { *m = Client{} }
func (m *Client) String() string            { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()               {}
func (*Client) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{0} }

func (m *Client) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Client) GetState() Client_State {
	if m != nil {
		return m.State
	}
	return Client_NOT_SET
}

func (m *Client) GetToken() *ntx_auth.NtxToken {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *Client) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *Client) GetTaskEndpoint() string {
	if m != nil {
		return m.TaskEndpoint
	}
	return ""
}

func (m *Client) GetSeqn() uint64 {
	if m != nil {
		return m.Seqn
	}
	return 0
}

func (m *Client) GetCreated() uint64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Client) GetScheduled() uint64 {
	if m != nil {
		return m.Scheduled
	}
	return 0
}

func (m *Client) GetStarted() uint64 {
	if m != nil {
		return m.Started
	}
	return 0
}

func (m *Client) GetCompleted() uint64 {
	if m != nil {
		return m.Completed
	}
	return 0
}

func (m *Client) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Client) GetMsgsOut() uint64 {
	if m != nil {
		return m.MsgsOut
	}
	return 0
}

func (m *Client) GetBytesOut() uint64 {
	if m != nil {
		return m.BytesOut
	}
	return 0
}

func (m *Client) GetMsgsIn() uint64 {
	if m != nil {
		return m.MsgsIn
	}
	return 0
}

func (m *Client) GetBytesIn() uint64 {
	if m != nil {
		return m.BytesIn
	}
	return 0
}

func (m *Client) GetStreamLength() uint64 {
	if m != nil {
		return m.StreamLength
	}
	return 0
}

type Snapshot struct {
	Clients          *Snapshot_Clients             `protobuf:"bytes,1,opt,name=clients" json:"clients,omitempty"`
	CachedLocalTasks []*ntx_scheduler.TaskSnapshot `protobuf:"bytes,5,rep,name=cachedLocalTasks" json:"cachedLocalTasks,omitempty"`
	BorrowedTasks    []*ntx_scheduler.TaskSnapshot `protobuf:"bytes,6,rep,name=borrowedTasks" json:"borrowedTasks,omitempty"`
	SharedTasks      []*ntx_scheduler.TaskSnapshot `protobuf:"bytes,7,rep,name=sharedTasks" json:"sharedTasks,omitempty"`
	Cluster          []*Snapshot_Member            `protobuf:"bytes,10,rep,name=cluster" json:"cluster,omitempty"`
	GatewayId        string                        `protobuf:"bytes,14,opt,name=gatewayId,proto3" json:"gatewayId,omitempty"`
	// deprecated since 1.5.4
	Created string `protobuf:"bytes,15,opt,name=created,proto3" json:"created,omitempty"`
}

func (m *Snapshot) Reset()                    { *m = Snapshot{} }
func (m *Snapshot) String() string            { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()               {}
func (*Snapshot) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{1} }

func (m *Snapshot) GetClients() *Snapshot_Clients {
	if m != nil {
		return m.Clients
	}
	return nil
}

func (m *Snapshot) GetCachedLocalTasks() []*ntx_scheduler.TaskSnapshot {
	if m != nil {
		return m.CachedLocalTasks
	}
	return nil
}

func (m *Snapshot) GetBorrowedTasks() []*ntx_scheduler.TaskSnapshot {
	if m != nil {
		return m.BorrowedTasks
	}
	return nil
}

func (m *Snapshot) GetSharedTasks() []*ntx_scheduler.TaskSnapshot {
	if m != nil {
		return m.SharedTasks
	}
	return nil
}

func (m *Snapshot) GetCluster() []*Snapshot_Member {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *Snapshot) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *Snapshot) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

type Snapshot_Member struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
}

func (m *Snapshot_Member) Reset()                    { *m = Snapshot_Member{} }
func (m *Snapshot_Member) String() string            { return proto.CompactTextString(m) }
func (*Snapshot_Member) ProtoMessage()               {}
func (*Snapshot_Member) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{1, 0} }

func (m *Snapshot_Member) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Snapshot_Member) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type Snapshot_Clients struct {
	Active    []*Client `protobuf:"bytes,1,rep,name=active" json:"active,omitempty"`
	Completed []*Client `protobuf:"bytes,2,rep,name=completed" json:"completed,omitempty"`
}

func (m *Snapshot_Clients) Reset()                    { *m = Snapshot_Clients{} }
func (m *Snapshot_Clients) String() string            { return proto.CompactTextString(m) }
func (*Snapshot_Clients) ProtoMessage()               {}
func (*Snapshot_Clients) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{1, 1} }

func (m *Snapshot_Clients) GetActive() []*Client {
	if m != nil {
		return m.Active
	}
	return nil
}

func (m *Snapshot_Clients) GetCompleted() []*Client {
	if m != nil {
		return m.Completed
	}
	return nil
}

type MembershipSnapshot struct {
	Members []*MembershipSnapshot_Member `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
	// deprecated since 1.5.4
	Created   string `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	Collected uint64 `protobuf:"varint,5,opt,name=collected,proto3" json:"collected,omitempty"`
}

func (m *MembershipSnapshot) Reset()                    { *m = MembershipSnapshot{} }
func (m *MembershipSnapshot) String() string            { return proto.CompactTextString(m) }
func (*MembershipSnapshot) ProtoMessage()               {}
func (*MembershipSnapshot) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{2} }

func (m *MembershipSnapshot) GetMembers() []*MembershipSnapshot_Member {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *MembershipSnapshot) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *MembershipSnapshot) GetCollected() uint64 {
	if m != nil {
		return m.Collected
	}
	return 0
}

type MembershipSnapshot_Member struct {
	Endpoint string    `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Snapshot *Snapshot `protobuf:"bytes,2,opt,name=snapshot" json:"snapshot,omitempty"`
	Error    string    `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *MembershipSnapshot_Member) Reset()         { *m = MembershipSnapshot_Member{} }
func (m *MembershipSnapshot_Member) String() string { return proto.CompactTextString(m) }
func (*MembershipSnapshot_Member) ProtoMessage()    {}
func (*MembershipSnapshot_Member) Descriptor() ([]byte, []int) {
	return fileDescriptorGateway, []int{2, 0}
}

func (m *MembershipSnapshot_Member) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *MembershipSnapshot_Member) GetSnapshot() *Snapshot {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

func (m *MembershipSnapshot_Member) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ClientsQuery struct {
	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *ClientsQuery) Reset()                    { *m = ClientsQuery{} }
func (m *ClientsQuery) String() string            { return proto.CompactTextString(m) }
func (*ClientsQuery) ProtoMessage()               {}
func (*ClientsQuery) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{3} }

func (m *ClientsQuery) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ClientsResponse struct {
	Clients []*Client `protobuf:"bytes,1,rep,name=clients" json:"clients,omitempty"`
}

func (m *ClientsResponse) Reset()                    { *m = ClientsResponse{} }
func (m *ClientsResponse) String() string            { return proto.CompactTextString(m) }
func (*ClientsResponse) ProtoMessage()               {}
func (*ClientsResponse) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{4} }

func (m *ClientsResponse) GetClients() []*Client {
	if m != nil {
		return m.Clients
	}
	return nil
}

type KnownEntityIds struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *KnownEntityIds) Reset()                    { *m = KnownEntityIds{} }
func (m *KnownEntityIds) String() string            { return proto.CompactTextString(m) }
func (*KnownEntityIds) ProtoMessage()               {}
func (*KnownEntityIds) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{5} }

func (m *KnownEntityIds) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type EntityQuery struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *EntityQuery) Reset()                    { *m = EntityQuery{} }
func (m *EntityQuery) String() string            { return proto.CompactTextString(m) }
func (*EntityQuery) ProtoMessage()               {}
func (*EntityQuery) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{6} }

func (m *EntityQuery) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type EntitySnapshot struct {
	Active     []*Client `protobuf:"bytes,1,rep,name=active" json:"active,omitempty"`
	Successful []*Client `protobuf:"bytes,2,rep,name=successful" json:"successful,omitempty"`
	Failed     []*Client `protobuf:"bytes,3,rep,name=failed" json:"failed,omitempty"`
	LastAction uint64    `protobuf:"varint,4,opt,name=lastAction,proto3" json:"lastAction,omitempty"`
	Collected  uint64    `protobuf:"varint,5,opt,name=collected,proto3" json:"collected,omitempty"`
}

func (m *EntitySnapshot) Reset()                    { *m = EntitySnapshot{} }
func (m *EntitySnapshot) String() string            { return proto.CompactTextString(m) }
func (*EntitySnapshot) ProtoMessage()               {}
func (*EntitySnapshot) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{7} }

func (m *EntitySnapshot) GetActive() []*Client {
	if m != nil {
		return m.Active
	}
	return nil
}

func (m *EntitySnapshot) GetSuccessful() []*Client {
	if m != nil {
		return m.Successful
	}
	return nil
}

func (m *EntitySnapshot) GetFailed() []*Client {
	if m != nil {
		return m.Failed
	}
	return nil
}

func (m *EntitySnapshot) GetLastAction() uint64 {
	if m != nil {
		return m.LastAction
	}
	return 0
}

func (m *EntitySnapshot) GetCollected() uint64 {
	if m != nil {
		return m.Collected
	}
	return 0
}

type Config struct {
	Id    string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Host  string        `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Ports *Config_Ports `protobuf:"bytes,11,opt,name=ports" json:"ports,omitempty"`
	// input string for advertised ports, defaults to ports if not set
	AdvertisedPorts *Config_AdvertisedPorts `protobuf:"bytes,12,opt,name=advertisedPorts" json:"advertisedPorts,omitempty"`
	Zookeeper       *Config_Zookeeper       `protobuf:"bytes,14,opt,name=zookeeper" json:"zookeeper,omitempty"`
	LocalCache      *Config_LocalCache      `protobuf:"bytes,15,opt,name=localCache" json:"localCache,omitempty"`
	SharedCache     *Config_SharedCache     `protobuf:"bytes,18,opt,name=sharedCache" json:"sharedCache,omitempty"`
	Scheduler       *Config_Scheduler       `protobuf:"bytes,21,opt,name=scheduler" json:"scheduler,omitempty"`
	Membership      *Config_Membership      `protobuf:"bytes,24,opt,name=membership" json:"membership,omitempty"`
	History         *Config_History         `protobuf:"bytes,33,opt,name=history" json:"history,omitempty"`
	Proxy           *Config_Proxy           `protobuf:"bytes,36,opt,name=proxy" json:"proxy,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{8} }

func (m *Config) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Config) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Config) GetPorts() *Config_Ports {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *Config) GetAdvertisedPorts() *Config_AdvertisedPorts {
	if m != nil {
		return m.AdvertisedPorts
	}
	return nil
}

func (m *Config) GetZookeeper() *Config_Zookeeper {
	if m != nil {
		return m.Zookeeper
	}
	return nil
}

func (m *Config) GetLocalCache() *Config_LocalCache {
	if m != nil {
		return m.LocalCache
	}
	return nil
}

func (m *Config) GetSharedCache() *Config_SharedCache {
	if m != nil {
		return m.SharedCache
	}
	return nil
}

func (m *Config) GetScheduler() *Config_Scheduler {
	if m != nil {
		return m.Scheduler
	}
	return nil
}

func (m *Config) GetMembership() *Config_Membership {
	if m != nil {
		return m.Membership
	}
	return nil
}

func (m *Config) GetHistory() *Config_History {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *Config) GetProxy() *Config_Proxy {
	if m != nil {
		return m.Proxy
	}
	return nil
}

type Config_Ports struct {
	HttpInternal uint64 `protobuf:"varint,1,opt,name=httpInternal,proto3" json:"httpInternal,omitempty"`
	HttpExternal uint64 `protobuf:"varint,2,opt,name=httpExternal,proto3" json:"httpExternal,omitempty"`
	GrpcInternal uint64 `protobuf:"varint,3,opt,name=grpcInternal,proto3" json:"grpcInternal,omitempty"`
	GrpcExternal uint64 `protobuf:"varint,4,opt,name=grpcExternal,proto3" json:"grpcExternal,omitempty"`
}

func (m *Config_Ports) Reset()                    { *m = Config_Ports{} }
func (m *Config_Ports) String() string            { return proto.CompactTextString(m) }
func (*Config_Ports) ProtoMessage()               {}
func (*Config_Ports) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{8, 0} }

func (m *Config_Ports) GetHttpInternal() uint64 {
	if m != nil {
		return m.HttpInternal
	}
	return 0
}

func (m *Config_Ports) GetHttpExternal() uint64 {
	if m != nil {
		return m.HttpExternal
	}
	return 0
}

func (m *Config_Ports) GetGrpcInternal() uint64 {
	if m != nil {
		return m.GrpcInternal
	}
	return 0
}

func (m *Config_Ports) GetGrpcExternal() uint64 {
	if m != nil {
		return m.GrpcExternal
	}
	return 0
}

type Config_AdvertisedPorts struct {
	HttpInternal string `protobuf:"bytes,1,opt,name=httpInternal,proto3" json:"httpInternal,omitempty"`
	HttpExternal string `protobuf:"bytes,2,opt,name=httpExternal,proto3" json:"httpExternal,omitempty"`
	GrpcInternal string `protobuf:"bytes,3,opt,name=grpcInternal,proto3" json:"grpcInternal,omitempty"`
	GrpcExternal string `protobuf:"bytes,4,opt,name=grpcExternal,proto3" json:"grpcExternal,omitempty"`
}

func (m *Config_AdvertisedPorts) Reset()                    { *m = Config_AdvertisedPorts{} }
func (m *Config_AdvertisedPorts) String() string            { return proto.CompactTextString(m) }
func (*Config_AdvertisedPorts) ProtoMessage()               {}
func (*Config_AdvertisedPorts) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{8, 1} }

func (m *Config_AdvertisedPorts) GetHttpInternal() string {
	if m != nil {
		return m.HttpInternal
	}
	return ""
}

func (m *Config_AdvertisedPorts) GetHttpExternal() string {
	if m != nil {
		return m.HttpExternal
	}
	return ""
}

func (m *Config_AdvertisedPorts) GetGrpcInternal() string {
	if m != nil {
		return m.GrpcInternal
	}
	return ""
}

func (m *Config_AdvertisedPorts) GetGrpcExternal() string {
	if m != nil {
		return m.GrpcExternal
	}
	return ""
}

type Config_LocalCache struct {
	Type Config_LocalCache_Type `protobuf:"varint,1,opt,name=type,proto3,enum=ntx.gateway.Config_LocalCache_Type" json:"type,omitempty"`
	// how long to keep task cached
	TtlSeconds uint64 `protobuf:"varint,2,opt,name=ttlSeconds,proto3" json:"ttlSeconds,omitempty"`
	// start evicting tasks from cache with specified interval when there are no available resources for new tasks
	EvictIntervalSeconds uint64 `protobuf:"varint,3,opt,name=evictIntervalSeconds,proto3" json:"evictIntervalSeconds,omitempty"`
	// max size per cache line - cache line is unique per task configuration
	MaxLineSize uint64 `protobuf:"varint,4,opt,name=maxLineSize,proto3" json:"maxLineSize,omitempty"`
	// how ofter to trigger cache GC
	GcIntervalSeconds uint64 `protobuf:"varint,5,opt,name=gcIntervalSeconds,proto3" json:"gcIntervalSeconds,omitempty"`
}

func (m *Config_LocalCache) Reset()                    { *m = Config_LocalCache{} }
func (m *Config_LocalCache) String() string            { return proto.CompactTextString(m) }
func (*Config_LocalCache) ProtoMessage()               {}
func (*Config_LocalCache) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{8, 2} }

func (m *Config_LocalCache) GetType() Config_LocalCache_Type {
	if m != nil {
		return m.Type
	}
	return Config_LocalCache_NOT_SET
}

func (m *Config_LocalCache) GetTtlSeconds() uint64 {
	if m != nil {
		return m.TtlSeconds
	}
	return 0
}

func (m *Config_LocalCache) GetEvictIntervalSeconds() uint64 {
	if m != nil {
		return m.EvictIntervalSeconds
	}
	return 0
}

func (m *Config_LocalCache) GetMaxLineSize() uint64 {
	if m != nil {
		return m.MaxLineSize
	}
	return 0
}

func (m *Config_LocalCache) GetGcIntervalSeconds() uint64 {
	if m != nil {
		return m.GcIntervalSeconds
	}
	return 0
}

type Config_SharedCache struct {
	Type       Config_SharedCache_Type `protobuf:"varint,1,opt,name=type,proto3,enum=ntx.gateway.Config_SharedCache_Type" json:"type,omitempty"`
	TtlSeconds uint64                  `protobuf:"varint,2,opt,name=ttlSeconds,proto3" json:"ttlSeconds,omitempty"`
	// active members list refresh
	MembershipRefreshIntervalSeconds uint64 `protobuf:"varint,4,opt,name=membershipRefreshIntervalSeconds,proto3" json:"membershipRefreshIntervalSeconds,omitempty"`
	// ping interval
	KeepaliveIntervalSeconds uint64 `protobuf:"varint,5,opt,name=keepaliveIntervalSeconds,proto3" json:"keepaliveIntervalSeconds,omitempty"`
	// dead members remove interval
	GcIntervalSeconds uint64 `protobuf:"varint,7,opt,name=gcIntervalSeconds,proto3" json:"gcIntervalSeconds,omitempty"`
}

func (m *Config_SharedCache) Reset()                    { *m = Config_SharedCache{} }
func (m *Config_SharedCache) String() string            { return proto.CompactTextString(m) }
func (*Config_SharedCache) ProtoMessage()               {}
func (*Config_SharedCache) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{8, 3} }

func (m *Config_SharedCache) GetType() Config_SharedCache_Type {
	if m != nil {
		return m.Type
	}
	return Config_SharedCache_NOT_SET
}

func (m *Config_SharedCache) GetTtlSeconds() uint64 {
	if m != nil {
		return m.TtlSeconds
	}
	return 0
}

func (m *Config_SharedCache) GetMembershipRefreshIntervalSeconds() uint64 {
	if m != nil {
		return m.MembershipRefreshIntervalSeconds
	}
	return 0
}

func (m *Config_SharedCache) GetKeepaliveIntervalSeconds() uint64 {
	if m != nil {
		return m.KeepaliveIntervalSeconds
	}
	return 0
}

func (m *Config_SharedCache) GetGcIntervalSeconds() uint64 {
	if m != nil {
		return m.GcIntervalSeconds
	}
	return 0
}

type Config_Scheduler struct {
	Mesos *Config_Scheduler_Mesos `protobuf:"bytes,1,opt,name=mesos" json:"mesos,omitempty"`
}

func (m *Config_Scheduler) Reset()                    { *m = Config_Scheduler{} }
func (m *Config_Scheduler) String() string            { return proto.CompactTextString(m) }
func (*Config_Scheduler) ProtoMessage()               {}
func (*Config_Scheduler) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{8, 4} }

func (m *Config_Scheduler) GetMesos() *Config_Scheduler_Mesos {
	if m != nil {
		return m.Mesos
	}
	return nil
}

type Config_Scheduler_Mesos struct {
	Masters            []string `protobuf:"bytes,1,rep,name=masters" json:"masters,omitempty"`
	OfferRefuseSeconds uint64   `protobuf:"varint,4,opt,name=offerRefuseSeconds,proto3" json:"offerRefuseSeconds,omitempty"`
}

func (m *Config_Scheduler_Mesos) Reset()         { *m = Config_Scheduler_Mesos{} }
func (m *Config_Scheduler_Mesos) String() string { return proto.CompactTextString(m) }
func (*Config_Scheduler_Mesos) ProtoMessage()    {}
func (*Config_Scheduler_Mesos) Descriptor() ([]byte, []int) {
	return fileDescriptorGateway, []int{8, 4, 0}
}

func (m *Config_Scheduler_Mesos) GetMasters() []string {
	if m != nil {
		return m.Masters
	}
	return nil
}

func (m *Config_Scheduler_Mesos) GetOfferRefuseSeconds() uint64 {
	if m != nil {
		return m.OfferRefuseSeconds
	}
	return 0
}

type Config_Zookeeper struct {
	Endpoints      []string `protobuf:"bytes,1,rep,name=endpoints" json:"endpoints,omitempty"`
	TimeoutSeconds uint64   `protobuf:"varint,2,opt,name=timeoutSeconds,proto3" json:"timeoutSeconds,omitempty"`
}

func (m *Config_Zookeeper) Reset()                    { *m = Config_Zookeeper{} }
func (m *Config_Zookeeper) String() string            { return proto.CompactTextString(m) }
func (*Config_Zookeeper) ProtoMessage()               {}
func (*Config_Zookeeper) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{8, 5} }

func (m *Config_Zookeeper) GetEndpoints() []string {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *Config_Zookeeper) GetTimeoutSeconds() uint64 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

type Config_Membership struct {
	Type Config_Membership_Type `protobuf:"varint,1,opt,name=type,proto3,enum=ntx.gateway.Config_Membership_Type" json:"type,omitempty"`
}

func (m *Config_Membership) Reset()                    { *m = Config_Membership{} }
func (m *Config_Membership) String() string            { return proto.CompactTextString(m) }
func (*Config_Membership) ProtoMessage()               {}
func (*Config_Membership) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{8, 6} }

func (m *Config_Membership) GetType() Config_Membership_Type {
	if m != nil {
		return m.Type
	}
	return Config_Membership_NOT_SET
}

type Config_History struct {
	MaxSize uint64 `protobuf:"varint,1,opt,name=maxSize,proto3" json:"maxSize,omitempty"`
}

func (m *Config_History) Reset()                    { *m = Config_History{} }
func (m *Config_History) String() string            { return proto.CompactTextString(m) }
func (*Config_History) ProtoMessage()               {}
func (*Config_History) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{8, 7} }

func (m *Config_History) GetMaxSize() uint64 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

type Config_Proxy struct {
	AllocationTimeoutSeconds uint64 `protobuf:"varint,1,opt,name=allocationTimeoutSeconds,proto3" json:"allocationTimeoutSeconds,omitempty"`
	AllocationAttempts       uint64 `protobuf:"varint,2,opt,name=allocationAttempts,proto3" json:"allocationAttempts,omitempty"`
	InactivityTimeoutSeconds uint64 `protobuf:"varint,3,opt,name=inactivityTimeoutSeconds,proto3" json:"inactivityTimeoutSeconds,omitempty"`
}

func (m *Config_Proxy) Reset()                    { *m = Config_Proxy{} }
func (m *Config_Proxy) String() string            { return proto.CompactTextString(m) }
func (*Config_Proxy) ProtoMessage()               {}
func (*Config_Proxy) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{8, 8} }

func (m *Config_Proxy) GetAllocationTimeoutSeconds() uint64 {
	if m != nil {
		return m.AllocationTimeoutSeconds
	}
	return 0
}

func (m *Config_Proxy) GetAllocationAttempts() uint64 {
	if m != nil {
		return m.AllocationAttempts
	}
	return 0
}

func (m *Config_Proxy) GetInactivityTimeoutSeconds() uint64 {
	if m != nil {
		return m.InactivityTimeoutSeconds
	}
	return 0
}

type HistoryBackup struct {
	Completed    []*Client                  `protobuf:"bytes,1,rep,name=completed" json:"completed,omitempty"`
	LastSeq      map[string]uint64          `protobuf:"bytes,2,rep,name=lastSeq" json:"lastSeq,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Clients      map[string]*EntitySnapshot `protobuf:"bytes,3,rep,name=clients" json:"clients,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Tasks        map[string]*EntitySnapshot `protobuf:"bytes,4,rep,name=tasks" json:"tasks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	LastSnapshot *MembershipSnapshot        `protobuf:"bytes,5,opt,name=lastSnapshot" json:"lastSnapshot,omitempty"`
}

func (m *HistoryBackup) Reset()                    { *m = HistoryBackup{} }
func (m *HistoryBackup) String() string            { return proto.CompactTextString(m) }
func (*HistoryBackup) ProtoMessage()               {}
func (*HistoryBackup) Descriptor() ([]byte, []int) { return fileDescriptorGateway, []int{9} }

func (m *HistoryBackup) GetCompleted() []*Client {
	if m != nil {
		return m.Completed
	}
	return nil
}

func (m *HistoryBackup) GetLastSeq() map[string]uint64 {
	if m != nil {
		return m.LastSeq
	}
	return nil
}

func (m *HistoryBackup) GetClients() map[string]*EntitySnapshot {
	if m != nil {
		return m.Clients
	}
	return nil
}

func (m *HistoryBackup) GetTasks() map[string]*EntitySnapshot {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *HistoryBackup) GetLastSnapshot() *MembershipSnapshot {
	if m != nil {
		return m.LastSnapshot
	}
	return nil
}

func init() {
	proto.RegisterType((*Client)(nil), "ntx.gateway.Client")
	proto.RegisterType((*Snapshot)(nil), "ntx.gateway.Snapshot")
	proto.RegisterType((*Snapshot_Member)(nil), "ntx.gateway.Snapshot.Member")
	proto.RegisterType((*Snapshot_Clients)(nil), "ntx.gateway.Snapshot.Clients")
	proto.RegisterType((*MembershipSnapshot)(nil), "ntx.gateway.MembershipSnapshot")
	proto.RegisterType((*MembershipSnapshot_Member)(nil), "ntx.gateway.MembershipSnapshot.Member")
	proto.RegisterType((*ClientsQuery)(nil), "ntx.gateway.ClientsQuery")
	proto.RegisterType((*ClientsResponse)(nil), "ntx.gateway.ClientsResponse")
	proto.RegisterType((*KnownEntityIds)(nil), "ntx.gateway.KnownEntityIds")
	proto.RegisterType((*EntityQuery)(nil), "ntx.gateway.EntityQuery")
	proto.RegisterType((*EntitySnapshot)(nil), "ntx.gateway.EntitySnapshot")
	proto.RegisterType((*Config)(nil), "ntx.gateway.Config")
	proto.RegisterType((*Config_Ports)(nil), "ntx.gateway.Config.Ports")
	proto.RegisterType((*Config_AdvertisedPorts)(nil), "ntx.gateway.Config.AdvertisedPorts")
	proto.RegisterType((*Config_LocalCache)(nil), "ntx.gateway.Config.LocalCache")
	proto.RegisterType((*Config_SharedCache)(nil), "ntx.gateway.Config.SharedCache")
	proto.RegisterType((*Config_Scheduler)(nil), "ntx.gateway.Config.Scheduler")
	proto.RegisterType((*Config_Scheduler_Mesos)(nil), "ntx.gateway.Config.Scheduler.Mesos")
	proto.RegisterType((*Config_Zookeeper)(nil), "ntx.gateway.Config.Zookeeper")
	proto.RegisterType((*Config_Membership)(nil), "ntx.gateway.Config.Membership")
	proto.RegisterType((*Config_History)(nil), "ntx.gateway.Config.History")
	proto.RegisterType((*Config_Proxy)(nil), "ntx.gateway.Config.Proxy")
	proto.RegisterType((*HistoryBackup)(nil), "ntx.gateway.HistoryBackup")
	proto.RegisterEnum("ntx.gateway.Client_State", Client_State_name, Client_State_value)
	proto.RegisterEnum("ntx.gateway.Config_LocalCache_Type", Config_LocalCache_Type_name, Config_LocalCache_Type_value)
	proto.RegisterEnum("ntx.gateway.Config_SharedCache_Type", Config_SharedCache_Type_name, Config_SharedCache_Type_value)
	proto.RegisterEnum("ntx.gateway.Config_Membership_Type", Config_Membership_Type_name, Config_Membership_Type_value)
}
func (m *Client) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Client) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.State))
	}
	if m.Token != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Token.Size()))
		n1, err := m.Token.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.TaskId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.TaskId)))
		i += copy(dAtA[i:], m.TaskId)
	}
	if len(m.TaskEndpoint) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.TaskEndpoint)))
		i += copy(dAtA[i:], m.TaskEndpoint)
	}
	if m.Seqn != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Seqn))
	}
	if m.Created != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Created))
	}
	if m.Scheduled != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Scheduled))
	}
	if m.Started != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Started))
	}
	if m.Completed != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Completed))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.MsgsOut != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.MsgsOut))
	}
	if m.BytesOut != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.BytesOut))
	}
	if m.MsgsIn != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.MsgsIn))
	}
	if m.BytesIn != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.BytesIn))
	}
	if m.StreamLength != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.StreamLength))
	}
	return i, nil
}

func (m *Snapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snapshot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Clients != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Clients.Size()))
		n2, err := m.Clients.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.CachedLocalTasks) > 0 {
		for _, msg := range m.CachedLocalTasks {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BorrowedTasks) > 0 {
		for _, msg := range m.BorrowedTasks {
			dAtA[i] = 0x32
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SharedTasks) > 0 {
		for _, msg := range m.SharedTasks {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Cluster) > 0 {
		for _, msg := range m.Cluster {
			dAtA[i] = 0x52
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GatewayId) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.GatewayId)))
		i += copy(dAtA[i:], m.GatewayId)
	}
	if len(m.Created) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Created)))
		i += copy(dAtA[i:], m.Created)
	}
	return i, nil
}

func (m *Snapshot_Member) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snapshot_Member) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	return i, nil
}

func (m *Snapshot_Clients) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snapshot_Clients) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Active) > 0 {
		for _, msg := range m.Active {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Completed) > 0 {
		for _, msg := range m.Completed {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MembershipSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MembershipSnapshot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Created) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Created)))
		i += copy(dAtA[i:], m.Created)
	}
	if m.Collected != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Collected))
	}
	return i, nil
}

func (m *MembershipSnapshot_Member) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MembershipSnapshot_Member) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Endpoint) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Endpoint)))
		i += copy(dAtA[i:], m.Endpoint)
	}
	if m.Snapshot != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Snapshot.Size()))
		n3, err := m.Snapshot.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *ClientsQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientsQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *ClientsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Clients) > 0 {
		for _, msg := range m.Clients {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *KnownEntityIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KnownEntityIds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *EntityQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntityQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *EntitySnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntitySnapshot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Active) > 0 {
		for _, msg := range m.Active {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Successful) > 0 {
		for _, msg := range m.Successful {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Failed) > 0 {
		for _, msg := range m.Failed {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LastAction != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.LastAction))
	}
	if m.Collected != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Collected))
	}
	return i, nil
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if m.Ports != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Ports.Size()))
		n4, err := m.Ports.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.AdvertisedPorts != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.AdvertisedPorts.Size()))
		n5, err := m.AdvertisedPorts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Zookeeper != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Zookeeper.Size()))
		n6, err := m.Zookeeper.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.LocalCache != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.LocalCache.Size()))
		n7, err := m.LocalCache.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.SharedCache != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.SharedCache.Size()))
		n8, err := m.SharedCache.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Scheduler != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Scheduler.Size()))
		n9, err := m.Scheduler.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Membership != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Membership.Size()))
		n10, err := m.Membership.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.History != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.History.Size()))
		n11, err := m.History.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Proxy != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Proxy.Size()))
		n12, err := m.Proxy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *Config_Ports) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config_Ports) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HttpInternal != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.HttpInternal))
	}
	if m.HttpExternal != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.HttpExternal))
	}
	if m.GrpcInternal != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.GrpcInternal))
	}
	if m.GrpcExternal != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.GrpcExternal))
	}
	return i, nil
}

func (m *Config_AdvertisedPorts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config_AdvertisedPorts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HttpInternal) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.HttpInternal)))
		i += copy(dAtA[i:], m.HttpInternal)
	}
	if len(m.HttpExternal) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.HttpExternal)))
		i += copy(dAtA[i:], m.HttpExternal)
	}
	if len(m.GrpcInternal) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.GrpcInternal)))
		i += copy(dAtA[i:], m.GrpcInternal)
	}
	if len(m.GrpcExternal) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGateway(dAtA, i, uint64(len(m.GrpcExternal)))
		i += copy(dAtA[i:], m.GrpcExternal)
	}
	return i, nil
}

func (m *Config_LocalCache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config_LocalCache) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Type))
	}
	if m.TtlSeconds != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.TtlSeconds))
	}
	if m.EvictIntervalSeconds != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.EvictIntervalSeconds))
	}
	if m.MaxLineSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.MaxLineSize))
	}
	if m.GcIntervalSeconds != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.GcIntervalSeconds))
	}
	return i, nil
}

func (m *Config_SharedCache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config_SharedCache) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Type))
	}
	if m.TtlSeconds != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.TtlSeconds))
	}
	if m.MembershipRefreshIntervalSeconds != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.MembershipRefreshIntervalSeconds))
	}
	if m.KeepaliveIntervalSeconds != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.KeepaliveIntervalSeconds))
	}
	if m.GcIntervalSeconds != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.GcIntervalSeconds))
	}
	return i, nil
}

func (m *Config_Scheduler) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config_Scheduler) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mesos != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Mesos.Size()))
		n13, err := m.Mesos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *Config_Scheduler_Mesos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config_Scheduler_Mesos) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Masters) > 0 {
		for _, s := range m.Masters {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.OfferRefuseSeconds != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.OfferRefuseSeconds))
	}
	return i, nil
}

func (m *Config_Zookeeper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config_Zookeeper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, s := range m.Endpoints {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.TimeoutSeconds != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.TimeoutSeconds))
	}
	return i, nil
}

func (m *Config_Membership) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config_Membership) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *Config_History) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config_History) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxSize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.MaxSize))
	}
	return i, nil
}

func (m *Config_Proxy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config_Proxy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AllocationTimeoutSeconds != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.AllocationTimeoutSeconds))
	}
	if m.AllocationAttempts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.AllocationAttempts))
	}
	if m.InactivityTimeoutSeconds != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.InactivityTimeoutSeconds))
	}
	return i, nil
}

func (m *HistoryBackup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryBackup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Completed) > 0 {
		for _, msg := range m.Completed {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.LastSeq) > 0 {
		for k, _ := range m.LastSeq {
			dAtA[i] = 0x12
			i++
			v := m.LastSeq[k]
			mapSize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + sovGateway(uint64(v))
			i = encodeVarintGateway(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintGateway(dAtA, i, uint64(v))
		}
	}
	if len(m.Clients) > 0 {
		for k, _ := range m.Clients {
			dAtA[i] = 0x1a
			i++
			v := m.Clients[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovGateway(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovGateway(uint64(len(k))) + msgSize
			i = encodeVarintGateway(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintGateway(dAtA, i, uint64(v.Size()))
				n14, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n14
			}
		}
	}
	if len(m.Tasks) > 0 {
		for k, _ := range m.Tasks {
			dAtA[i] = 0x22
			i++
			v := m.Tasks[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovGateway(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovGateway(uint64(len(k))) + msgSize
			i = encodeVarintGateway(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGateway(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintGateway(dAtA, i, uint64(v.Size()))
				n15, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n15
			}
		}
	}
	if m.LastSnapshot != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGateway(dAtA, i, uint64(m.LastSnapshot.Size()))
		n16, err := m.LastSnapshot.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func encodeFixed64Gateway(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Gateway(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGateway(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Client) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovGateway(uint64(m.State))
	}
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.TaskEndpoint)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Seqn != 0 {
		n += 1 + sovGateway(uint64(m.Seqn))
	}
	if m.Created != 0 {
		n += 1 + sovGateway(uint64(m.Created))
	}
	if m.Scheduled != 0 {
		n += 1 + sovGateway(uint64(m.Scheduled))
	}
	if m.Started != 0 {
		n += 1 + sovGateway(uint64(m.Started))
	}
	if m.Completed != 0 {
		n += 1 + sovGateway(uint64(m.Completed))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.MsgsOut != 0 {
		n += 2 + sovGateway(uint64(m.MsgsOut))
	}
	if m.BytesOut != 0 {
		n += 2 + sovGateway(uint64(m.BytesOut))
	}
	if m.MsgsIn != 0 {
		n += 2 + sovGateway(uint64(m.MsgsIn))
	}
	if m.BytesIn != 0 {
		n += 2 + sovGateway(uint64(m.BytesIn))
	}
	if m.StreamLength != 0 {
		n += 2 + sovGateway(uint64(m.StreamLength))
	}
	return n
}

func (m *Snapshot) Size() (n int) {
	var l int
	_ = l
	if m.Clients != nil {
		l = m.Clients.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.CachedLocalTasks) > 0 {
		for _, e := range m.CachedLocalTasks {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.BorrowedTasks) > 0 {
		for _, e := range m.BorrowedTasks {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.SharedTasks) > 0 {
		for _, e := range m.SharedTasks {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.Cluster) > 0 {
		for _, e := range m.Cluster {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	l = len(m.GatewayId)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Created)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *Snapshot_Member) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *Snapshot_Clients) Size() (n int) {
	var l int
	_ = l
	if len(m.Active) > 0 {
		for _, e := range m.Active {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.Completed) > 0 {
		for _, e := range m.Completed {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *MembershipSnapshot) Size() (n int) {
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	l = len(m.Created)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Collected != 0 {
		n += 1 + sovGateway(uint64(m.Collected))
	}
	return n
}

func (m *MembershipSnapshot_Member) Size() (n int) {
	var l int
	_ = l
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Snapshot != nil {
		l = m.Snapshot.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *ClientsQuery) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovGateway(uint64(m.Count))
	}
	return n
}

func (m *ClientsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Clients) > 0 {
		for _, e := range m.Clients {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *KnownEntityIds) Size() (n int) {
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *EntityQuery) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *EntitySnapshot) Size() (n int) {
	var l int
	_ = l
	if len(m.Active) > 0 {
		for _, e := range m.Active {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.Successful) > 0 {
		for _, e := range m.Successful {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.Failed) > 0 {
		for _, e := range m.Failed {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if m.LastAction != 0 {
		n += 1 + sovGateway(uint64(m.LastAction))
	}
	if m.Collected != 0 {
		n += 1 + sovGateway(uint64(m.Collected))
	}
	return n
}

func (m *Config) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Ports != nil {
		l = m.Ports.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.AdvertisedPorts != nil {
		l = m.AdvertisedPorts.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Zookeeper != nil {
		l = m.Zookeeper.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.LocalCache != nil {
		l = m.LocalCache.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.SharedCache != nil {
		l = m.SharedCache.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	if m.Scheduler != nil {
		l = m.Scheduler.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	if m.Membership != nil {
		l = m.Membership.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	if m.History != nil {
		l = m.History.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	if m.Proxy != nil {
		l = m.Proxy.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *Config_Ports) Size() (n int) {
	var l int
	_ = l
	if m.HttpInternal != 0 {
		n += 1 + sovGateway(uint64(m.HttpInternal))
	}
	if m.HttpExternal != 0 {
		n += 1 + sovGateway(uint64(m.HttpExternal))
	}
	if m.GrpcInternal != 0 {
		n += 1 + sovGateway(uint64(m.GrpcInternal))
	}
	if m.GrpcExternal != 0 {
		n += 1 + sovGateway(uint64(m.GrpcExternal))
	}
	return n
}

func (m *Config_AdvertisedPorts) Size() (n int) {
	var l int
	_ = l
	l = len(m.HttpInternal)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.HttpExternal)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.GrpcInternal)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.GrpcExternal)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *Config_LocalCache) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGateway(uint64(m.Type))
	}
	if m.TtlSeconds != 0 {
		n += 1 + sovGateway(uint64(m.TtlSeconds))
	}
	if m.EvictIntervalSeconds != 0 {
		n += 1 + sovGateway(uint64(m.EvictIntervalSeconds))
	}
	if m.MaxLineSize != 0 {
		n += 1 + sovGateway(uint64(m.MaxLineSize))
	}
	if m.GcIntervalSeconds != 0 {
		n += 1 + sovGateway(uint64(m.GcIntervalSeconds))
	}
	return n
}

func (m *Config_SharedCache) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGateway(uint64(m.Type))
	}
	if m.TtlSeconds != 0 {
		n += 1 + sovGateway(uint64(m.TtlSeconds))
	}
	if m.MembershipRefreshIntervalSeconds != 0 {
		n += 1 + sovGateway(uint64(m.MembershipRefreshIntervalSeconds))
	}
	if m.KeepaliveIntervalSeconds != 0 {
		n += 1 + sovGateway(uint64(m.KeepaliveIntervalSeconds))
	}
	if m.GcIntervalSeconds != 0 {
		n += 1 + sovGateway(uint64(m.GcIntervalSeconds))
	}
	return n
}

func (m *Config_Scheduler) Size() (n int) {
	var l int
	_ = l
	if m.Mesos != nil {
		l = m.Mesos.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *Config_Scheduler_Mesos) Size() (n int) {
	var l int
	_ = l
	if len(m.Masters) > 0 {
		for _, s := range m.Masters {
			l = len(s)
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if m.OfferRefuseSeconds != 0 {
		n += 1 + sovGateway(uint64(m.OfferRefuseSeconds))
	}
	return n
}

func (m *Config_Zookeeper) Size() (n int) {
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, s := range m.Endpoints {
			l = len(s)
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if m.TimeoutSeconds != 0 {
		n += 1 + sovGateway(uint64(m.TimeoutSeconds))
	}
	return n
}

func (m *Config_Membership) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGateway(uint64(m.Type))
	}
	return n
}

func (m *Config_History) Size() (n int) {
	var l int
	_ = l
	if m.MaxSize != 0 {
		n += 1 + sovGateway(uint64(m.MaxSize))
	}
	return n
}

func (m *Config_Proxy) Size() (n int) {
	var l int
	_ = l
	if m.AllocationTimeoutSeconds != 0 {
		n += 1 + sovGateway(uint64(m.AllocationTimeoutSeconds))
	}
	if m.AllocationAttempts != 0 {
		n += 1 + sovGateway(uint64(m.AllocationAttempts))
	}
	if m.InactivityTimeoutSeconds != 0 {
		n += 1 + sovGateway(uint64(m.InactivityTimeoutSeconds))
	}
	return n
}

func (m *HistoryBackup) Size() (n int) {
	var l int
	_ = l
	if len(m.Completed) > 0 {
		for _, e := range m.Completed {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.LastSeq) > 0 {
		for k, v := range m.LastSeq {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + sovGateway(uint64(v))
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if len(m.Clients) > 0 {
		for k, v := range m.Clients {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGateway(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if len(m.Tasks) > 0 {
		for k, v := range m.Tasks {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGateway(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if m.LastSnapshot != nil {
		l = m.LastSnapshot.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func sovGateway(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGateway(x uint64) (n int) {
	return sovGateway(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Client) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Client: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Client: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (Client_State(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &ntx_auth.NtxToken{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqn", wireType)
			}
			m.Seqn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seqn |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scheduled", wireType)
			}
			m.Scheduled = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scheduled |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Started", wireType)
			}
			m.Started = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Started |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			m.Completed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Completed |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgsOut", wireType)
			}
			m.MsgsOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgsOut |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesOut", wireType)
			}
			m.BytesOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesOut |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgsIn", wireType)
			}
			m.MsgsIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgsIn |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesIn", wireType)
			}
			m.BytesIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesIn |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamLength", wireType)
			}
			m.StreamLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamLength |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Snapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clients == nil {
				m.Clients = &Snapshot_Clients{}
			}
			if err := m.Clients.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CachedLocalTasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CachedLocalTasks = append(m.CachedLocalTasks, &ntx_scheduler.TaskSnapshot{})
			if err := m.CachedLocalTasks[len(m.CachedLocalTasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowedTasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorrowedTasks = append(m.BorrowedTasks, &ntx_scheduler.TaskSnapshot{})
			if err := m.BorrowedTasks[len(m.BorrowedTasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedTasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharedTasks = append(m.SharedTasks, &ntx_scheduler.TaskSnapshot{})
			if err := m.SharedTasks[len(m.SharedTasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = append(m.Cluster, &Snapshot_Member{})
			if err := m.Cluster[len(m.Cluster)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Created = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Snapshot_Member) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Snapshot_Clients) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Clients: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Clients: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Active = append(m.Active, &Client{})
			if err := m.Active[len(m.Active)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Completed = append(m.Completed, &Client{})
			if err := m.Completed[len(m.Completed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MembershipSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MembershipSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MembershipSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &MembershipSnapshot_Member{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Created = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collected", wireType)
			}
			m.Collected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Collected |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MembershipSnapshot_Member) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snapshot == nil {
				m.Snapshot = &Snapshot{}
			}
			if err := m.Snapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientsQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientsQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientsQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clients = append(m.Clients, &Client{})
			if err := m.Clients[len(m.Clients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KnownEntityIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KnownEntityIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KnownEntityIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntityQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntityQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntityQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntitySnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntitySnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntitySnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Active = append(m.Active, &Client{})
			if err := m.Active[len(m.Active)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Successful = append(m.Successful, &Client{})
			if err := m.Successful[len(m.Successful)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Failed = append(m.Failed, &Client{})
			if err := m.Failed[len(m.Failed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAction", wireType)
			}
			m.LastAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastAction |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collected", wireType)
			}
			m.Collected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Collected |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ports == nil {
				m.Ports = &Config_Ports{}
			}
			if err := m.Ports.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertisedPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdvertisedPorts == nil {
				m.AdvertisedPorts = &Config_AdvertisedPorts{}
			}
			if err := m.AdvertisedPorts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zookeeper", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Zookeeper == nil {
				m.Zookeeper = &Config_Zookeeper{}
			}
			if err := m.Zookeeper.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalCache", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalCache == nil {
				m.LocalCache = &Config_LocalCache{}
			}
			if err := m.LocalCache.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedCache", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SharedCache == nil {
				m.SharedCache = &Config_SharedCache{}
			}
			if err := m.SharedCache.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scheduler", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scheduler == nil {
				m.Scheduler = &Config_Scheduler{}
			}
			if err := m.Scheduler.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Membership", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Membership == nil {
				m.Membership = &Config_Membership{}
			}
			if err := m.Membership.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.History == nil {
				m.History = &Config_History{}
			}
			if err := m.History.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proxy == nil {
				m.Proxy = &Config_Proxy{}
			}
			if err := m.Proxy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config_Ports) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ports: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ports: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpInternal", wireType)
			}
			m.HttpInternal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpInternal |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpExternal", wireType)
			}
			m.HttpExternal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpExternal |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcInternal", wireType)
			}
			m.GrpcInternal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpcInternal |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcExternal", wireType)
			}
			m.GrpcExternal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpcExternal |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config_AdvertisedPorts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvertisedPorts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvertisedPorts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpInternal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpInternal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpExternal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpExternal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcInternal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrpcInternal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcExternal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrpcExternal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config_LocalCache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalCache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalCache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Config_LocalCache_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TtlSeconds", wireType)
			}
			m.TtlSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TtlSeconds |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvictIntervalSeconds", wireType)
			}
			m.EvictIntervalSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EvictIntervalSeconds |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLineSize", wireType)
			}
			m.MaxLineSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLineSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcIntervalSeconds", wireType)
			}
			m.GcIntervalSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GcIntervalSeconds |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config_SharedCache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SharedCache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SharedCache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Config_SharedCache_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TtlSeconds", wireType)
			}
			m.TtlSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TtlSeconds |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembershipRefreshIntervalSeconds", wireType)
			}
			m.MembershipRefreshIntervalSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MembershipRefreshIntervalSeconds |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepaliveIntervalSeconds", wireType)
			}
			m.KeepaliveIntervalSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeepaliveIntervalSeconds |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcIntervalSeconds", wireType)
			}
			m.GcIntervalSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GcIntervalSeconds |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config_Scheduler) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Scheduler: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Scheduler: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mesos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mesos == nil {
				m.Mesos = &Config_Scheduler_Mesos{}
			}
			if err := m.Mesos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config_Scheduler_Mesos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mesos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mesos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Masters = append(m.Masters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferRefuseSeconds", wireType)
			}
			m.OfferRefuseSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfferRefuseSeconds |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config_Zookeeper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Zookeeper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Zookeeper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutSeconds", wireType)
			}
			m.TimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutSeconds |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config_Membership) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Membership: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Membership: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Config_Membership_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config_History) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: History: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: History: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSize", wireType)
			}
			m.MaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config_Proxy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proxy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proxy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocationTimeoutSeconds", wireType)
			}
			m.AllocationTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocationTimeoutSeconds |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocationAttempts", wireType)
			}
			m.AllocationAttempts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocationAttempts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactivityTimeoutSeconds", wireType)
			}
			m.InactivityTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InactivityTimeoutSeconds |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryBackup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryBackup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryBackup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Completed = append(m.Completed, &Client{})
			if err := m.Completed[len(m.Completed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthGateway
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.LastSeq == nil {
				m.LastSeq = make(map[string]uint64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LastSeq[mapkey] = mapvalue
			} else {
				var mapvalue uint64
				m.LastSeq[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthGateway
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Clients == nil {
				m.Clients = make(map[string]*EntitySnapshot)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthGateway
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthGateway
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &EntitySnapshot{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Clients[mapkey] = mapvalue
			} else {
				var mapvalue *EntitySnapshot
				m.Clients[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthGateway
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Tasks == nil {
				m.Tasks = make(map[string]*EntitySnapshot)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthGateway
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthGateway
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &EntitySnapshot{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Tasks[mapkey] = mapvalue
			} else {
				var mapvalue *EntitySnapshot
				m.Tasks[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSnapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSnapshot == nil {
				m.LastSnapshot = &MembershipSnapshot{}
			}
			if err := m.LastSnapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGateway(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGateway
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGateway
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGateway(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGateway = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGateway   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ntx/gateway/gateway.proto", fileDescriptorGateway) }

var fileDescriptorGateway = []byte{
	// 1595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5d, 0x6f, 0x13, 0x57,
	0x13, 0x66, 0xfd, 0x19, 0x8f, 0xf3, 0xe1, 0xf7, 0xbc, 0xf0, 0x6a, 0xd9, 0x17, 0x52, 0x77, 0xa1,
	0x34, 0x2a, 0xd4, 0x29, 0x46, 0x2d, 0x14, 0xd4, 0x0a, 0x93, 0xb8, 0xe0, 0x92, 0x0f, 0x38, 0x36,
	0xa2, 0xe2, 0xa6, 0xda, 0xac, 0x4f, 0xe2, 0x55, 0xec, 0x5d, 0xb3, 0xe7, 0x38, 0x89, 0xf9, 0x23,
	0x94, 0xcb, 0xfe, 0x02, 0xee, 0x7a, 0xd1, 0x5f, 0xd0, 0x9b, 0x4a, 0xfd, 0x03, 0x95, 0x2a, 0xfa,
	0x3b, 0x2a, 0x55, 0xe7, 0x6b, 0x3f, 0x1c, 0x3b, 0x09, 0x12, 0x57, 0xd9, 0x99, 0x79, 0xe6, 0xd9,
	0xd9, 0x39, 0x33, 0x73, 0xc6, 0x81, 0x8b, 0x3e, 0x3b, 0x5a, 0xdd, 0x73, 0x18, 0x39, 0x74, 0xc6,
	0xfa, 0x6f, 0x6d, 0x18, 0x06, 0x2c, 0x40, 0x65, 0x9f, 0x1d, 0xd5, 0x94, 0xca, 0x32, 0x39, 0x8e,
	0xba, 0x3d, 0xd2, 0x1d, 0xf5, 0x49, 0xb8, 0xca, 0x1c, 0xba, 0x2f, 0x61, 0xd6, 0x79, 0x6e, 0x71,
	0x46, 0xac, 0xb7, 0xca, 0x82, 0x7d, 0xe2, 0x4b, 0xad, 0xfd, 0x36, 0x07, 0x85, 0xb5, 0xbe, 0x47,
	0x7c, 0x86, 0x16, 0x21, 0xe3, 0x75, 0x4d, 0xa3, 0x6a, 0xac, 0x94, 0x70, 0xc6, 0xeb, 0xa2, 0x55,
	0xc8, 0x53, 0xe6, 0x30, 0x62, 0x66, 0xaa, 0xc6, 0xca, 0x62, 0xfd, 0x62, 0x2d, 0xf1, 0x9e, 0x9a,
	0xf4, 0xa9, 0xb5, 0x39, 0x00, 0x4b, 0x1c, 0x5a, 0x81, 0xbc, 0xa0, 0x36, 0xb3, 0x55, 0x63, 0xa5,
	0x5c, 0x47, 0xc2, 0x81, 0xbf, 0xb1, 0xb6, 0xc5, 0x8e, 0x3a, 0xdc, 0x82, 0x25, 0x00, 0xfd, 0x0f,
	0x0a, 0x3c, 0xb2, 0x56, 0xd7, 0xcc, 0x89, 0xd7, 0x29, 0x09, 0xd9, 0x30, 0xcf, 0x9f, 0x9a, 0x7e,
	0x77, 0x18, 0x78, 0x3e, 0x33, 0xf3, 0xc2, 0x9a, 0xd2, 0x21, 0x04, 0x39, 0x4a, 0x5e, 0xfa, 0x66,
	0xa1, 0x6a, 0xac, 0xe4, 0xb0, 0x78, 0x46, 0x26, 0x14, 0xdd, 0x90, 0x38, 0x8c, 0x74, 0x4d, 0x10,
	0x6a, 0x2d, 0xa2, 0x4b, 0x50, 0xd2, 0xd9, 0xe8, 0x9a, 0x65, 0x61, 0x8b, 0x15, 0xdc, 0x8f, 0x32,
	0x27, 0xe4, 0x7e, 0xf3, 0xd2, 0x4f, 0x89, 0xdc, 0xcf, 0x0d, 0x06, 0xc3, 0x3e, 0xe1, 0xb6, 0x05,
	0xe9, 0x17, 0x29, 0xd0, 0x79, 0xc8, 0x93, 0x30, 0x0c, 0x42, 0x73, 0x49, 0x04, 0x28, 0x05, 0xce,
	0x36, 0xa0, 0x7b, 0x74, 0x7b, 0xc4, 0xcc, 0xaa, 0x64, 0x53, 0x22, 0xb2, 0x60, 0x6e, 0x67, 0xcc,
	0x88, 0x30, 0x7d, 0x2c, 0x4c, 0x91, 0xcc, 0x73, 0xc1, 0x61, 0x2d, 0xdf, 0xfc, 0x4c, 0x58, 0x94,
	0xc4, 0xd9, 0x04, 0xa6, 0xe5, 0x9b, 0xd7, 0x25, 0x9b, 0x12, 0x79, 0x96, 0x28, 0x0b, 0x89, 0x33,
	0xd8, 0x20, 0xfe, 0x1e, 0xeb, 0x99, 0xb7, 0x85, 0x39, 0xa5, 0xb3, 0x7f, 0x80, 0xbc, 0x38, 0x1b,
	0x54, 0x86, 0xe2, 0xd6, 0x76, 0xe7, 0xc7, 0x76, 0xb3, 0x53, 0x39, 0xc7, 0x85, 0xe7, 0x8d, 0x56,
	0xa7, 0xb5, 0xf5, 0xb0, 0x62, 0xa0, 0x05, 0x28, 0xb5, 0xd7, 0x1e, 0x35, 0xd7, 0x9f, 0x6d, 0x34,
	0xd7, 0x2b, 0x19, 0x6e, 0xc3, 0xcf, 0xb6, 0xb6, 0xb8, 0x2d, 0xcb, 0x6d, 0x6b, 0xdb, 0x9b, 0x4f,
	0x36, 0x9a, 0x9d, 0xe6, 0x7a, 0x25, 0x87, 0x00, 0x0a, 0xdf, 0x35, 0x5a, 0x1c, 0x97, 0xb7, 0x5f,
	0xe7, 0x60, 0xae, 0xed, 0x3b, 0x43, 0xda, 0x0b, 0x18, 0xba, 0x0d, 0x45, 0x57, 0x54, 0x02, 0x15,
	0x85, 0x53, 0xae, 0x5f, 0x4e, 0x55, 0x89, 0xc6, 0xa9, 0x72, 0xa1, 0x58, 0xa3, 0xd1, 0x43, 0xa8,
	0xb8, 0x0e, 0x3f, 0x87, 0x8d, 0xc0, 0x75, 0xfa, 0x1d, 0x87, 0xee, 0x53, 0x33, 0x5f, 0xcd, 0xae,
	0x94, 0xeb, 0xff, 0x17, 0x0c, 0x51, 0x09, 0xd7, 0xb8, 0x4d, 0xf3, 0xe0, 0x63, 0x4e, 0xa8, 0x01,
	0x0b, 0x3b, 0x41, 0x18, 0x06, 0x87, 0xa4, 0x2b, 0x59, 0x0a, 0xa7, 0xb3, 0xa4, 0x3d, 0xd0, 0x37,
	0x50, 0xa6, 0x3d, 0x27, 0xd4, 0x04, 0xc5, 0xd3, 0x09, 0x92, 0x78, 0xf4, 0x15, 0xcf, 0xc1, 0x88,
	0x32, 0x12, 0x9a, 0x20, 0x5c, 0x2f, 0x4d, 0xcf, 0xc1, 0x26, 0x19, 0xec, 0x90, 0x10, 0x6b, 0x30,
	0x2f, 0x31, 0x85, 0x69, 0x75, 0xcd, 0x45, 0x51, 0x48, 0xb1, 0x22, 0x59, 0xd2, 0xb2, 0xc8, 0xb4,
	0x68, 0xdd, 0x80, 0x82, 0xa4, 0x3a, 0xd6, 0xb1, 0x08, 0x72, 0xbd, 0x80, 0x32, 0xd1, 0xb0, 0x25,
	0x2c, 0x9e, 0x2d, 0x0f, 0x8a, 0x2a, 0xf9, 0xe8, 0x3a, 0x14, 0x1c, 0x97, 0x79, 0x07, 0xc4, 0x34,
	0x44, 0x9c, 0xff, 0x9d, 0xd2, 0xd1, 0x58, 0x41, 0xd0, 0xcd, 0x64, 0x03, 0x64, 0x66, 0xe3, 0x63,
	0x94, 0xfd, 0x8f, 0x01, 0x48, 0x46, 0x46, 0x7b, 0xde, 0x30, 0xaa, 0x91, 0xfb, 0x50, 0x1c, 0x48,
	0xad, 0x7a, 0xef, 0xb5, 0x14, 0xcf, 0x71, 0x8f, 0x28, 0x53, 0xca, 0x2d, 0x99, 0x8b, 0x4c, 0x2a,
	0x17, 0xb2, 0x4d, 0xfb, 0x7d, 0xe2, 0x72, 0x5b, 0x5e, 0xb7, 0xa9, 0x52, 0x58, 0x83, 0x28, 0x53,
	0x16, 0xcc, 0x11, 0x3d, 0x54, 0x64, 0xbe, 0x22, 0x19, 0xdd, 0x84, 0x39, 0xaa, 0xde, 0x2c, 0xe8,
	0xcb, 0xf5, 0x0b, 0x53, 0x0f, 0x10, 0x47, 0xb0, 0xb8, 0xff, 0xb3, 0x89, 0xfe, 0xb7, 0xaf, 0xc2,
	0xbc, 0x4a, 0xf5, 0xd3, 0x11, 0x09, 0xc7, 0x1c, 0xe5, 0x06, 0x23, 0xf5, 0xc6, 0x05, 0x2c, 0x05,
	0xfb, 0x3e, 0x2c, 0xe9, 0x6e, 0x20, 0x74, 0x18, 0xf8, 0x94, 0xa0, 0xcf, 0x93, 0x5d, 0x34, 0x33,
	0xd3, 0x1a, 0x63, 0xdb, 0xb0, 0xf8, 0xd8, 0x0f, 0x0e, 0xfd, 0xa6, 0xcf, 0x3c, 0x36, 0x6e, 0x75,
	0x29, 0xaa, 0x40, 0xd6, 0xeb, 0x4a, 0xe7, 0x12, 0xe6, 0x8f, 0xf6, 0x65, 0x28, 0x4b, 0xb3, 0x0c,
	0x65, 0xa2, 0x52, 0xec, 0x3f, 0x0d, 0x58, 0x94, 0xf6, 0xe8, 0x98, 0xde, 0xab, 0x3a, 0x6e, 0x01,
	0xd0, 0x91, 0xeb, 0x12, 0x4a, 0x77, 0x47, 0xfd, 0x93, 0xca, 0x23, 0x01, 0xe3, 0x6f, 0xd8, 0x75,
	0x3c, 0x3e, 0x88, 0xb3, 0x27, 0xbc, 0x41, 0x42, 0xd0, 0x32, 0x40, 0xdf, 0xa1, 0xac, 0xe1, 0x32,
	0x2f, 0xf0, 0xc5, 0x35, 0x91, 0xc3, 0x09, 0xcd, 0xc9, 0x27, 0x6f, 0xff, 0x5a, 0x81, 0xc2, 0x5a,
	0xe0, 0xef, 0x7a, 0x7b, 0x67, 0x69, 0x12, 0x7e, 0xd5, 0x0d, 0x83, 0x90, 0x51, 0x71, 0x43, 0x94,
	0x27, 0xaf, 0x3a, 0xc1, 0x53, 0x7b, 0xc2, 0x01, 0x58, 0xe2, 0xd0, 0x26, 0x2c, 0x39, 0xdd, 0x03,
	0x12, 0x32, 0x8f, 0x92, 0xae, 0xb0, 0x88, 0x0b, 0xa4, 0x5c, 0xbf, 0x32, 0xcd, 0xb5, 0x91, 0x86,
	0xe2, 0x49, 0x5f, 0x74, 0x0f, 0x4a, 0xaf, 0x82, 0x60, 0x9f, 0x90, 0x21, 0x09, 0xc5, 0x28, 0x98,
	0x1c, 0xa4, 0x8a, 0xe8, 0x85, 0x06, 0xe1, 0x18, 0x8f, 0xbe, 0x05, 0xe8, 0xf3, 0x79, 0xb8, 0xc6,
	0x47, 0xa3, 0x18, 0x16, 0xe5, 0xfa, 0xf2, 0x34, 0xef, 0x8d, 0x08, 0x85, 0x13, 0x1e, 0xa8, 0xa1,
	0xc7, 0x9f, 0x24, 0x40, 0x82, 0xe0, 0xa3, 0x69, 0x04, 0xed, 0x18, 0x86, 0x93, 0x3e, 0x3c, 0xfe,
	0x68, 0x52, 0x9a, 0x17, 0x66, 0xc7, 0xdf, 0xd6, 0xa0, 0xf8, 0x12, 0x16, 0xf1, 0x0f, 0xa2, 0x19,
	0x60, 0x9a, 0xb3, 0xe3, 0x8f, 0x27, 0x05, 0x4e, 0x78, 0xa0, 0x2f, 0xa1, 0xd8, 0xf3, 0x28, 0x0b,
	0xc2, 0xb1, 0xb8, 0x5b, 0xf5, 0xe8, 0x9e, 0x70, 0x7e, 0x24, 0x21, 0x58, 0x63, 0xc5, 0x99, 0x87,
	0xc1, 0xd1, 0xd8, 0xbc, 0x7a, 0xc2, 0x99, 0x73, 0x00, 0x96, 0x38, 0xeb, 0xb5, 0x01, 0x79, 0x79,
	0x5c, 0x36, 0xcc, 0xf7, 0x18, 0x1b, 0xb6, 0x7c, 0x46, 0x42, 0xdf, 0xe9, 0x8b, 0xe2, 0xca, 0xe1,
	0x94, 0x4e, 0x63, 0x9a, 0x47, 0x0a, 0x93, 0x89, 0x31, 0x5a, 0xc7, 0x31, 0x7b, 0xe1, 0xd0, 0x8d,
	0x78, 0xb2, 0x12, 0x93, 0xd4, 0x69, 0x4c, 0xc4, 0x93, 0x8b, 0x31, 0x5a, 0x67, 0xfd, 0x6c, 0xc0,
	0xd2, 0x44, 0x8d, 0x4d, 0x8d, 0xb1, 0x74, 0x86, 0x18, 0x4b, 0x67, 0x88, 0xb1, 0x74, 0x86, 0x18,
	0x4b, 0x13, 0x31, 0xbe, 0xc9, 0x00, 0xc4, 0x05, 0x88, 0x6e, 0x43, 0x8e, 0x8d, 0x87, 0x44, 0x84,
	0xb5, 0x38, 0xbd, 0x6b, 0x62, 0x74, 0xad, 0x33, 0x1e, 0x12, 0x2c, 0x1c, 0xf8, 0x5c, 0x60, 0xac,
	0xdf, 0x26, 0x6e, 0xe0, 0x77, 0xa9, 0xca, 0x6a, 0x42, 0x83, 0xea, 0x70, 0x9e, 0x1c, 0x78, 0x2e,
	0x13, 0xc1, 0x1d, 0x38, 0x11, 0x52, 0xe6, 0x76, 0xaa, 0x0d, 0x55, 0xa1, 0x3c, 0x70, 0x8e, 0x36,
	0x3c, 0x9f, 0xb4, 0xbd, 0x57, 0x44, 0xa5, 0x38, 0xa9, 0x42, 0x37, 0xe0, 0x3f, 0x7b, 0xee, 0x24,
	0xa5, 0x9c, 0x3a, 0xc7, 0x0d, 0x76, 0x0d, 0x72, 0x3c, 0xe2, 0xf4, 0xee, 0x35, 0x0f, 0x73, 0xeb,
	0xad, 0x76, 0xe3, 0x01, 0xdf, 0xa2, 0x0c, 0x6e, 0x6a, 0x6e, 0x49, 0x21, 0x63, 0xfd, 0x9e, 0x81,
	0x72, 0xa2, 0xb7, 0xd0, 0x9d, 0x54, 0x72, 0xae, 0x9e, 0xd2, 0x8a, 0xef, 0x93, 0x9d, 0xef, 0xa1,
	0x1a, 0x77, 0x0e, 0x26, 0xbb, 0x21, 0xa1, 0xbd, 0xc9, 0xcf, 0x92, 0x9f, 0x7f, 0x2a, 0x0e, 0xdd,
	0x05, 0x93, 0x4f, 0x20, 0xa7, 0xef, 0x1d, 0x90, 0xe9, 0xa9, 0x99, 0x69, 0x9f, 0x9e, 0xcf, 0xe2,
	0x87, 0xca, 0xe7, 0x1b, 0x03, 0x4a, 0xd1, 0xa8, 0x41, 0x5f, 0x43, 0x7e, 0x40, 0x68, 0xa0, 0x37,
	0xd4, 0x2b, 0x27, 0x0e, 0xa6, 0xda, 0x26, 0x87, 0x62, 0xe9, 0x61, 0x3d, 0x85, 0xbc, 0x90, 0xc5,
	0x6a, 0xef, 0xf0, 0xad, 0x4d, 0x5f, 0xb2, 0x5a, 0x44, 0x35, 0x40, 0xc1, 0xee, 0x2e, 0x09, 0x31,
	0xd9, 0x1d, 0x51, 0x92, 0xce, 0xe1, 0x14, 0x8b, 0xf5, 0x14, 0x4a, 0xd1, 0x14, 0xe7, 0x97, 0x98,
	0x5e, 0x43, 0x34, 0x71, 0xac, 0x40, 0xd7, 0x60, 0x91, 0x79, 0x03, 0x12, 0x8c, 0x58, 0xfa, 0x40,
	0x27, 0xb4, 0xd6, 0x21, 0x40, 0x3c, 0x1a, 0xcf, 0xd2, 0x59, 0x31, 0x3a, 0x51, 0x3b, 0xf6, 0x17,
	0xa7, 0x67, 0x79, 0x01, 0x4a, 0x2f, 0xb6, 0xb7, 0x1f, 0x37, 0x9b, 0x4f, 0x9a, 0xb8, 0x92, 0xb1,
	0xae, 0x40, 0x51, 0x8d, 0x55, 0x99, 0xa0, 0x23, 0xd1, 0x3e, 0x86, 0xfa, 0xed, 0x23, 0x45, 0xeb,
	0x2d, 0x1f, 0x9b, 0x7c, 0x80, 0xf2, 0x82, 0x71, 0xfa, 0xfc, 0xe2, 0xe1, 0x17, 0x78, 0x27, 0xfd,
	0x65, 0xd2, 0x69, 0xa6, 0x9d, 0xa7, 0x39, 0xb6, 0x35, 0x18, 0x23, 0x83, 0x21, 0xd3, 0xf9, 0x98,
	0x62, 0xe1, 0xef, 0xf2, 0x7c, 0xb1, 0xac, 0x78, 0x6c, 0x3c, 0xf1, 0x2e, 0x39, 0x0a, 0x66, 0xda,
	0xed, 0x5f, 0x72, 0xb0, 0xa0, 0xbe, 0xeb, 0x81, 0xe3, 0xee, 0x8f, 0x86, 0xe9, 0x65, 0xd8, 0x38,
	0xcb, 0x32, 0x8c, 0x1a, 0x50, 0xe4, 0xdb, 0x4a, 0x9b, 0xbc, 0x54, 0xeb, 0xd1, 0xa7, 0x29, 0x87,
	0x14, 0x7f, 0x6d, 0x43, 0x22, 0x9b, 0x3e, 0xe3, 0x37, 0x94, 0xf2, 0xe3, 0x14, 0x7a, 0x2d, 0xcc,
	0x9e, 0x4a, 0xa1, 0x76, 0x4a, 0x45, 0xa1, 0x7f, 0x66, 0xdd, 0x83, 0x3c, 0x13, 0x3f, 0x6a, 0x72,
	0x82, 0xe0, 0x93, 0x13, 0x08, 0xc4, 0x8f, 0x19, 0xe9, 0x2e, 0x7d, 0xd0, 0x1a, 0xcc, 0x8b, 0x50,
	0xf4, 0x72, 0x9c, 0x9f, 0xb2, 0x19, 0x1c, 0xdf, 0xde, 0x71, 0xca, 0xc9, 0xba, 0x0b, 0xf3, 0xc9,
	0xaf, 0xe3, 0xab, 0xea, 0x3e, 0x19, 0xab, 0xeb, 0x88, 0x3f, 0xf2, 0x35, 0xf9, 0xc0, 0xe9, 0x8f,
	0x88, 0x3a, 0x4d, 0x29, 0xdc, 0xcd, 0xdc, 0x31, 0xac, 0xe7, 0xd1, 0x42, 0x3d, 0xcb, 0xf7, 0x66,
	0xd2, 0x77, 0xf2, 0xe6, 0x4f, 0x2f, 0xb8, 0x49, 0xe2, 0x67, 0x00, 0xf1, 0xe7, 0x7e, 0x30, 0xda,
	0x07, 0x17, 0x7f, 0x7b, 0xb7, 0x6c, 0xfc, 0xf1, 0x6e, 0xd9, 0xf8, 0xeb, 0xdd, 0xb2, 0xf1, 0xd3,
	0xdf, 0xcb, 0xe7, 0x5e, 0x14, 0x95, 0xd3, 0x4e, 0x41, 0xfc, 0xbb, 0xe5, 0xd6, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x73, 0xb5, 0x81, 0xcd, 0xc8, 0x11, 0x00, 0x00,
}
