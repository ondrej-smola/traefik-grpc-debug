// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ntx/v2t/engine/engine.proto

/*
	Package engine is a generated protocol buffer package.

	It is generated from these files:
		ntx/v2t/engine/engine.proto
		ntx/v2t/engine/g2p.proto

	It has these top-level messages:
		Event
		Events
		Lexicon
		AudioFormat
		EngineContext
		EngineContextStart
		EngineContextEnd
		EventsPush
		EventsPull
		EngineStream
		G2PTranscription
		G2PRequest
		G2PResponse
		G2PLanguagesRequest
		G2PLanguagesResponse
*/
package engine

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EngineModule int32

const (
	EngineModule_MODULE_NONE EngineModule = 0
	EngineModule_MODULE_VAD  EngineModule = 1
	EngineModule_MODULE_V2T  EngineModule = 5
	EngineModule_MODULE_PPC  EngineModule = 11
	EngineModule_MODULE_PNC  EngineModule = 15
)

var EngineModule_name = map[int32]string{
	0:  "MODULE_NONE",
	1:  "MODULE_VAD",
	5:  "MODULE_V2T",
	11: "MODULE_PPC",
	15: "MODULE_PNC",
}
var EngineModule_value = map[string]int32{
	"MODULE_NONE": 0,
	"MODULE_VAD":  1,
	"MODULE_V2T":  5,
	"MODULE_PPC":  11,
	"MODULE_PNC":  15,
}

func (x EngineModule) String() string {
	return proto.EnumName(EngineModule_name, int32(x))
}
func (EngineModule) EnumDescriptor() ([]byte, []int) { return fileDescriptorEngine, []int{0} }

type AudioFormat_ChannelLayout int32

const (
	AudioFormat_AUDIO_CHANNEL_LAYOUT_NONE   AudioFormat_ChannelLayout = 0
	AudioFormat_AUDIO_CHANNEL_LAYOUT_MONO   AudioFormat_ChannelLayout = 1
	AudioFormat_AUDIO_CHANNEL_LAYOUT_STEREO AudioFormat_ChannelLayout = 2
)

var AudioFormat_ChannelLayout_name = map[int32]string{
	0: "AUDIO_CHANNEL_LAYOUT_NONE",
	1: "AUDIO_CHANNEL_LAYOUT_MONO",
	2: "AUDIO_CHANNEL_LAYOUT_STEREO",
}
var AudioFormat_ChannelLayout_value = map[string]int32{
	"AUDIO_CHANNEL_LAYOUT_NONE":   0,
	"AUDIO_CHANNEL_LAYOUT_MONO":   1,
	"AUDIO_CHANNEL_LAYOUT_STEREO": 2,
}

func (x AudioFormat_ChannelLayout) String() string {
	return proto.EnumName(AudioFormat_ChannelLayout_name, int32(x))
}
func (AudioFormat_ChannelLayout) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorEngine, []int{3, 0}
}

type AudioFormat_SampleFormat int32

const (
	AudioFormat_AUDIO_SAMPLE_FORMAT_NONE  AudioFormat_SampleFormat = 0
	AudioFormat_AUDIO_SAMPLE_FORMAT_ALAW  AudioFormat_SampleFormat = 1
	AudioFormat_AUDIO_SAMPLE_FORMAT_F32BE AudioFormat_SampleFormat = 2
	AudioFormat_AUDIO_SAMPLE_FORMAT_F32LE AudioFormat_SampleFormat = 3
	AudioFormat_AUDIO_SAMPLE_FORMAT_F64BE AudioFormat_SampleFormat = 4
	AudioFormat_AUDIO_SAMPLE_FORMAT_F64LE AudioFormat_SampleFormat = 5
	AudioFormat_AUDIO_SAMPLE_FORMAT_MULAW AudioFormat_SampleFormat = 6
	AudioFormat_AUDIO_SAMPLE_FORMAT_S16BE AudioFormat_SampleFormat = 7
	AudioFormat_AUDIO_SAMPLE_FORMAT_S16LE AudioFormat_SampleFormat = 8
	AudioFormat_AUDIO_SAMPLE_FORMAT_S24BE AudioFormat_SampleFormat = 9
	AudioFormat_AUDIO_SAMPLE_FORMAT_S24LE AudioFormat_SampleFormat = 10
	AudioFormat_AUDIO_SAMPLE_FORMAT_S32BE AudioFormat_SampleFormat = 11
	AudioFormat_AUDIO_SAMPLE_FORMAT_S32LE AudioFormat_SampleFormat = 12
	AudioFormat_AUDIO_SAMPLE_FORMAT_S8    AudioFormat_SampleFormat = 13
	AudioFormat_AUDIO_SAMPLE_FORMAT_U16BE AudioFormat_SampleFormat = 14
	AudioFormat_AUDIO_SAMPLE_FORMAT_U16LE AudioFormat_SampleFormat = 15
	AudioFormat_AUDIO_SAMPLE_FORMAT_U24BE AudioFormat_SampleFormat = 16
	AudioFormat_AUDIO_SAMPLE_FORMAT_U24LE AudioFormat_SampleFormat = 17
	AudioFormat_AUDIO_SAMPLE_FORMAT_U32BE AudioFormat_SampleFormat = 18
	AudioFormat_AUDIO_SAMPLE_FORMAT_U32LE AudioFormat_SampleFormat = 19
	AudioFormat_AUDIO_SAMPLE_FORMAT_U8    AudioFormat_SampleFormat = 20
)

var AudioFormat_SampleFormat_name = map[int32]string{
	0:  "AUDIO_SAMPLE_FORMAT_NONE",
	1:  "AUDIO_SAMPLE_FORMAT_ALAW",
	2:  "AUDIO_SAMPLE_FORMAT_F32BE",
	3:  "AUDIO_SAMPLE_FORMAT_F32LE",
	4:  "AUDIO_SAMPLE_FORMAT_F64BE",
	5:  "AUDIO_SAMPLE_FORMAT_F64LE",
	6:  "AUDIO_SAMPLE_FORMAT_MULAW",
	7:  "AUDIO_SAMPLE_FORMAT_S16BE",
	8:  "AUDIO_SAMPLE_FORMAT_S16LE",
	9:  "AUDIO_SAMPLE_FORMAT_S24BE",
	10: "AUDIO_SAMPLE_FORMAT_S24LE",
	11: "AUDIO_SAMPLE_FORMAT_S32BE",
	12: "AUDIO_SAMPLE_FORMAT_S32LE",
	13: "AUDIO_SAMPLE_FORMAT_S8",
	14: "AUDIO_SAMPLE_FORMAT_U16BE",
	15: "AUDIO_SAMPLE_FORMAT_U16LE",
	16: "AUDIO_SAMPLE_FORMAT_U24BE",
	17: "AUDIO_SAMPLE_FORMAT_U24LE",
	18: "AUDIO_SAMPLE_FORMAT_U32BE",
	19: "AUDIO_SAMPLE_FORMAT_U32LE",
	20: "AUDIO_SAMPLE_FORMAT_U8",
}
var AudioFormat_SampleFormat_value = map[string]int32{
	"AUDIO_SAMPLE_FORMAT_NONE":  0,
	"AUDIO_SAMPLE_FORMAT_ALAW":  1,
	"AUDIO_SAMPLE_FORMAT_F32BE": 2,
	"AUDIO_SAMPLE_FORMAT_F32LE": 3,
	"AUDIO_SAMPLE_FORMAT_F64BE": 4,
	"AUDIO_SAMPLE_FORMAT_F64LE": 5,
	"AUDIO_SAMPLE_FORMAT_MULAW": 6,
	"AUDIO_SAMPLE_FORMAT_S16BE": 7,
	"AUDIO_SAMPLE_FORMAT_S16LE": 8,
	"AUDIO_SAMPLE_FORMAT_S24BE": 9,
	"AUDIO_SAMPLE_FORMAT_S24LE": 10,
	"AUDIO_SAMPLE_FORMAT_S32BE": 11,
	"AUDIO_SAMPLE_FORMAT_S32LE": 12,
	"AUDIO_SAMPLE_FORMAT_S8":    13,
	"AUDIO_SAMPLE_FORMAT_U16BE": 14,
	"AUDIO_SAMPLE_FORMAT_U16LE": 15,
	"AUDIO_SAMPLE_FORMAT_U24BE": 16,
	"AUDIO_SAMPLE_FORMAT_U24LE": 17,
	"AUDIO_SAMPLE_FORMAT_U32BE": 18,
	"AUDIO_SAMPLE_FORMAT_U32LE": 19,
	"AUDIO_SAMPLE_FORMAT_U8":    20,
}

func (x AudioFormat_SampleFormat) String() string {
	return proto.EnumName(AudioFormat_SampleFormat_name, int32(x))
}
func (AudioFormat_SampleFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorEngine, []int{3, 1}
}

type AudioFormat_SampleRate int32

const (
	AudioFormat_AUDIO_SAMPLE_RATE_NONE  AudioFormat_SampleRate = 0
	AudioFormat_AUDIO_SAMPLE_RATE_8000  AudioFormat_SampleRate = 1
	AudioFormat_AUDIO_SAMPLE_RATE_16000 AudioFormat_SampleRate = 2
	AudioFormat_AUDIO_SAMPLE_RATE_32000 AudioFormat_SampleRate = 3
	AudioFormat_AUDIO_SAMPLE_RATE_48000 AudioFormat_SampleRate = 4
	AudioFormat_AUDIO_SAMPLE_RATE_96000 AudioFormat_SampleRate = 5
	AudioFormat_AUDIO_SAMPLE_RATE_11025 AudioFormat_SampleRate = 6
	AudioFormat_AUDIO_SAMPLE_RATE_22050 AudioFormat_SampleRate = 7
	AudioFormat_AUDIO_SAMPLE_RATE_44100 AudioFormat_SampleRate = 8
)

var AudioFormat_SampleRate_name = map[int32]string{
	0: "AUDIO_SAMPLE_RATE_NONE",
	1: "AUDIO_SAMPLE_RATE_8000",
	2: "AUDIO_SAMPLE_RATE_16000",
	3: "AUDIO_SAMPLE_RATE_32000",
	4: "AUDIO_SAMPLE_RATE_48000",
	5: "AUDIO_SAMPLE_RATE_96000",
	6: "AUDIO_SAMPLE_RATE_11025",
	7: "AUDIO_SAMPLE_RATE_22050",
	8: "AUDIO_SAMPLE_RATE_44100",
}
var AudioFormat_SampleRate_value = map[string]int32{
	"AUDIO_SAMPLE_RATE_NONE":  0,
	"AUDIO_SAMPLE_RATE_8000":  1,
	"AUDIO_SAMPLE_RATE_16000": 2,
	"AUDIO_SAMPLE_RATE_32000": 3,
	"AUDIO_SAMPLE_RATE_48000": 4,
	"AUDIO_SAMPLE_RATE_96000": 5,
	"AUDIO_SAMPLE_RATE_11025": 6,
	"AUDIO_SAMPLE_RATE_22050": 7,
	"AUDIO_SAMPLE_RATE_44100": 8,
}

func (x AudioFormat_SampleRate) String() string {
	return proto.EnumName(AudioFormat_SampleRate_name, int32(x))
}
func (AudioFormat_SampleRate) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorEngine, []int{3, 2}
}

type EngineContext_AudioChannel int32

const (
	EngineContext_AUDIO_CHANNEL_DOWNMIX EngineContext_AudioChannel = 0
	EngineContext_AUDIO_CHANNEL_LEFT    EngineContext_AudioChannel = 1
	EngineContext_AUDIO_CHANNEL_RIGHT   EngineContext_AudioChannel = 2
)

var EngineContext_AudioChannel_name = map[int32]string{
	0: "AUDIO_CHANNEL_DOWNMIX",
	1: "AUDIO_CHANNEL_LEFT",
	2: "AUDIO_CHANNEL_RIGHT",
}
var EngineContext_AudioChannel_value = map[string]int32{
	"AUDIO_CHANNEL_DOWNMIX": 0,
	"AUDIO_CHANNEL_LEFT":    1,
	"AUDIO_CHANNEL_RIGHT":   2,
}

func (x EngineContext_AudioChannel) String() string {
	return proto.EnumName(EngineContext_AudioChannel_name, int32(x))
}
func (EngineContext_AudioChannel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorEngine, []int{4, 0}
}

type Event struct {
	// Types that are valid to be assigned to Body:
	//	*Event_Timestamp_
	//	*Event_Label_
	//	*Event_Audio_
	//	*Event_Meta_
	Body isEvent_Body `protobuf_oneof:"body"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{0} }

type isEvent_Body interface {
	isEvent_Body()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_Timestamp_ struct {
	Timestamp *Event_Timestamp `protobuf:"bytes,1,opt,name=timestamp,oneof"`
}
type Event_Label_ struct {
	Label *Event_Label `protobuf:"bytes,2,opt,name=label,oneof"`
}
type Event_Audio_ struct {
	Audio *Event_Audio `protobuf:"bytes,3,opt,name=audio,oneof"`
}
type Event_Meta_ struct {
	Meta *Event_Meta `protobuf:"bytes,4,opt,name=meta,oneof"`
}

func (*Event_Timestamp_) isEvent_Body() {}
func (*Event_Label_) isEvent_Body()     {}
func (*Event_Audio_) isEvent_Body()     {}
func (*Event_Meta_) isEvent_Body()      {}

func (m *Event) GetBody() isEvent_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Event) GetTimestamp() *Event_Timestamp {
	if x, ok := m.GetBody().(*Event_Timestamp_); ok {
		return x.Timestamp
	}
	return nil
}

func (m *Event) GetLabel() *Event_Label {
	if x, ok := m.GetBody().(*Event_Label_); ok {
		return x.Label
	}
	return nil
}

func (m *Event) GetAudio() *Event_Audio {
	if x, ok := m.GetBody().(*Event_Audio_); ok {
		return x.Audio
	}
	return nil
}

func (m *Event) GetMeta() *Event_Meta {
	if x, ok := m.GetBody().(*Event_Meta_); ok {
		return x.Meta
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_Timestamp_)(nil),
		(*Event_Label_)(nil),
		(*Event_Audio_)(nil),
		(*Event_Meta_)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// body
	switch x := m.Body.(type) {
	case *Event_Timestamp_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Timestamp); err != nil {
			return err
		}
	case *Event_Label_:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Label); err != nil {
			return err
		}
	case *Event_Audio_:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Audio); err != nil {
			return err
		}
	case *Event_Meta_:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Meta); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Body has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 1: // body.timestamp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Event_Timestamp)
		err := b.DecodeMessage(msg)
		m.Body = &Event_Timestamp_{msg}
		return true, err
	case 2: // body.label
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Event_Label)
		err := b.DecodeMessage(msg)
		m.Body = &Event_Label_{msg}
		return true, err
	case 3: // body.audio
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Event_Audio)
		err := b.DecodeMessage(msg)
		m.Body = &Event_Audio_{msg}
		return true, err
	case 4: // body.meta
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Event_Meta)
		err := b.DecodeMessage(msg)
		m.Body = &Event_Meta_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// body
	switch x := m.Body.(type) {
	case *Event_Timestamp_:
		s := proto.Size(x.Timestamp)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Label_:
		s := proto.Size(x.Label)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Audio_:
		s := proto.Size(x.Audio)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Meta_:
		s := proto.Size(x.Meta)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Event_Timestamp struct {
	// Types that are valid to be assigned to Value:
	//	*Event_Timestamp_Timestamp
	//	*Event_Timestamp_Recovery
	Value isEvent_Timestamp_Value `protobuf_oneof:"value"`
}

func (m *Event_Timestamp) Reset()                    { *m = Event_Timestamp{} }
func (m *Event_Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Event_Timestamp) ProtoMessage()               {}
func (*Event_Timestamp) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{0, 0} }

type isEvent_Timestamp_Value interface {
	isEvent_Timestamp_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_Timestamp_Timestamp struct {
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3,oneof"`
}
type Event_Timestamp_Recovery struct {
	Recovery uint64 `protobuf:"varint,2,opt,name=recovery,proto3,oneof"`
}

func (*Event_Timestamp_Timestamp) isEvent_Timestamp_Value() {}
func (*Event_Timestamp_Recovery) isEvent_Timestamp_Value()  {}

func (m *Event_Timestamp) GetValue() isEvent_Timestamp_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Event_Timestamp) GetTimestamp() uint64 {
	if x, ok := m.GetValue().(*Event_Timestamp_Timestamp); ok {
		return x.Timestamp
	}
	return 0
}

func (m *Event_Timestamp) GetRecovery() uint64 {
	if x, ok := m.GetValue().(*Event_Timestamp_Recovery); ok {
		return x.Recovery
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event_Timestamp) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_Timestamp_OneofMarshaler, _Event_Timestamp_OneofUnmarshaler, _Event_Timestamp_OneofSizer, []interface{}{
		(*Event_Timestamp_Timestamp)(nil),
		(*Event_Timestamp_Recovery)(nil),
	}
}

func _Event_Timestamp_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event_Timestamp)
	// value
	switch x := m.Value.(type) {
	case *Event_Timestamp_Timestamp:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Timestamp))
	case *Event_Timestamp_Recovery:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Recovery))
	case nil:
	default:
		return fmt.Errorf("Event_Timestamp.Value has unexpected type %T", x)
	}
	return nil
}

func _Event_Timestamp_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event_Timestamp)
	switch tag {
	case 1: // value.timestamp
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Event_Timestamp_Timestamp{x}
		return true, err
	case 2: // value.recovery
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Event_Timestamp_Recovery{x}
		return true, err
	default:
		return false, nil
	}
}

func _Event_Timestamp_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event_Timestamp)
	// value
	switch x := m.Value.(type) {
	case *Event_Timestamp_Timestamp:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Timestamp))
	case *Event_Timestamp_Recovery:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Recovery))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Event_Label struct {
	// Types that are valid to be assigned to Label:
	//	*Event_Label_Item
	//	*Event_Label_Plus
	//	*Event_Label_Noise
	Label isEvent_Label_Label `protobuf_oneof:"label"`
}

func (m *Event_Label) Reset()                    { *m = Event_Label{} }
func (m *Event_Label) String() string            { return proto.CompactTextString(m) }
func (*Event_Label) ProtoMessage()               {}
func (*Event_Label) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{0, 1} }

type isEvent_Label_Label interface {
	isEvent_Label_Label()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_Label_Item struct {
	Item string `protobuf:"bytes,1,opt,name=item,proto3,oneof"`
}
type Event_Label_Plus struct {
	Plus string `protobuf:"bytes,2,opt,name=plus,proto3,oneof"`
}
type Event_Label_Noise struct {
	Noise string `protobuf:"bytes,3,opt,name=noise,proto3,oneof"`
}

func (*Event_Label_Item) isEvent_Label_Label()  {}
func (*Event_Label_Plus) isEvent_Label_Label()  {}
func (*Event_Label_Noise) isEvent_Label_Label() {}

func (m *Event_Label) GetLabel() isEvent_Label_Label {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Event_Label) GetItem() string {
	if x, ok := m.GetLabel().(*Event_Label_Item); ok {
		return x.Item
	}
	return ""
}

func (m *Event_Label) GetPlus() string {
	if x, ok := m.GetLabel().(*Event_Label_Plus); ok {
		return x.Plus
	}
	return ""
}

func (m *Event_Label) GetNoise() string {
	if x, ok := m.GetLabel().(*Event_Label_Noise); ok {
		return x.Noise
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event_Label) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_Label_OneofMarshaler, _Event_Label_OneofUnmarshaler, _Event_Label_OneofSizer, []interface{}{
		(*Event_Label_Item)(nil),
		(*Event_Label_Plus)(nil),
		(*Event_Label_Noise)(nil),
	}
}

func _Event_Label_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event_Label)
	// label
	switch x := m.Label.(type) {
	case *Event_Label_Item:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Item)
	case *Event_Label_Plus:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Plus)
	case *Event_Label_Noise:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Noise)
	case nil:
	default:
		return fmt.Errorf("Event_Label.Label has unexpected type %T", x)
	}
	return nil
}

func _Event_Label_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event_Label)
	switch tag {
	case 1: // label.item
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Label = &Event_Label_Item{x}
		return true, err
	case 2: // label.plus
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Label = &Event_Label_Plus{x}
		return true, err
	case 3: // label.noise
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Label = &Event_Label_Noise{x}
		return true, err
	default:
		return false, nil
	}
}

func _Event_Label_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event_Label)
	// label
	switch x := m.Label.(type) {
	case *Event_Label_Item:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Item)))
		n += len(x.Item)
	case *Event_Label_Plus:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Plus)))
		n += len(x.Plus)
	case *Event_Label_Noise:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Noise)))
		n += len(x.Noise)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Event_Audio struct {
	Body     []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Offset   uint64 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Duration uint64 `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *Event_Audio) Reset()                    { *m = Event_Audio{} }
func (m *Event_Audio) String() string            { return proto.CompactTextString(m) }
func (*Event_Audio) ProtoMessage()               {}
func (*Event_Audio) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{0, 2} }

func (m *Event_Audio) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Event_Audio) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Event_Audio) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type Event_Meta struct {
	// Types that are valid to be assigned to Body:
	//	*Event_Meta_Confidence_
	Body isEvent_Meta_Body `protobuf_oneof:"body"`
}

func (m *Event_Meta) Reset()                    { *m = Event_Meta{} }
func (m *Event_Meta) String() string            { return proto.CompactTextString(m) }
func (*Event_Meta) ProtoMessage()               {}
func (*Event_Meta) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{0, 3} }

type isEvent_Meta_Body interface {
	isEvent_Meta_Body()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_Meta_Confidence_ struct {
	Confidence *Event_Meta_Confidence `protobuf:"bytes,1,opt,name=confidence,oneof"`
}

func (*Event_Meta_Confidence_) isEvent_Meta_Body() {}

func (m *Event_Meta) GetBody() isEvent_Meta_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Event_Meta) GetConfidence() *Event_Meta_Confidence {
	if x, ok := m.GetBody().(*Event_Meta_Confidence_); ok {
		return x.Confidence
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event_Meta) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_Meta_OneofMarshaler, _Event_Meta_OneofUnmarshaler, _Event_Meta_OneofSizer, []interface{}{
		(*Event_Meta_Confidence_)(nil),
	}
}

func _Event_Meta_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event_Meta)
	// body
	switch x := m.Body.(type) {
	case *Event_Meta_Confidence_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Confidence); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event_Meta.Body has unexpected type %T", x)
	}
	return nil
}

func _Event_Meta_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event_Meta)
	switch tag {
	case 1: // body.confidence
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Event_Meta_Confidence)
		err := b.DecodeMessage(msg)
		m.Body = &Event_Meta_Confidence_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_Meta_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event_Meta)
	// body
	switch x := m.Body.(type) {
	case *Event_Meta_Confidence_:
		s := proto.Size(x.Confidence)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Event_Meta_Confidence struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Event_Meta_Confidence) Reset()         { *m = Event_Meta_Confidence{} }
func (m *Event_Meta_Confidence) String() string { return proto.CompactTextString(m) }
func (*Event_Meta_Confidence) ProtoMessage()    {}
func (*Event_Meta_Confidence) Descriptor() ([]byte, []int) {
	return fileDescriptorEngine, []int{0, 3, 0}
}

func (m *Event_Meta_Confidence) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Events struct {
	Events    []*Event `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
	Lookahead bool     `protobuf:"varint,2,opt,name=lookahead,proto3" json:"lookahead,omitempty"`
	// client-side processing
	ReceivedAt uint64 `protobuf:"varint,3,opt,name=receivedAt,proto3" json:"receivedAt,omitempty"`
	// client-side processing
	ChannelId uint32 `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
}

func (m *Events) Reset()                    { *m = Events{} }
func (m *Events) String() string            { return proto.CompactTextString(m) }
func (*Events) ProtoMessage()               {}
func (*Events) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{1} }

func (m *Events) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Events) GetLookahead() bool {
	if m != nil {
		return m.Lookahead
	}
	return false
}

func (m *Events) GetReceivedAt() uint64 {
	if m != nil {
		return m.ReceivedAt
	}
	return 0
}

func (m *Events) GetChannelId() uint32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

type Lexicon struct {
	// number 1 reserved
	Items []*Lexicon_LexItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	// list of allowed phonemes (returned by server)
	Alpha string `protobuf:"bytes,3,opt,name=alpha,proto3" json:"alpha,omitempty"`
}

func (m *Lexicon) Reset()                    { *m = Lexicon{} }
func (m *Lexicon) String() string            { return proto.CompactTextString(m) }
func (*Lexicon) ProtoMessage()               {}
func (*Lexicon) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{2} }

func (m *Lexicon) GetItems() []*Lexicon_LexItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Lexicon) GetAlpha() string {
	if m != nil {
		return m.Alpha
	}
	return ""
}

type Lexicon_UserItem struct {
	// output symbol (required)
	Sym string `protobuf:"bytes,1,opt,name=sym,proto3" json:"sym,omitempty"`
	// pronunciation in phonetic alphabet (optional)
	Pron string `protobuf:"bytes,2,opt,name=pron,proto3" json:"pron,omitempty"`
	// grapheme (optional)
	Graph string `protobuf:"bytes,3,opt,name=graph,proto3" json:"graph,omitempty"`
	// symbol already exists in lexicon (returned by server)
	FoundInLex bool `protobuf:"varint,4,opt,name=foundInLex,proto3" json:"foundInLex,omitempty"`
}

func (m *Lexicon_UserItem) Reset()                    { *m = Lexicon_UserItem{} }
func (m *Lexicon_UserItem) String() string            { return proto.CompactTextString(m) }
func (*Lexicon_UserItem) ProtoMessage()               {}
func (*Lexicon_UserItem) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{2, 0} }

func (m *Lexicon_UserItem) GetSym() string {
	if m != nil {
		return m.Sym
	}
	return ""
}

func (m *Lexicon_UserItem) GetPron() string {
	if m != nil {
		return m.Pron
	}
	return ""
}

func (m *Lexicon_UserItem) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *Lexicon_UserItem) GetFoundInLex() bool {
	if m != nil {
		return m.FoundInLex
	}
	return false
}

type Lexicon_NoiseItem struct {
	// output symbol
	Sym string `protobuf:"bytes,1,opt,name=sym,proto3" json:"sym,omitempty"`
	// pronunciation
	Pron string `protobuf:"bytes,2,opt,name=pron,proto3" json:"pron,omitempty"`
}

func (m *Lexicon_NoiseItem) Reset()                    { *m = Lexicon_NoiseItem{} }
func (m *Lexicon_NoiseItem) String() string            { return proto.CompactTextString(m) }
func (*Lexicon_NoiseItem) ProtoMessage()               {}
func (*Lexicon_NoiseItem) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{2, 1} }

func (m *Lexicon_NoiseItem) GetSym() string {
	if m != nil {
		return m.Sym
	}
	return ""
}

func (m *Lexicon_NoiseItem) GetPron() string {
	if m != nil {
		return m.Pron
	}
	return ""
}

type Lexicon_MainItem struct {
	// output symbol
	Sym string `protobuf:"bytes,1,opt,name=sym,proto3" json:"sym,omitempty"`
	// pronunciation
	Pron string `protobuf:"bytes,2,opt,name=pron,proto3" json:"pron,omitempty"`
	// mount, equal to sym if blank
	Mnt string `protobuf:"bytes,3,opt,name=mnt,proto3" json:"mnt,omitempty"`
}

func (m *Lexicon_MainItem) Reset()                    { *m = Lexicon_MainItem{} }
func (m *Lexicon_MainItem) String() string            { return proto.CompactTextString(m) }
func (*Lexicon_MainItem) ProtoMessage()               {}
func (*Lexicon_MainItem) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{2, 2} }

func (m *Lexicon_MainItem) GetSym() string {
	if m != nil {
		return m.Sym
	}
	return ""
}

func (m *Lexicon_MainItem) GetPron() string {
	if m != nil {
		return m.Pron
	}
	return ""
}

func (m *Lexicon_MainItem) GetMnt() string {
	if m != nil {
		return m.Mnt
	}
	return ""
}

type Lexicon_LexItem struct {
	// Types that are valid to be assigned to Item:
	//	*Lexicon_LexItem_User
	//	*Lexicon_LexItem_Main
	//	*Lexicon_LexItem_Noise
	Item isLexicon_LexItem_Item `protobuf_oneof:"item"`
}

func (m *Lexicon_LexItem) Reset()                    { *m = Lexicon_LexItem{} }
func (m *Lexicon_LexItem) String() string            { return proto.CompactTextString(m) }
func (*Lexicon_LexItem) ProtoMessage()               {}
func (*Lexicon_LexItem) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{2, 3} }

type isLexicon_LexItem_Item interface {
	isLexicon_LexItem_Item()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Lexicon_LexItem_User struct {
	User *Lexicon_UserItem `protobuf:"bytes,1,opt,name=user,oneof"`
}
type Lexicon_LexItem_Main struct {
	Main *Lexicon_MainItem `protobuf:"bytes,2,opt,name=main,oneof"`
}
type Lexicon_LexItem_Noise struct {
	Noise *Lexicon_NoiseItem `protobuf:"bytes,3,opt,name=noise,oneof"`
}

func (*Lexicon_LexItem_User) isLexicon_LexItem_Item()  {}
func (*Lexicon_LexItem_Main) isLexicon_LexItem_Item()  {}
func (*Lexicon_LexItem_Noise) isLexicon_LexItem_Item() {}

func (m *Lexicon_LexItem) GetItem() isLexicon_LexItem_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *Lexicon_LexItem) GetUser() *Lexicon_UserItem {
	if x, ok := m.GetItem().(*Lexicon_LexItem_User); ok {
		return x.User
	}
	return nil
}

func (m *Lexicon_LexItem) GetMain() *Lexicon_MainItem {
	if x, ok := m.GetItem().(*Lexicon_LexItem_Main); ok {
		return x.Main
	}
	return nil
}

func (m *Lexicon_LexItem) GetNoise() *Lexicon_NoiseItem {
	if x, ok := m.GetItem().(*Lexicon_LexItem_Noise); ok {
		return x.Noise
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Lexicon_LexItem) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Lexicon_LexItem_OneofMarshaler, _Lexicon_LexItem_OneofUnmarshaler, _Lexicon_LexItem_OneofSizer, []interface{}{
		(*Lexicon_LexItem_User)(nil),
		(*Lexicon_LexItem_Main)(nil),
		(*Lexicon_LexItem_Noise)(nil),
	}
}

func _Lexicon_LexItem_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Lexicon_LexItem)
	// item
	switch x := m.Item.(type) {
	case *Lexicon_LexItem_User:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.User); err != nil {
			return err
		}
	case *Lexicon_LexItem_Main:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Main); err != nil {
			return err
		}
	case *Lexicon_LexItem_Noise:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Noise); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Lexicon_LexItem.Item has unexpected type %T", x)
	}
	return nil
}

func _Lexicon_LexItem_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Lexicon_LexItem)
	switch tag {
	case 1: // item.user
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Lexicon_UserItem)
		err := b.DecodeMessage(msg)
		m.Item = &Lexicon_LexItem_User{msg}
		return true, err
	case 2: // item.main
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Lexicon_MainItem)
		err := b.DecodeMessage(msg)
		m.Item = &Lexicon_LexItem_Main{msg}
		return true, err
	case 3: // item.noise
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Lexicon_NoiseItem)
		err := b.DecodeMessage(msg)
		m.Item = &Lexicon_LexItem_Noise{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Lexicon_LexItem_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Lexicon_LexItem)
	// item
	switch x := m.Item.(type) {
	case *Lexicon_LexItem_User:
		s := proto.Size(x.User)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Lexicon_LexItem_Main:
		s := proto.Size(x.Main)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Lexicon_LexItem_Noise:
		s := proto.Size(x.Noise)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AudioFormat struct {
	// Types that are valid to be assigned to Formats:
	//	*AudioFormat_Auto
	//	*AudioFormat_Pcm
	//	*AudioFormat_Header_
	Formats isAudioFormat_Formats `protobuf_oneof:"formats"`
}

func (m *AudioFormat) Reset()                    { *m = AudioFormat{} }
func (m *AudioFormat) String() string            { return proto.CompactTextString(m) }
func (*AudioFormat) ProtoMessage()               {}
func (*AudioFormat) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{3} }

type isAudioFormat_Formats interface {
	isAudioFormat_Formats()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AudioFormat_Auto struct {
	Auto *AudioFormat_AutoDetect `protobuf:"bytes,1,opt,name=auto,oneof"`
}
type AudioFormat_Pcm struct {
	Pcm *AudioFormat_PCM `protobuf:"bytes,2,opt,name=pcm,oneof"`
}
type AudioFormat_Header_ struct {
	Header *AudioFormat_Header `protobuf:"bytes,3,opt,name=header,oneof"`
}

func (*AudioFormat_Auto) isAudioFormat_Formats()    {}
func (*AudioFormat_Pcm) isAudioFormat_Formats()     {}
func (*AudioFormat_Header_) isAudioFormat_Formats() {}

func (m *AudioFormat) GetFormats() isAudioFormat_Formats {
	if m != nil {
		return m.Formats
	}
	return nil
}

func (m *AudioFormat) GetAuto() *AudioFormat_AutoDetect {
	if x, ok := m.GetFormats().(*AudioFormat_Auto); ok {
		return x.Auto
	}
	return nil
}

func (m *AudioFormat) GetPcm() *AudioFormat_PCM {
	if x, ok := m.GetFormats().(*AudioFormat_Pcm); ok {
		return x.Pcm
	}
	return nil
}

func (m *AudioFormat) GetHeader() *AudioFormat_Header {
	if x, ok := m.GetFormats().(*AudioFormat_Header_); ok {
		return x.Header
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AudioFormat) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AudioFormat_OneofMarshaler, _AudioFormat_OneofUnmarshaler, _AudioFormat_OneofSizer, []interface{}{
		(*AudioFormat_Auto)(nil),
		(*AudioFormat_Pcm)(nil),
		(*AudioFormat_Header_)(nil),
	}
}

func _AudioFormat_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AudioFormat)
	// formats
	switch x := m.Formats.(type) {
	case *AudioFormat_Auto:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Auto); err != nil {
			return err
		}
	case *AudioFormat_Pcm:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pcm); err != nil {
			return err
		}
	case *AudioFormat_Header_:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Header); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AudioFormat.Formats has unexpected type %T", x)
	}
	return nil
}

func _AudioFormat_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AudioFormat)
	switch tag {
	case 1: // formats.auto
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AudioFormat_AutoDetect)
		err := b.DecodeMessage(msg)
		m.Formats = &AudioFormat_Auto{msg}
		return true, err
	case 2: // formats.pcm
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AudioFormat_PCM)
		err := b.DecodeMessage(msg)
		m.Formats = &AudioFormat_Pcm{msg}
		return true, err
	case 3: // formats.header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AudioFormat_Header)
		err := b.DecodeMessage(msg)
		m.Formats = &AudioFormat_Header_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AudioFormat_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AudioFormat)
	// formats
	switch x := m.Formats.(type) {
	case *AudioFormat_Auto:
		s := proto.Size(x.Auto)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AudioFormat_Pcm:
		s := proto.Size(x.Pcm)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AudioFormat_Header_:
		s := proto.Size(x.Header)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AudioFormat_AutoDetect struct {
	// probing size in bytes (from 32 to INT_MAX)
	ProbeSizeBytes uint32 `protobuf:"varint,1,opt,name=probeSizeBytes,proto3" json:"probeSizeBytes,omitempty"`
}

func (m *AudioFormat_AutoDetect) Reset()                    { *m = AudioFormat_AutoDetect{} }
func (m *AudioFormat_AutoDetect) String() string            { return proto.CompactTextString(m) }
func (*AudioFormat_AutoDetect) ProtoMessage()               {}
func (*AudioFormat_AutoDetect) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{3, 0} }

func (m *AudioFormat_AutoDetect) GetProbeSizeBytes() uint32 {
	if m != nil {
		return m.ProbeSizeBytes
	}
	return 0
}

type AudioFormat_PCM struct {
	SampleFormat  AudioFormat_SampleFormat  `protobuf:"varint,1,opt,name=sampleFormat,proto3,enum=ntx.v2t.engine.AudioFormat_SampleFormat" json:"sampleFormat,omitempty"`
	SampleRate    AudioFormat_SampleRate    `protobuf:"varint,2,opt,name=sampleRate,proto3,enum=ntx.v2t.engine.AudioFormat_SampleRate" json:"sampleRate,omitempty"`
	ChannelLayout AudioFormat_ChannelLayout `protobuf:"varint,3,opt,name=channelLayout,proto3,enum=ntx.v2t.engine.AudioFormat_ChannelLayout" json:"channelLayout,omitempty"`
}

func (m *AudioFormat_PCM) Reset()                    { *m = AudioFormat_PCM{} }
func (m *AudioFormat_PCM) String() string            { return proto.CompactTextString(m) }
func (*AudioFormat_PCM) ProtoMessage()               {}
func (*AudioFormat_PCM) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{3, 1} }

func (m *AudioFormat_PCM) GetSampleFormat() AudioFormat_SampleFormat {
	if m != nil {
		return m.SampleFormat
	}
	return AudioFormat_AUDIO_SAMPLE_FORMAT_NONE
}

func (m *AudioFormat_PCM) GetSampleRate() AudioFormat_SampleRate {
	if m != nil {
		return m.SampleRate
	}
	return AudioFormat_AUDIO_SAMPLE_RATE_NONE
}

func (m *AudioFormat_PCM) GetChannelLayout() AudioFormat_ChannelLayout {
	if m != nil {
		return m.ChannelLayout
	}
	return AudioFormat_AUDIO_CHANNEL_LAYOUT_NONE
}

type AudioFormat_Header struct {
	Header []byte `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *AudioFormat_Header) Reset()                    { *m = AudioFormat_Header{} }
func (m *AudioFormat_Header) String() string            { return proto.CompactTextString(m) }
func (*AudioFormat_Header) ProtoMessage()               {}
func (*AudioFormat_Header) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{3, 2} }

func (m *AudioFormat_Header) GetHeader() []byte {
	if m != nil {
		return m.Header
	}
	return nil
}

type EngineContext struct {
	AudioFormat  *AudioFormat               `protobuf:"bytes,1,opt,name=audioFormat" json:"audioFormat,omitempty"`
	AudioChannel EngineContext_AudioChannel `protobuf:"varint,2,opt,name=audioChannel,proto3,enum=ntx.v2t.engine.EngineContext_AudioChannel" json:"audioChannel,omitempty"`
	// Types that are valid to be assigned to Config:
	//	*EngineContext_Vad
	//	*EngineContext_V2T
	//	*EngineContext_Ppc
	Config isEngineContext_Config `protobuf_oneof:"config"`
}

func (m *EngineContext) Reset()                    { *m = EngineContext{} }
func (m *EngineContext) String() string            { return proto.CompactTextString(m) }
func (*EngineContext) ProtoMessage()               {}
func (*EngineContext) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{4} }

type isEngineContext_Config interface {
	isEngineContext_Config()
	MarshalTo([]byte) (int, error)
	Size() int
}

type EngineContext_Vad struct {
	Vad *EngineContext_VADConfig `protobuf:"bytes,3,opt,name=vad,oneof"`
}
type EngineContext_V2T struct {
	V2T *EngineContext_V2TConfig `protobuf:"bytes,5,opt,name=v2t,oneof"`
}
type EngineContext_Ppc struct {
	Ppc *EngineContext_PPCConfig `protobuf:"bytes,9,opt,name=ppc,oneof"`
}

func (*EngineContext_Vad) isEngineContext_Config() {}
func (*EngineContext_V2T) isEngineContext_Config() {}
func (*EngineContext_Ppc) isEngineContext_Config() {}

func (m *EngineContext) GetConfig() isEngineContext_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *EngineContext) GetAudioFormat() *AudioFormat {
	if m != nil {
		return m.AudioFormat
	}
	return nil
}

func (m *EngineContext) GetAudioChannel() EngineContext_AudioChannel {
	if m != nil {
		return m.AudioChannel
	}
	return EngineContext_AUDIO_CHANNEL_DOWNMIX
}

func (m *EngineContext) GetVad() *EngineContext_VADConfig {
	if x, ok := m.GetConfig().(*EngineContext_Vad); ok {
		return x.Vad
	}
	return nil
}

func (m *EngineContext) GetV2T() *EngineContext_V2TConfig {
	if x, ok := m.GetConfig().(*EngineContext_V2T); ok {
		return x.V2T
	}
	return nil
}

func (m *EngineContext) GetPpc() *EngineContext_PPCConfig {
	if x, ok := m.GetConfig().(*EngineContext_Ppc); ok {
		return x.Ppc
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EngineContext) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EngineContext_OneofMarshaler, _EngineContext_OneofUnmarshaler, _EngineContext_OneofSizer, []interface{}{
		(*EngineContext_Vad)(nil),
		(*EngineContext_V2T)(nil),
		(*EngineContext_Ppc)(nil),
	}
}

func _EngineContext_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EngineContext)
	// config
	switch x := m.Config.(type) {
	case *EngineContext_Vad:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vad); err != nil {
			return err
		}
	case *EngineContext_V2T:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.V2T); err != nil {
			return err
		}
	case *EngineContext_Ppc:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ppc); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EngineContext.Config has unexpected type %T", x)
	}
	return nil
}

func _EngineContext_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EngineContext)
	switch tag {
	case 3: // config.vad
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EngineContext_VADConfig)
		err := b.DecodeMessage(msg)
		m.Config = &EngineContext_Vad{msg}
		return true, err
	case 5: // config.v2t
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EngineContext_V2TConfig)
		err := b.DecodeMessage(msg)
		m.Config = &EngineContext_V2T{msg}
		return true, err
	case 9: // config.ppc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EngineContext_PPCConfig)
		err := b.DecodeMessage(msg)
		m.Config = &EngineContext_Ppc{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EngineContext_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EngineContext)
	// config
	switch x := m.Config.(type) {
	case *EngineContext_Vad:
		s := proto.Size(x.Vad)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EngineContext_V2T:
		s := proto.Size(x.V2T)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EngineContext_Ppc:
		s := proto.Size(x.Ppc)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Voice activity detector
type EngineContext_VADConfig struct {
}

func (m *EngineContext_VADConfig) Reset()                    { *m = EngineContext_VADConfig{} }
func (m *EngineContext_VADConfig) String() string            { return proto.CompactTextString(m) }
func (*EngineContext_VADConfig) ProtoMessage()               {}
func (*EngineContext_VADConfig) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{4, 0} }

// Punctuation
type EngineContext_PNCConfig struct {
}

func (m *EngineContext_PNCConfig) Reset()                    { *m = EngineContext_PNCConfig{} }
func (m *EngineContext_PNCConfig) String() string            { return proto.CompactTextString(m) }
func (*EngineContext_PNCConfig) ProtoMessage()               {}
func (*EngineContext_PNCConfig) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{4, 1} }

// Voice to text
type EngineContext_V2TConfig struct {
	WithVAD     *EngineContext_VADConfig `protobuf:"bytes,1,opt,name=withVAD" json:"withVAD,omitempty"`
	WithPPC     *EngineContext_PPCConfig `protobuf:"bytes,3,opt,name=withPPC" json:"withPPC,omitempty"`
	WithLexicon *Lexicon                 `protobuf:"bytes,4,opt,name=withLexicon" json:"withLexicon,omitempty"`
	WithPNC     *EngineContext_PNCConfig `protobuf:"bytes,5,opt,name=withPNC" json:"withPNC,omitempty"`
}

func (m *EngineContext_V2TConfig) Reset()                    { *m = EngineContext_V2TConfig{} }
func (m *EngineContext_V2TConfig) String() string            { return proto.CompactTextString(m) }
func (*EngineContext_V2TConfig) ProtoMessage()               {}
func (*EngineContext_V2TConfig) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{4, 2} }

func (m *EngineContext_V2TConfig) GetWithVAD() *EngineContext_VADConfig {
	if m != nil {
		return m.WithVAD
	}
	return nil
}

func (m *EngineContext_V2TConfig) GetWithPPC() *EngineContext_PPCConfig {
	if m != nil {
		return m.WithPPC
	}
	return nil
}

func (m *EngineContext_V2TConfig) GetWithLexicon() *Lexicon {
	if m != nil {
		return m.WithLexicon
	}
	return nil
}

func (m *EngineContext_V2TConfig) GetWithPNC() *EngineContext_PNCConfig {
	if m != nil {
		return m.WithPNC
	}
	return nil
}

// Postprocessing
type EngineContext_PPCConfig struct {
}

func (m *EngineContext_PPCConfig) Reset()                    { *m = EngineContext_PPCConfig{} }
func (m *EngineContext_PPCConfig) String() string            { return proto.CompactTextString(m) }
func (*EngineContext_PPCConfig) ProtoMessage()               {}
func (*EngineContext_PPCConfig) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{4, 3} }

type EngineContextStart struct {
	Context *EngineContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
}

func (m *EngineContextStart) Reset()                    { *m = EngineContextStart{} }
func (m *EngineContextStart) String() string            { return proto.CompactTextString(m) }
func (*EngineContextStart) ProtoMessage()               {}
func (*EngineContextStart) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{5} }

func (m *EngineContextStart) GetContext() *EngineContext {
	if m != nil {
		return m.Context
	}
	return nil
}

type EngineContextEnd struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *EngineContextEnd) Reset()                    { *m = EngineContextEnd{} }
func (m *EngineContextEnd) String() string            { return proto.CompactTextString(m) }
func (*EngineContextEnd) ProtoMessage()               {}
func (*EngineContextEnd) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{6} }

func (m *EngineContextEnd) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type EventsPush struct {
	Events *Events `protobuf:"bytes,1,opt,name=events" json:"events,omitempty"`
}

func (m *EventsPush) Reset()                    { *m = EventsPush{} }
func (m *EventsPush) String() string            { return proto.CompactTextString(m) }
func (*EventsPush) ProtoMessage()               {}
func (*EventsPush) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{7} }

func (m *EventsPush) GetEvents() *Events {
	if m != nil {
		return m.Events
	}
	return nil
}

type EventsPull struct {
}

func (m *EventsPull) Reset()                    { *m = EventsPull{} }
func (m *EventsPull) String() string            { return proto.CompactTextString(m) }
func (*EventsPull) ProtoMessage()               {}
func (*EventsPull) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{8} }

type EngineStream struct {
	// Types that are valid to be assigned to Payload:
	//	*EngineStream_Start
	//	*EngineStream_Push
	//	*EngineStream_Pull
	//	*EngineStream_End
	Payload isEngineStream_Payload `protobuf_oneof:"payload"`
}

func (m *EngineStream) Reset()                    { *m = EngineStream{} }
func (m *EngineStream) String() string            { return proto.CompactTextString(m) }
func (*EngineStream) ProtoMessage()               {}
func (*EngineStream) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{9} }

type isEngineStream_Payload interface {
	isEngineStream_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type EngineStream_Start struct {
	Start *EngineContextStart `protobuf:"bytes,1,opt,name=start,oneof"`
}
type EngineStream_Push struct {
	Push *EventsPush `protobuf:"bytes,2,opt,name=push,oneof"`
}
type EngineStream_Pull struct {
	Pull *EventsPull `protobuf:"bytes,3,opt,name=pull,oneof"`
}
type EngineStream_End struct {
	End *EngineContextEnd `protobuf:"bytes,4,opt,name=end,oneof"`
}

func (*EngineStream_Start) isEngineStream_Payload() {}
func (*EngineStream_Push) isEngineStream_Payload()  {}
func (*EngineStream_Pull) isEngineStream_Payload()  {}
func (*EngineStream_End) isEngineStream_Payload()   {}

func (m *EngineStream) GetPayload() isEngineStream_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *EngineStream) GetStart() *EngineContextStart {
	if x, ok := m.GetPayload().(*EngineStream_Start); ok {
		return x.Start
	}
	return nil
}

func (m *EngineStream) GetPush() *EventsPush {
	if x, ok := m.GetPayload().(*EngineStream_Push); ok {
		return x.Push
	}
	return nil
}

func (m *EngineStream) GetPull() *EventsPull {
	if x, ok := m.GetPayload().(*EngineStream_Pull); ok {
		return x.Pull
	}
	return nil
}

func (m *EngineStream) GetEnd() *EngineContextEnd {
	if x, ok := m.GetPayload().(*EngineStream_End); ok {
		return x.End
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EngineStream) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EngineStream_OneofMarshaler, _EngineStream_OneofUnmarshaler, _EngineStream_OneofSizer, []interface{}{
		(*EngineStream_Start)(nil),
		(*EngineStream_Push)(nil),
		(*EngineStream_Pull)(nil),
		(*EngineStream_End)(nil),
	}
}

func _EngineStream_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EngineStream)
	// payload
	switch x := m.Payload.(type) {
	case *EngineStream_Start:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Start); err != nil {
			return err
		}
	case *EngineStream_Push:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Push); err != nil {
			return err
		}
	case *EngineStream_Pull:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pull); err != nil {
			return err
		}
	case *EngineStream_End:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.End); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EngineStream.Payload has unexpected type %T", x)
	}
	return nil
}

func _EngineStream_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EngineStream)
	switch tag {
	case 1: // payload.start
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EngineContextStart)
		err := b.DecodeMessage(msg)
		m.Payload = &EngineStream_Start{msg}
		return true, err
	case 2: // payload.push
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventsPush)
		err := b.DecodeMessage(msg)
		m.Payload = &EngineStream_Push{msg}
		return true, err
	case 3: // payload.pull
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventsPull)
		err := b.DecodeMessage(msg)
		m.Payload = &EngineStream_Pull{msg}
		return true, err
	case 4: // payload.end
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EngineContextEnd)
		err := b.DecodeMessage(msg)
		m.Payload = &EngineStream_End{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EngineStream_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EngineStream)
	// payload
	switch x := m.Payload.(type) {
	case *EngineStream_Start:
		s := proto.Size(x.Start)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EngineStream_Push:
		s := proto.Size(x.Push)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EngineStream_Pull:
		s := proto.Size(x.Pull)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EngineStream_End:
		s := proto.Size(x.End)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Event)(nil), "ntx.v2t.engine.Event")
	proto.RegisterType((*Event_Timestamp)(nil), "ntx.v2t.engine.Event.Timestamp")
	proto.RegisterType((*Event_Label)(nil), "ntx.v2t.engine.Event.Label")
	proto.RegisterType((*Event_Audio)(nil), "ntx.v2t.engine.Event.Audio")
	proto.RegisterType((*Event_Meta)(nil), "ntx.v2t.engine.Event.Meta")
	proto.RegisterType((*Event_Meta_Confidence)(nil), "ntx.v2t.engine.Event.Meta.Confidence")
	proto.RegisterType((*Events)(nil), "ntx.v2t.engine.Events")
	proto.RegisterType((*Lexicon)(nil), "ntx.v2t.engine.Lexicon")
	proto.RegisterType((*Lexicon_UserItem)(nil), "ntx.v2t.engine.Lexicon.UserItem")
	proto.RegisterType((*Lexicon_NoiseItem)(nil), "ntx.v2t.engine.Lexicon.NoiseItem")
	proto.RegisterType((*Lexicon_MainItem)(nil), "ntx.v2t.engine.Lexicon.MainItem")
	proto.RegisterType((*Lexicon_LexItem)(nil), "ntx.v2t.engine.Lexicon.LexItem")
	proto.RegisterType((*AudioFormat)(nil), "ntx.v2t.engine.AudioFormat")
	proto.RegisterType((*AudioFormat_AutoDetect)(nil), "ntx.v2t.engine.AudioFormat.AutoDetect")
	proto.RegisterType((*AudioFormat_PCM)(nil), "ntx.v2t.engine.AudioFormat.PCM")
	proto.RegisterType((*AudioFormat_Header)(nil), "ntx.v2t.engine.AudioFormat.Header")
	proto.RegisterType((*EngineContext)(nil), "ntx.v2t.engine.EngineContext")
	proto.RegisterType((*EngineContext_VADConfig)(nil), "ntx.v2t.engine.EngineContext.VADConfig")
	proto.RegisterType((*EngineContext_PNCConfig)(nil), "ntx.v2t.engine.EngineContext.PNCConfig")
	proto.RegisterType((*EngineContext_V2TConfig)(nil), "ntx.v2t.engine.EngineContext.V2TConfig")
	proto.RegisterType((*EngineContext_PPCConfig)(nil), "ntx.v2t.engine.EngineContext.PPCConfig")
	proto.RegisterType((*EngineContextStart)(nil), "ntx.v2t.engine.EngineContextStart")
	proto.RegisterType((*EngineContextEnd)(nil), "ntx.v2t.engine.EngineContextEnd")
	proto.RegisterType((*EventsPush)(nil), "ntx.v2t.engine.EventsPush")
	proto.RegisterType((*EventsPull)(nil), "ntx.v2t.engine.EventsPull")
	proto.RegisterType((*EngineStream)(nil), "ntx.v2t.engine.EngineStream")
	proto.RegisterEnum("ntx.v2t.engine.EngineModule", EngineModule_name, EngineModule_value)
	proto.RegisterEnum("ntx.v2t.engine.AudioFormat_ChannelLayout", AudioFormat_ChannelLayout_name, AudioFormat_ChannelLayout_value)
	proto.RegisterEnum("ntx.v2t.engine.AudioFormat_SampleFormat", AudioFormat_SampleFormat_name, AudioFormat_SampleFormat_value)
	proto.RegisterEnum("ntx.v2t.engine.AudioFormat_SampleRate", AudioFormat_SampleRate_name, AudioFormat_SampleRate_value)
	proto.RegisterEnum("ntx.v2t.engine.EngineContext_AudioChannel", EngineContext_AudioChannel_name, EngineContext_AudioChannel_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EngineService service

type EngineServiceClient interface {
	StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (EngineService_StreamingRecognizeClient, error)
}

type engineServiceClient struct {
	cc *grpc.ClientConn
}

func NewEngineServiceClient(cc *grpc.ClientConn) EngineServiceClient {
	return &engineServiceClient{cc}
}

func (c *engineServiceClient) StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (EngineService_StreamingRecognizeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EngineService_serviceDesc.Streams[0], c.cc, "/ntx.v2t.engine.EngineService/StreamingRecognize", opts...)
	if err != nil {
		return nil, err
	}
	x := &engineServiceStreamingRecognizeClient{stream}
	return x, nil
}

type EngineService_StreamingRecognizeClient interface {
	Send(*EngineStream) error
	Recv() (*EngineStream, error)
	grpc.ClientStream
}

type engineServiceStreamingRecognizeClient struct {
	grpc.ClientStream
}

func (x *engineServiceStreamingRecognizeClient) Send(m *EngineStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *engineServiceStreamingRecognizeClient) Recv() (*EngineStream, error) {
	m := new(EngineStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EngineService service

type EngineServiceServer interface {
	StreamingRecognize(EngineService_StreamingRecognizeServer) error
}

func RegisterEngineServiceServer(s *grpc.Server, srv EngineServiceServer) {
	s.RegisterService(&_EngineService_serviceDesc, srv)
}

func _EngineService_StreamingRecognize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EngineServiceServer).StreamingRecognize(&engineServiceStreamingRecognizeServer{stream})
}

type EngineService_StreamingRecognizeServer interface {
	Send(*EngineStream) error
	Recv() (*EngineStream, error)
	grpc.ServerStream
}

type engineServiceStreamingRecognizeServer struct {
	grpc.ServerStream
}

func (x *engineServiceStreamingRecognizeServer) Send(m *EngineStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *engineServiceStreamingRecognizeServer) Recv() (*EngineStream, error) {
	m := new(EngineStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EngineService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ntx.v2t.engine.EngineService",
	HandlerType: (*EngineServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingRecognize",
			Handler:       _EngineService_StreamingRecognize_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ntx/v2t/engine/engine.proto",
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		nn1, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Event_Timestamp_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Timestamp != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.Timestamp.Size()))
		n2, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Event_Label_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Label != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.Label.Size()))
		n3, err := m.Label.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Event_Audio_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Audio != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.Audio.Size()))
		n4, err := m.Audio.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Event_Meta_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Meta != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.Meta.Size()))
		n5, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Event_Timestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_Timestamp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn6, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	return i, nil
}

func (m *Event_Timestamp_Timestamp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintEngine(dAtA, i, uint64(m.Timestamp))
	return i, nil
}
func (m *Event_Timestamp_Recovery) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintEngine(dAtA, i, uint64(m.Recovery))
	return i, nil
}
func (m *Event_Label) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_Label) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Label != nil {
		nn7, err := m.Label.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	return i, nil
}

func (m *Event_Label_Item) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintEngine(dAtA, i, uint64(len(m.Item)))
	i += copy(dAtA[i:], m.Item)
	return i, nil
}
func (m *Event_Label_Plus) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintEngine(dAtA, i, uint64(len(m.Plus)))
	i += copy(dAtA[i:], m.Plus)
	return i, nil
}
func (m *Event_Label_Noise) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEngine(dAtA, i, uint64(len(m.Noise)))
	i += copy(dAtA[i:], m.Noise)
	return i, nil
}
func (m *Event_Audio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_Audio) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Body) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEngine(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if m.Offset != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.Offset))
	}
	if m.Duration != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.Duration))
	}
	return i, nil
}

func (m *Event_Meta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_Meta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		nn8, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn8
	}
	return i, nil
}

func (m *Event_Meta_Confidence_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Confidence != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.Confidence.Size()))
		n9, err := m.Confidence.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Event_Meta_Confidence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_Meta_Confidence) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Engine(dAtA, i, uint64(math.Float64bits(float64(m.Value))))
	}
	return i, nil
}

func (m *Events) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Events) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEngine(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Lookahead {
		dAtA[i] = 0x10
		i++
		if m.Lookahead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ReceivedAt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.ReceivedAt))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.ChannelId))
	}
	return i, nil
}

func (m *Lexicon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lexicon) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintEngine(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Alpha) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEngine(dAtA, i, uint64(len(m.Alpha)))
		i += copy(dAtA[i:], m.Alpha)
	}
	return i, nil
}

func (m *Lexicon_UserItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lexicon_UserItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sym) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEngine(dAtA, i, uint64(len(m.Sym)))
		i += copy(dAtA[i:], m.Sym)
	}
	if len(m.Pron) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEngine(dAtA, i, uint64(len(m.Pron)))
		i += copy(dAtA[i:], m.Pron)
	}
	if len(m.Graph) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEngine(dAtA, i, uint64(len(m.Graph)))
		i += copy(dAtA[i:], m.Graph)
	}
	if m.FoundInLex {
		dAtA[i] = 0x20
		i++
		if m.FoundInLex {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Lexicon_NoiseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lexicon_NoiseItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sym) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEngine(dAtA, i, uint64(len(m.Sym)))
		i += copy(dAtA[i:], m.Sym)
	}
	if len(m.Pron) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEngine(dAtA, i, uint64(len(m.Pron)))
		i += copy(dAtA[i:], m.Pron)
	}
	return i, nil
}

func (m *Lexicon_MainItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lexicon_MainItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sym) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEngine(dAtA, i, uint64(len(m.Sym)))
		i += copy(dAtA[i:], m.Sym)
	}
	if len(m.Pron) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEngine(dAtA, i, uint64(len(m.Pron)))
		i += copy(dAtA[i:], m.Pron)
	}
	if len(m.Mnt) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEngine(dAtA, i, uint64(len(m.Mnt)))
		i += copy(dAtA[i:], m.Mnt)
	}
	return i, nil
}

func (m *Lexicon_LexItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lexicon_LexItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		nn10, err := m.Item.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn10
	}
	return i, nil
}

func (m *Lexicon_LexItem_User) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.User != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.User.Size()))
		n11, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Lexicon_LexItem_Main) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Main != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.Main.Size()))
		n12, err := m.Main.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *Lexicon_LexItem_Noise) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Noise != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.Noise.Size()))
		n13, err := m.Noise.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *AudioFormat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioFormat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Formats != nil {
		nn14, err := m.Formats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn14
	}
	return i, nil
}

func (m *AudioFormat_Auto) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Auto != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.Auto.Size()))
		n15, err := m.Auto.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *AudioFormat_Pcm) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Pcm != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.Pcm.Size()))
		n16, err := m.Pcm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *AudioFormat_Header_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Header != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.Header.Size()))
		n17, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *AudioFormat_AutoDetect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioFormat_AutoDetect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProbeSizeBytes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.ProbeSizeBytes))
	}
	return i, nil
}

func (m *AudioFormat_PCM) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioFormat_PCM) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SampleFormat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.SampleFormat))
	}
	if m.SampleRate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.SampleRate))
	}
	if m.ChannelLayout != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.ChannelLayout))
	}
	return i, nil
}

func (m *AudioFormat_Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioFormat_Header) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Header) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEngine(dAtA, i, uint64(len(m.Header)))
		i += copy(dAtA[i:], m.Header)
	}
	return i, nil
}

func (m *EngineContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EngineContext) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AudioFormat != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.AudioFormat.Size()))
		n18, err := m.AudioFormat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.AudioChannel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.AudioChannel))
	}
	if m.Config != nil {
		nn19, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn19
	}
	return i, nil
}

func (m *EngineContext_Vad) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Vad != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.Vad.Size()))
		n20, err := m.Vad.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *EngineContext_V2T) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.V2T != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.V2T.Size()))
		n21, err := m.V2T.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *EngineContext_Ppc) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Ppc != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.Ppc.Size()))
		n22, err := m.Ppc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *EngineContext_VADConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EngineContext_VADConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *EngineContext_PNCConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EngineContext_PNCConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *EngineContext_V2TConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EngineContext_V2TConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WithVAD != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.WithVAD.Size()))
		n23, err := m.WithVAD.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.WithPPC != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.WithPPC.Size()))
		n24, err := m.WithPPC.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.WithLexicon != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.WithLexicon.Size()))
		n25, err := m.WithLexicon.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.WithPNC != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.WithPNC.Size()))
		n26, err := m.WithPNC.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}

func (m *EngineContext_PPCConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EngineContext_PPCConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *EngineContextStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EngineContextStart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Context != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.Context.Size()))
		n27, err := m.Context.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *EngineContextEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EngineContextEnd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEngine(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *EventsPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventsPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Events != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.Events.Size()))
		n28, err := m.Events.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *EventsPull) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventsPull) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *EngineStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EngineStream) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		nn29, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn29
	}
	return i, nil
}

func (m *EngineStream_Start) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Start != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.Start.Size()))
		n30, err := m.Start.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *EngineStream_Push) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Push != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.Push.Size()))
		n31, err := m.Push.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *EngineStream_Pull) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Pull != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.Pull.Size()))
		n32, err := m.Pull.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *EngineStream_End) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.End != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEngine(dAtA, i, uint64(m.End.Size()))
		n33, err := m.End.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func encodeFixed64Engine(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Engine(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintEngine(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Event) Size() (n int) {
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	return n
}

func (m *Event_Timestamp_) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}
func (m *Event_Label_) Size() (n int) {
	var l int
	_ = l
	if m.Label != nil {
		l = m.Label.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}
func (m *Event_Audio_) Size() (n int) {
	var l int
	_ = l
	if m.Audio != nil {
		l = m.Audio.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}
func (m *Event_Meta_) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}
func (m *Event_Timestamp) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *Event_Timestamp_Timestamp) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovEngine(uint64(m.Timestamp))
	return n
}
func (m *Event_Timestamp_Recovery) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovEngine(uint64(m.Recovery))
	return n
}
func (m *Event_Label) Size() (n int) {
	var l int
	_ = l
	if m.Label != nil {
		n += m.Label.Size()
	}
	return n
}

func (m *Event_Label_Item) Size() (n int) {
	var l int
	_ = l
	l = len(m.Item)
	n += 1 + l + sovEngine(uint64(l))
	return n
}
func (m *Event_Label_Plus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Plus)
	n += 1 + l + sovEngine(uint64(l))
	return n
}
func (m *Event_Label_Noise) Size() (n int) {
	var l int
	_ = l
	l = len(m.Noise)
	n += 1 + l + sovEngine(uint64(l))
	return n
}
func (m *Event_Audio) Size() (n int) {
	var l int
	_ = l
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovEngine(uint64(m.Offset))
	}
	if m.Duration != 0 {
		n += 1 + sovEngine(uint64(m.Duration))
	}
	return n
}

func (m *Event_Meta) Size() (n int) {
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	return n
}

func (m *Event_Meta_Confidence_) Size() (n int) {
	var l int
	_ = l
	if m.Confidence != nil {
		l = m.Confidence.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}
func (m *Event_Meta_Confidence) Size() (n int) {
	var l int
	_ = l
	if m.Value != 0 {
		n += 9
	}
	return n
}

func (m *Events) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovEngine(uint64(l))
		}
	}
	if m.Lookahead {
		n += 2
	}
	if m.ReceivedAt != 0 {
		n += 1 + sovEngine(uint64(m.ReceivedAt))
	}
	if m.ChannelId != 0 {
		n += 1 + sovEngine(uint64(m.ChannelId))
	}
	return n
}

func (m *Lexicon) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovEngine(uint64(l))
		}
	}
	l = len(m.Alpha)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *Lexicon_UserItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Sym)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	l = len(m.Pron)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	l = len(m.Graph)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.FoundInLex {
		n += 2
	}
	return n
}

func (m *Lexicon_NoiseItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Sym)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	l = len(m.Pron)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *Lexicon_MainItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Sym)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	l = len(m.Pron)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	l = len(m.Mnt)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *Lexicon_LexItem) Size() (n int) {
	var l int
	_ = l
	if m.Item != nil {
		n += m.Item.Size()
	}
	return n
}

func (m *Lexicon_LexItem_User) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}
func (m *Lexicon_LexItem_Main) Size() (n int) {
	var l int
	_ = l
	if m.Main != nil {
		l = m.Main.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}
func (m *Lexicon_LexItem_Noise) Size() (n int) {
	var l int
	_ = l
	if m.Noise != nil {
		l = m.Noise.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}
func (m *AudioFormat) Size() (n int) {
	var l int
	_ = l
	if m.Formats != nil {
		n += m.Formats.Size()
	}
	return n
}

func (m *AudioFormat_Auto) Size() (n int) {
	var l int
	_ = l
	if m.Auto != nil {
		l = m.Auto.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}
func (m *AudioFormat_Pcm) Size() (n int) {
	var l int
	_ = l
	if m.Pcm != nil {
		l = m.Pcm.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}
func (m *AudioFormat_Header_) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}
func (m *AudioFormat_AutoDetect) Size() (n int) {
	var l int
	_ = l
	if m.ProbeSizeBytes != 0 {
		n += 1 + sovEngine(uint64(m.ProbeSizeBytes))
	}
	return n
}

func (m *AudioFormat_PCM) Size() (n int) {
	var l int
	_ = l
	if m.SampleFormat != 0 {
		n += 1 + sovEngine(uint64(m.SampleFormat))
	}
	if m.SampleRate != 0 {
		n += 1 + sovEngine(uint64(m.SampleRate))
	}
	if m.ChannelLayout != 0 {
		n += 1 + sovEngine(uint64(m.ChannelLayout))
	}
	return n
}

func (m *AudioFormat_Header) Size() (n int) {
	var l int
	_ = l
	l = len(m.Header)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *EngineContext) Size() (n int) {
	var l int
	_ = l
	if m.AudioFormat != nil {
		l = m.AudioFormat.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.AudioChannel != 0 {
		n += 1 + sovEngine(uint64(m.AudioChannel))
	}
	if m.Config != nil {
		n += m.Config.Size()
	}
	return n
}

func (m *EngineContext_Vad) Size() (n int) {
	var l int
	_ = l
	if m.Vad != nil {
		l = m.Vad.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}
func (m *EngineContext_V2T) Size() (n int) {
	var l int
	_ = l
	if m.V2T != nil {
		l = m.V2T.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}
func (m *EngineContext_Ppc) Size() (n int) {
	var l int
	_ = l
	if m.Ppc != nil {
		l = m.Ppc.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}
func (m *EngineContext_VADConfig) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *EngineContext_PNCConfig) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *EngineContext_V2TConfig) Size() (n int) {
	var l int
	_ = l
	if m.WithVAD != nil {
		l = m.WithVAD.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.WithPPC != nil {
		l = m.WithPPC.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.WithLexicon != nil {
		l = m.WithLexicon.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.WithPNC != nil {
		l = m.WithPNC.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *EngineContext_PPCConfig) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *EngineContextStart) Size() (n int) {
	var l int
	_ = l
	if m.Context != nil {
		l = m.Context.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *EngineContextEnd) Size() (n int) {
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *EventsPush) Size() (n int) {
	var l int
	_ = l
	if m.Events != nil {
		l = m.Events.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *EventsPull) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *EngineStream) Size() (n int) {
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *EngineStream_Start) Size() (n int) {
	var l int
	_ = l
	if m.Start != nil {
		l = m.Start.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}
func (m *EngineStream_Push) Size() (n int) {
	var l int
	_ = l
	if m.Push != nil {
		l = m.Push.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}
func (m *EngineStream_Pull) Size() (n int) {
	var l int
	_ = l
	if m.Pull != nil {
		l = m.Pull.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}
func (m *EngineStream_End) Size() (n int) {
	var l int
	_ = l
	if m.End != nil {
		l = m.End.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func sovEngine(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEngine(x uint64) (n int) {
	return sovEngine(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_Timestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Event_Timestamp_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_Label{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Event_Label_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_Audio{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Event_Audio_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_Meta{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Event_Meta_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_Timestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &Event_Timestamp_Timestamp{v}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recovery", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &Event_Timestamp_Recovery{v}
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_Label) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Label: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Label: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = &Event_Label_Item{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = &Event_Label_Plus{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Noise", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = &Event_Label_Noise{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_Audio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Audio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Audio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_Meta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Meta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Meta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confidence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_Meta_Confidence{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Event_Meta_Confidence_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_Meta_Confidence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Confidence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Confidence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Events) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Events: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Events: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lookahead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Lookahead = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedAt", wireType)
			}
			m.ReceivedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivedAt |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Lexicon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lexicon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lexicon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Lexicon_LexItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alpha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alpha = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Lexicon_UserItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sym", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sym = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pron", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pron = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Graph", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Graph = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoundInLex", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FoundInLex = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Lexicon_NoiseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoiseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoiseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sym", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sym = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pron", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pron = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Lexicon_MainItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MainItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MainItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sym", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sym = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pron", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pron = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mnt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mnt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Lexicon_LexItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LexItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LexItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Lexicon_UserItem{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &Lexicon_LexItem_User{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Main", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Lexicon_MainItem{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &Lexicon_LexItem_Main{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Noise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Lexicon_NoiseItem{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &Lexicon_LexItem_Noise{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioFormat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioFormat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioFormat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auto", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AudioFormat_AutoDetect{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Formats = &AudioFormat_Auto{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pcm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AudioFormat_PCM{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Formats = &AudioFormat_Pcm{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AudioFormat_Header{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Formats = &AudioFormat_Header_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioFormat_AutoDetect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoDetect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoDetect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeSizeBytes", wireType)
			}
			m.ProbeSizeBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProbeSizeBytes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioFormat_PCM) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PCM: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PCM: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleFormat", wireType)
			}
			m.SampleFormat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SampleFormat |= (AudioFormat_SampleFormat(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SampleRate", wireType)
			}
			m.SampleRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SampleRate |= (AudioFormat_SampleRate(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelLayout", wireType)
			}
			m.ChannelLayout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelLayout |= (AudioFormat_ChannelLayout(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioFormat_Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Header = append(m.Header[:0], dAtA[iNdEx:postIndex]...)
			if m.Header == nil {
				m.Header = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EngineContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EngineContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EngineContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AudioFormat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AudioFormat == nil {
				m.AudioFormat = &AudioFormat{}
			}
			if err := m.AudioFormat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AudioChannel", wireType)
			}
			m.AudioChannel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AudioChannel |= (EngineContext_AudioChannel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vad", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EngineContext_VADConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &EngineContext_Vad{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V2T", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EngineContext_V2TConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &EngineContext_V2T{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ppc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EngineContext_PPCConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &EngineContext_Ppc{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EngineContext_VADConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VADConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VADConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EngineContext_PNCConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PNCConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PNCConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EngineContext_V2TConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: V2TConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: V2TConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithVAD", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WithVAD == nil {
				m.WithVAD = &EngineContext_VADConfig{}
			}
			if err := m.WithVAD.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithPPC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WithPPC == nil {
				m.WithPPC = &EngineContext_PPCConfig{}
			}
			if err := m.WithPPC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithLexicon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WithLexicon == nil {
				m.WithLexicon = &Lexicon{}
			}
			if err := m.WithLexicon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithPNC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WithPNC == nil {
				m.WithPNC = &EngineContext_PNCConfig{}
			}
			if err := m.WithPNC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EngineContext_PPCConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PPCConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PPCConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EngineContextStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EngineContextStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EngineContextStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Context == nil {
				m.Context = &EngineContext{}
			}
			if err := m.Context.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EngineContextEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EngineContextEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EngineContextEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventsPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventsPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventsPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Events == nil {
				m.Events = &Events{}
			}
			if err := m.Events.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventsPull) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventsPull: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventsPull: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EngineStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EngineStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EngineStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EngineContextStart{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &EngineStream_Start{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Push", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventsPush{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &EngineStream_Push{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pull", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventsPull{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &EngineStream_Pull{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EngineContextEnd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &EngineStream_End{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEngine(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEngine
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEngine
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEngine(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEngine = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEngine   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ntx/v2t/engine/engine.proto", fileDescriptorEngine) }

var fileDescriptorEngine = []byte{
	// 1584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0xdd, 0x6e, 0xdb, 0xc8,
	0x15, 0x16, 0xf5, 0x67, 0xe9, 0x48, 0x76, 0xa6, 0x93, 0xc4, 0x56, 0x68, 0xc7, 0x71, 0x09, 0x34,
	0x75, 0x03, 0x54, 0x91, 0x69, 0xc7, 0x4d, 0xda, 0x14, 0x85, 0x24, 0xd3, 0x91, 0x51, 0xea, 0x07,
	0x23, 0x39, 0x69, 0x73, 0x63, 0xd0, 0xe2, 0xd8, 0x26, 0x4a, 0x91, 0x02, 0x45, 0xa9, 0x76, 0xfa,
	0x10, 0x41, 0xd1, 0x9b, 0x3e, 0x41, 0x2f, 0xfa, 0x0c, 0xfb, 0x00, 0x7b, 0xb9, 0x8f, 0xb0, 0xc8,
	0xee, 0xe5, 0x02, 0x7b, 0x93, 0x07, 0x58, 0xcc, 0x70, 0x24, 0x51, 0x8e, 0xc8, 0xf5, 0x5e, 0x89,
	0xe7, 0x7c, 0xdf, 0x77, 0xe6, 0x9c, 0xc3, 0x99, 0xe1, 0x8c, 0x60, 0xd3, 0xf1, 0xaf, 0x9f, 0x4f,
	0x54, 0xff, 0x39, 0x75, 0x2e, 0x2d, 0x87, 0x8a, 0x9f, 0xf2, 0xd0, 0x73, 0x7d, 0x17, 0xaf, 0x39,
	0xfe, 0x75, 0x79, 0xa2, 0xfa, 0xe5, 0xc0, 0xab, 0x7c, 0x9f, 0x86, 0x8c, 0x36, 0xa1, 0x8e, 0x8f,
	0xff, 0x02, 0x79, 0xdf, 0x1a, 0xd0, 0x91, 0x6f, 0x0c, 0x86, 0x25, 0x69, 0x47, 0xda, 0x2d, 0xa8,
	0x4f, 0xca, 0x8b, 0xec, 0x32, 0x67, 0x96, 0x7b, 0x53, 0x5a, 0x23, 0x41, 0xe6, 0x1a, 0xbc, 0x0f,
	0x19, 0xdb, 0x38, 0xa7, 0x76, 0x29, 0xc9, 0xc5, 0x9b, 0xcb, 0xc5, 0x3a, 0xa3, 0x34, 0x12, 0x24,
	0xe0, 0x32, 0x91, 0x31, 0x36, 0x2d, 0xb7, 0x94, 0x8a, 0x13, 0x55, 0x19, 0x85, 0x89, 0x38, 0x17,
	0x57, 0x20, 0x3d, 0xa0, 0xbe, 0x51, 0x4a, 0x73, 0x8d, 0xbc, 0x5c, 0xd3, 0xa4, 0xbe, 0xd1, 0x48,
	0x10, 0xce, 0x94, 0x09, 0xe4, 0x67, 0x59, 0xe3, 0xed, 0xdb, 0x95, 0xa6, 0x17, 0x0b, 0xd9, 0x82,
	0x9c, 0x47, 0xfb, 0xee, 0x84, 0x7a, 0x37, 0xbc, 0x16, 0x06, 0xcf, 0x3c, 0xb5, 0x15, 0xc8, 0x4c,
	0x0c, 0x7b, 0x4c, 0xe5, 0x1e, 0x64, 0x78, 0x31, 0xf8, 0x01, 0xa4, 0x2d, 0x9f, 0x0e, 0x78, 0xa8,
	0x3c, 0x1b, 0x92, 0x59, 0xcc, 0x3b, 0xb4, 0xc7, 0x23, 0x1e, 0x81, 0x7b, 0x99, 0x85, 0xd7, 0x21,
	0xe3, 0xb8, 0xd6, 0x88, 0xf2, 0x7a, 0x99, 0x3b, 0x30, 0x59, 0x54, 0xde, 0x10, 0xb9, 0x0d, 0x19,
	0x5e, 0x2d, 0xc6, 0x90, 0x3e, 0x77, 0xcd, 0x1b, 0x1e, 0xb5, 0x48, 0xf8, 0x33, 0x5e, 0x87, 0xac,
	0x7b, 0x71, 0x31, 0xa2, 0x7e, 0x29, 0xc3, 0xf2, 0x22, 0xc2, 0xc2, 0x32, 0xe4, 0xcc, 0xb1, 0x67,
	0xf8, 0x96, 0xeb, 0x94, 0xb2, 0x1c, 0x99, 0xd9, 0xf2, 0xbf, 0x20, 0xcd, 0x5a, 0x81, 0xdf, 0x00,
	0xf4, 0x5d, 0xe7, 0xc2, 0x32, 0xa9, 0xd3, 0xa7, 0xe2, 0x05, 0xff, 0x26, 0xba, 0x75, 0xe5, 0xfa,
	0x8c, 0xdc, 0x48, 0x90, 0x90, 0x54, 0x56, 0x00, 0xe6, 0x18, 0x7e, 0x20, 0xda, 0xc1, 0x23, 0x4a,
	0x24, 0x30, 0x6a, 0xd9, 0x20, 0xf9, 0xe9, 0xaf, 0xf2, 0x1f, 0x09, 0xb2, 0x3c, 0xf6, 0x08, 0xff,
	0x1e, 0xb2, 0x94, 0x3f, 0x95, 0xa4, 0x9d, 0xd4, 0x6e, 0x41, 0x7d, 0xb8, 0x34, 0x07, 0x22, 0x48,
	0x78, 0x0b, 0xf2, 0xb6, 0xeb, 0xfe, 0xc3, 0xb8, 0xa2, 0x86, 0xc9, 0x7b, 0x99, 0x23, 0x73, 0x07,
	0xde, 0x06, 0xf0, 0x68, 0x9f, 0x5a, 0x13, 0x6a, 0x56, 0x7d, 0xde, 0xd3, 0x34, 0x09, 0x79, 0x98,
	0xba, 0x7f, 0x65, 0x38, 0x0e, 0xb5, 0x4f, 0x4c, 0x3e, 0x5d, 0x56, 0xc9, 0xdc, 0xa1, 0x7c, 0x4e,
	0xc1, 0x8a, 0x4e, 0xaf, 0xad, 0xbe, 0xeb, 0xe0, 0x17, 0x90, 0x61, 0xaf, 0x8d, 0xbd, 0xaf, 0xd4,
	0xb2, 0xa9, 0x2f, 0x78, 0xec, 0xf7, 0xc4, 0xa7, 0x03, 0x12, 0xb0, 0x59, 0xf9, 0x86, 0x3d, 0xbc,
	0x32, 0x82, 0xf7, 0x49, 0x02, 0x43, 0xbe, 0x80, 0xdc, 0xe9, 0x88, 0x7a, 0x8c, 0x88, 0x11, 0xa4,
	0x46, 0x37, 0x62, 0x72, 0x10, 0xf6, 0xc8, 0xde, 0xec, 0xd0, 0x73, 0x9d, 0x60, 0x66, 0x10, 0xfe,
	0xcc, 0xe2, 0x5c, 0x7a, 0xc6, 0xf0, 0x6a, 0x1a, 0x87, 0x1b, 0xac, 0xbc, 0x0b, 0x77, 0xec, 0x98,
	0x27, 0x8e, 0x4e, 0xaf, 0x79, 0xfe, 0x39, 0x12, 0xf2, 0xc8, 0x7b, 0x90, 0x6f, 0xb1, 0xe9, 0x73,
	0xf7, 0x81, 0xe4, 0x1a, 0xe4, 0x9a, 0x86, 0xe5, 0xfc, 0x82, 0xd4, 0x10, 0xa4, 0x06, 0x8e, 0x2f,
	0x12, 0x63, 0x8f, 0xf2, 0x57, 0x12, 0xef, 0x1b, 0x8f, 0x71, 0x08, 0xe9, 0xf1, 0x88, 0x7a, 0x62,
	0x42, 0xed, 0x44, 0xb5, 0x6d, 0xda, 0x0e, 0xb6, 0x10, 0x18, 0x9f, 0xe9, 0x06, 0x86, 0xe5, 0x88,
	0xcd, 0x22, 0x52, 0x37, 0xcd, 0x95, 0xaf, 0x64, 0xc3, 0x72, 0xf0, 0xab, 0xf0, 0x02, 0x2a, 0xa8,
	0xbf, 0x8e, 0x12, 0xce, 0xfa, 0x32, 0x5f, 0x63, 0xd9, 0x60, 0x9d, 0x2a, 0xff, 0x2b, 0x42, 0x81,
	0xaf, 0xb1, 0x63, 0xd7, 0x1b, 0x18, 0x3e, 0x7e, 0x0d, 0x69, 0x63, 0xec, 0xbb, 0xa2, 0x84, 0xa7,
	0xb7, 0x23, 0x86, 0xa8, 0xe5, 0xea, 0xd8, 0x77, 0x8f, 0xa8, 0x4f, 0xfb, 0x3e, 0x4b, 0x88, 0xa9,
	0xf0, 0x3e, 0xa4, 0x86, 0xfd, 0x81, 0xa8, 0xe3, 0x49, 0x9c, 0xb8, 0x53, 0x6f, 0x36, 0x12, 0x84,
	0xb1, 0xf1, 0x6b, 0xc8, 0xb2, 0xf9, 0x4b, 0x3d, 0x51, 0x86, 0x12, 0xa7, 0x6b, 0x70, 0x66, 0x23,
	0x41, 0x84, 0x46, 0x3e, 0x00, 0x98, 0x27, 0x82, 0x9f, 0xc2, 0xda, 0xd0, 0x73, 0xcf, 0x69, 0xd7,
	0xfa, 0x40, 0x6b, 0x37, 0x3e, 0x1d, 0xf1, 0x42, 0x56, 0xc9, 0x2d, 0xaf, 0xfc, 0x83, 0x04, 0xa9,
	0x4e, 0xbd, 0x89, 0x75, 0x28, 0x8e, 0x8c, 0xc1, 0xd0, 0xa6, 0x41, 0x78, 0xce, 0x5e, 0x53, 0x77,
	0xe3, 0x32, 0xe8, 0x86, 0xf8, 0x64, 0x41, 0x8d, 0x8f, 0x01, 0x02, 0x9b, 0x18, 0x3e, 0xe5, 0x5d,
	0x58, 0x8b, 0x6f, 0x61, 0x77, 0xc6, 0x26, 0x21, 0x25, 0x6e, 0xc3, 0xaa, 0x58, 0x98, 0xba, 0x71,
	0xe3, 0x8e, 0x83, 0xf9, 0xb6, 0xa6, 0xfe, 0x2e, 0x2e, 0x54, 0x3d, 0x2c, 0x20, 0x8b, 0x7a, 0x79,
	0x07, 0xb2, 0x41, 0xe3, 0xd8, 0xae, 0x29, 0x9a, 0x1d, 0xec, 0xa5, 0xc2, 0x52, 0x1c, 0x58, 0x5d,
	0x88, 0x80, 0x1f, 0xc3, 0xa3, 0xea, 0xe9, 0xd1, 0x49, 0xfb, 0xac, 0xde, 0xa8, 0xb6, 0x5a, 0x9a,
	0x7e, 0xa6, 0x57, 0xff, 0xde, 0x3e, 0xed, 0x9d, 0xb5, 0xda, 0x2d, 0x0d, 0x25, 0x22, 0xe1, 0x66,
	0xbb, 0xd5, 0x46, 0x12, 0x7e, 0x02, 0x9b, 0x4b, 0xe1, 0x6e, 0x4f, 0x23, 0x5a, 0x1b, 0x25, 0x95,
	0x7f, 0x67, 0xa0, 0x18, 0xee, 0x24, 0xde, 0x82, 0x52, 0xa0, 0xe8, 0x56, 0x9b, 0x1d, 0x5d, 0x3b,
	0x3b, 0x6e, 0x93, 0x66, 0x75, 0x36, 0x5c, 0x04, 0x5a, 0xd5, 0xab, 0xef, 0x90, 0x34, 0x4f, 0x66,
	0x11, 0x3d, 0xde, 0x57, 0x6b, 0x1a, 0x4a, 0xc6, 0xc0, 0xba, 0x86, 0x52, 0x91, 0xf0, 0xe1, 0x41,
	0x4d, 0x43, 0xe9, 0x18, 0x58, 0xd7, 0x50, 0x26, 0x0a, 0x6e, 0x9e, 0xb2, 0xd4, 0xb2, 0x51, 0x70,
	0x77, 0xef, 0xb0, 0xa6, 0xa1, 0x95, 0x18, 0x58, 0xd7, 0x50, 0x2e, 0x12, 0x56, 0x59, 0x6a, 0xf9,
	0x18, 0x58, 0xd7, 0x10, 0x44, 0xc2, 0xbc, 0x2d, 0x85, 0x18, 0x58, 0xd7, 0x50, 0x11, 0xcb, 0xb0,
	0xbe, 0x14, 0x7e, 0x89, 0x56, 0xa3, 0xa4, 0xa7, 0xbc, 0xaa, 0xb5, 0x18, 0x58, 0xd7, 0xd0, 0xbd,
	0x48, 0x98, 0x57, 0x85, 0x62, 0x60, 0x5d, 0x43, 0xbf, 0x8a, 0x84, 0x79, 0x55, 0x38, 0x06, 0xd6,
	0x35, 0x74, 0x3f, 0xaa, 0xaa, 0xd3, 0x97, 0xe8, 0x81, 0xf2, 0x31, 0x09, 0x30, 0x5f, 0x91, 0x5f,
	0x50, 0x49, 0xb5, 0xa7, 0x4d, 0xe7, 0xe3, 0x52, 0xec, 0x65, 0xa5, 0x52, 0x41, 0x12, 0xde, 0x84,
	0x8d, 0x2f, 0xb1, 0xbd, 0x43, 0x06, 0x26, 0x97, 0x83, 0xfb, 0x2a, 0x03, 0x53, 0xcb, 0xc1, 0x03,
	0x1e, 0x36, 0xbd, 0x1c, 0x7c, 0xc5, 0xc3, 0x66, 0x22, 0xc6, 0xdc, 0xab, 0xa8, 0x2f, 0x50, 0x76,
	0x39, 0xa8, 0xaa, 0x95, 0x17, 0x15, 0xb4, 0x12, 0x31, 0xe6, 0xc1, 0x5e, 0xa5, 0x82, 0x72, 0xb5,
	0x3c, 0xac, 0x5c, 0xf0, 0xe5, 0x39, 0x52, 0x3e, 0x67, 0x60, 0x55, 0xe3, 0xdb, 0x4e, 0xdd, 0x75,
	0x7c, 0x7a, 0xed, 0xe3, 0x3f, 0x43, 0xc1, 0x98, 0x6f, 0x40, 0xe2, 0x8b, 0xb1, 0x19, 0xb3, 0x47,
	0x91, 0x30, 0x1f, 0xb7, 0xa0, 0xc8, 0x4d, 0xb1, 0xed, 0x88, 0xed, 0xf2, 0xd9, 0x17, 0x27, 0xa0,
	0xf0, 0x98, 0x41, 0x34, 0xa1, 0x20, 0x0b, 0x7a, 0xfc, 0x27, 0x48, 0x4d, 0x0c, 0x53, 0x7c, 0x43,
	0x7e, 0x1b, 0x1f, 0xe6, 0x6d, 0xf5, 0x88, 0x1f, 0xdb, 0x2e, 0xd9, 0x37, 0x68, 0x62, 0x98, 0x5c,
	0xac, 0x06, 0x27, 0xc9, 0x9f, 0x17, 0xab, 0xbd, 0x90, 0x58, 0xf5, 0x99, 0x78, 0x38, 0xec, 0x97,
	0xf2, 0x77, 0x11, 0x77, 0x3a, 0xf5, 0xb9, 0x78, 0x38, 0xec, 0xcb, 0x05, 0xc8, 0xcf, 0xb2, 0x61,
	0x46, 0xa7, 0x25, 0x08, 0xf2, 0xc7, 0x24, 0xe4, 0x67, 0x63, 0xe1, 0x2a, 0xac, 0xfc, 0xd3, 0xf2,
	0xaf, 0xde, 0x56, 0x8f, 0x44, 0xa7, 0xef, 0x5a, 0x22, 0x99, 0xea, 0xa6, 0x21, 0x3a, 0x9d, 0xfa,
	0xdd, 0xba, 0x34, 0xcb, 0x95, 0x4c, 0x75, 0xf8, 0x15, 0x14, 0xd8, 0xa3, 0x38, 0x58, 0x88, 0x4b,
	0xc7, 0x46, 0xc4, 0xb9, 0x83, 0x84, 0xb9, 0xb3, 0xd1, 0x5b, 0xf5, 0xbb, 0xb5, 0x79, 0xd6, 0x08,
	0x32, 0xd5, 0xf1, 0xf6, 0x4c, 0x73, 0x52, 0xde, 0x43, 0x31, 0x3c, 0x1b, 0xf0, 0x23, 0x78, 0xb8,
	0xf8, 0xc9, 0x39, 0x6a, 0xbf, 0x6b, 0x35, 0x4f, 0xfe, 0x86, 0x12, 0x78, 0x1d, 0xf0, 0xad, 0xaf,
	0x91, 0x76, 0xdc, 0x43, 0x12, 0xde, 0x80, 0xfb, 0x8b, 0x7e, 0x72, 0xf2, 0xa6, 0xd1, 0x43, 0xc9,
	0x5a, 0x0e, 0xb2, 0xfd, 0x60, 0x94, 0x26, 0xe0, 0x85, 0xb4, 0xba, 0xbe, 0xe1, 0xf9, 0xf8, 0x0f,
	0xb0, 0xd2, 0x0f, 0x6c, 0xf1, 0x32, 0x1e, 0xc7, 0xd6, 0x42, 0xa6, 0x6c, 0x65, 0x17, 0xd0, 0x02,
	0xa2, 0x39, 0x26, 0x3b, 0xee, 0x52, 0xcf, 0x73, 0x3d, 0x71, 0xf6, 0x0c, 0x0c, 0xe5, 0x35, 0x40,
	0x70, 0x49, 0xe8, 0x8c, 0x47, 0x57, 0xb8, 0x1c, 0xba, 0x28, 0xb0, 0xf1, 0xd6, 0x97, 0x5e, 0x14,
	0x46, 0xd3, 0x9b, 0x82, 0x52, 0x9c, 0xab, 0x6d, 0x5b, 0xf9, 0x51, 0x82, 0x62, 0x30, 0x6c, 0xd7,
	0xf7, 0xa8, 0x31, 0xc0, 0x7f, 0x84, 0xcc, 0x88, 0x15, 0x22, 0xa2, 0x29, 0xb1, 0xd9, 0xf3, 0x92,
	0xd9, 0xc9, 0x91, 0x4b, 0xd8, 0x85, 0x73, 0x38, 0x1e, 0x5d, 0x89, 0x43, 0xde, 0xf2, 0x0b, 0x27,
	0x4f, 0x9a, 0xdf, 0xf3, 0x58, 0xf2, 0x5c, 0x61, 0xdb, 0x62, 0xd2, 0x45, 0x2a, 0x6c, 0x3b, 0x50,
	0xd8, 0x36, 0x3e, 0x80, 0x14, 0x75, 0x4c, 0x31, 0xbd, 0x76, 0x62, 0xb3, 0xd3, 0x1c, 0x93, 0x2d,
	0x25, 0xea, 0x98, 0x6c, 0xb7, 0x1a, 0x1a, 0x37, 0xb6, 0x6b, 0x98, 0xcf, 0xce, 0xa6, 0x05, 0x37,
	0x5d, 0x73, 0x6c, 0x53, 0x7c, 0x0f, 0x0a, 0xcd, 0xf6, 0xd1, 0xa9, 0x3e, 0xdb, 0xc0, 0xd7, 0x00,
	0x84, 0xe3, 0x6d, 0xf5, 0x08, 0x49, 0x61, 0x5b, 0xed, 0xa1, 0x4c, 0xc8, 0xee, 0x74, 0xea, 0xa8,
	0x10, 0xb6, 0x5b, 0x75, 0x74, 0x4f, 0xa5, 0xd3, 0xdd, 0xb0, 0x4b, 0xbd, 0x89, 0xd5, 0xa7, 0xb8,
	0x07, 0x38, 0x68, 0xae, 0xe5, 0x5c, 0x12, 0xda, 0x77, 0x2f, 0x1d, 0xeb, 0x03, 0xc5, 0x5b, 0xcb,
	0x73, 0x0f, 0x98, 0x72, 0x2c, 0xba, 0x2b, 0x55, 0xa4, 0xda, 0x5f, 0xbf, 0xfe, 0xb4, 0x2d, 0x7d,
	0xf3, 0x69, 0x5b, 0xfa, 0xf6, 0xd3, 0xb6, 0xf4, 0xdf, 0xef, 0xb6, 0x13, 0xb0, 0xd1, 0xff, 0xc0,
	0x55, 0xfc, 0x2f, 0x8c, 0x90, 0xf6, 0x7d, 0x36, 0xf8, 0xfd, 0x7f, 0x32, 0x8a, 0x71, 0x9e, 0xe5,
	0x9e, 0xfd, 0x9f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x9f, 0x3a, 0xe8, 0x15, 0x11, 0x00, 0x00,
}
